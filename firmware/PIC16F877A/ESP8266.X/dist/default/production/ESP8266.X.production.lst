

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Feb 07 04:09:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0019                     _TXREG	set	25
   123  001A                     _RCREG	set	26
   124  0037                     _RB7	set	55
   125  0065                     _RCIF	set	101
   126  00C4                     _CREN	set	196
   127  00C7                     _SPEN	set	199
   128  0043                     _RD3	set	67
   129  0042                     _RD2	set	66
   130  0047                     _RD7	set	71
   131  0046                     _RD6	set	70
   132  0045                     _RD5	set	69
   133  0044                     _RD4	set	68
   134  0088                     _TRISD	set	136
   135  0099                     _SPBRG	set	153
   136  04C1                     _TRMT	set	1217
   137  04C5                     _TXEN	set	1221
   138  043E                     _TRISC6	set	1086
   139  043F                     _TRISC7	set	1087
   140  04C4                     _SYNC	set	1220
   141  04C2                     _BRGH	set	1218
   142                           
   143                           	psect	strings
   144  0003                     __pstrings:	
   145  0003                     stringtab:	
   146  0003                     __stringtab:	
   147                           
   148                           ;	String table - string pointers are 1 byte each
   149  0003  1BFF               	btfsc	btemp+1,7
   150  0004  280D               	ljmp	stringcode
   151  0005  1383               	bcf	3,7
   152  0006  187F               	btfsc	btemp+1,0
   153  0007  1783               	bsf	3,7
   154  0008  0800               	movf	0,w
   155  0009  0A84               	incf	4,f
   156  000A  1903               	skipnz
   157  000B  0AFF               	incf	btemp+1,f
   158  000C  0008               	return
   159  000D                     stringcode:	
   160  000D                     stringdir:	
   161  000D  3000               	movlw	high stringdir
   162  000E  008A               	movwf	10
   163  000F  0804               	movf	4,w
   164  0010  0A84               	incf	4,f
   165  0011  0782               	addwf	2,f
   166  0012                     __stringbase:	
   167  0012  3400               	retlw	0
   168  0013                     __end_of__stringtab:	
   169  0013                     STR_14:	
   170  0013  3441               	retlw	65	;'A'
   171  0014  3454               	retlw	84	;'T'
   172  0015  342B               	retlw	43	;'+'
   173  0016  3443               	retlw	67	;'C'
   174  0017  3457               	retlw	87	;'W'
   175  0018  344A               	retlw	74	;'J'
   176  0019  3441               	retlw	65	;'A'
   177  001A  3450               	retlw	80	;'P'
   178  001B  343D               	retlw	61	;'='
   179  001C  3427               	retlw	39	;'''
   180  001D  344D               	retlw	77	;'M'
   181  001E  3449               	retlw	73	;'I'
   182  001F  346E               	retlw	110	;'n'
   183  0020  3463               	retlw	99	;'c'
   184  0021  3420               	retlw	32	;' '
   185  0022  344D               	retlw	77	;'M'
   186  0023  346F               	retlw	111	;'o'
   187  0024  3462               	retlw	98	;'b'
   188  0025  3469               	retlw	105	;'i'
   189  0026  346C               	retlw	108	;'l'
   190  0027  3465               	retlw	101	;'e'
   191  0028  3427               	retlw	39	;'''
   192  0029  342C               	retlw	44	;','
   193  002A  3427               	retlw	39	;'''
   194  002B  346F               	retlw	111	;'o'
   195  002C  346C               	retlw	108	;'l'
   196  002D  3475               	retlw	117	;'u'
   197  002E  3477               	retlw	119	;'w'
   198  002F  3461               	retlw	97	;'a'
   199  0030  3473               	retlw	115	;'s'
   200  0031  3465               	retlw	101	;'e'
   201  0032  3475               	retlw	117	;'u'
   202  0033  346E               	retlw	110	;'n'
   203  0034  3427               	retlw	39	;'''
   204  0035  3400               	retlw	0
   205  0036                     STR_17:	
   206  0036  3457               	retlw	87	;'W'
   207  0037  3469               	retlw	105	;'i'
   208  0038  3446               	retlw	70	;'F'
   209  0039  3469               	retlw	105	;'i'
   210  003A  3420               	retlw	32	;' '
   211  003B  3443               	retlw	67	;'C'
   212  003C  346F               	retlw	111	;'o'
   213  003D  346E               	retlw	110	;'n'
   214  003E  346E               	retlw	110	;'n'
   215  003F  3465               	retlw	101	;'e'
   216  0040  3463               	retlw	99	;'c'
   217  0041  3474               	retlw	116	;'t'
   218  0042  3420               	retlw	32	;' '
   219  0043  3446               	retlw	70	;'F'
   220  0044  3461               	retlw	97	;'a'
   221  0045  3469               	retlw	105	;'i'
   222  0046  346C               	retlw	108	;'l'
   223  0047  3400               	retlw	0
   224  0048                     STR_7:	
   225  0048  3445               	retlw	69	;'E'
   226  0049  3453               	retlw	83	;'S'
   227  004A  3450               	retlw	80	;'P'
   228  004B  3420               	retlw	32	;' '
   229  004C  3452               	retlw	82	;'R'
   230  004D  3465               	retlw	101	;'e'
   231  004E  3473               	retlw	115	;'s'
   232  004F  3470               	retlw	112	;'p'
   233  0050  346F               	retlw	111	;'o'
   234  0051  346E               	retlw	110	;'n'
   235  0052  3473               	retlw	115	;'s'
   236  0053  3465               	retlw	101	;'e'
   237  0054  3420               	retlw	32	;' '
   238  0055  3442               	retlw	66	;'B'
   239  0056  3461               	retlw	97	;'a'
   240  0057  3464               	retlw	100	;'d'
   241  0058  3400               	retlw	0
   242  0059                     STR_12:	
   243  0059  344F               	retlw	79	;'O'
   244  005A  3470               	retlw	112	;'p'
   245  005B  3420               	retlw	32	;' '
   246  005C  344D               	retlw	77	;'M'
   247  005D  346F               	retlw	111	;'o'
   248  005E  3464               	retlw	100	;'d'
   249  005F  3465               	retlw	101	;'e'
   250  0060  3420               	retlw	32	;' '
   251  0061  3453               	retlw	83	;'S'
   252  0062  3465               	retlw	101	;'e'
   253  0063  3474               	retlw	116	;'t'
   254  0064  3420               	retlw	32	;' '
   255  0065  3446               	retlw	70	;'F'
   256  0066  3461               	retlw	97	;'a'
   257  0067  3469               	retlw	105	;'i'
   258  0068  346C               	retlw	108	;'l'
   259  0069  3400               	retlw	0
   260  006A                     STR_1:	
   261  006A  3444               	retlw	68	;'D'
   262  006B  3445               	retlw	69	;'E'
   263  006C  3456               	retlw	86	;'V'
   264  006D  3449               	retlw	73	;'I'
   265  006E  3443               	retlw	67	;'C'
   266  006F  3445               	retlw	69	;'E'
   267  0070  343A               	retlw	58	;':'
   268  0071  3420               	retlw	32	;' '
   269  0072  344D               	retlw	77	;'M'
   270  0073  3449               	retlw	73	;'I'
   271  0074  346E               	retlw	110	;'n'
   272  0075  3463               	retlw	99	;'c'
   273  0076  3420               	retlw	32	;' '
   274  0077  3444               	retlw	68	;'D'
   275  0078  3465               	retlw	101	;'e'
   276  0079  3476               	retlw	118	;'v'
   277  007A  3400               	retlw	0
   278  007B                     STR_6:	
   279  007B  3445               	retlw	69	;'E'
   280  007C  3453               	retlw	83	;'S'
   281  007D  3450               	retlw	80	;'P'
   282  007E  3420               	retlw	32	;' '
   283  007F  3452               	retlw	82	;'R'
   284  0080  3465               	retlw	101	;'e'
   285  0081  3473               	retlw	115	;'s'
   286  0082  3470               	retlw	112	;'p'
   287  0083  346F               	retlw	111	;'o'
   288  0084  346E               	retlw	110	;'n'
   289  0085  3473               	retlw	115	;'s'
   290  0086  3465               	retlw	101	;'e'
   291  0087  3420               	retlw	32	;' '
   292  0088  344F               	retlw	79	;'O'
   293  0089  344B               	retlw	75	;'K'
   294  008A  3400               	retlw	0
   295  008B                     STR_16:	
   296  008B  3457               	retlw	87	;'W'
   297  008C  3469               	retlw	105	;'i'
   298  008D  3446               	retlw	70	;'F'
   299  008E  3469               	retlw	105	;'i'
   300  008F  3420               	retlw	32	;' '
   301  0090  3443               	retlw	67	;'C'
   302  0091  346F               	retlw	111	;'o'
   303  0092  346E               	retlw	110	;'n'
   304  0093  346E               	retlw	110	;'n'
   305  0094  3465               	retlw	101	;'e'
   306  0095  3463               	retlw	99	;'c'
   307  0096  3474               	retlw	116	;'t'
   308  0097  3420               	retlw	32	;' '
   309  0098  344F               	retlw	79	;'O'
   310  0099  344B               	retlw	75	;'K'
   311  009A  3400               	retlw	0
   312  009B                     STR_3:	
   313  009B  3453               	retlw	83	;'S'
   314  009C  3465               	retlw	101	;'e'
   315  009D  346E               	retlw	110	;'n'
   316  009E  3464               	retlw	100	;'d'
   317  009F  3420               	retlw	32	;' '
   318  00A0  3441               	retlw	65	;'A'
   319  00A1  3454               	retlw	84	;'T'
   320  00A2  3420               	retlw	32	;' '
   321  00A3  3443               	retlw	67	;'C'
   322  00A4  346F               	retlw	111	;'o'
   323  00A5  346D               	retlw	109	;'m'
   324  00A6  346D               	retlw	109	;'m'
   325  00A7  3461               	retlw	97	;'a'
   326  00A8  346E               	retlw	110	;'n'
   327  00A9  3464               	retlw	100	;'d'
   328  00AA  3400               	retlw	0
   329  00AB                     STR_2:	
   330  00AB  3453               	retlw	83	;'S'
   331  00AC  3454               	retlw	84	;'T'
   332  00AD  3441               	retlw	65	;'A'
   333  00AE  3454               	retlw	84	;'T'
   334  00AF  3455               	retlw	85	;'U'
   335  00B0  3453               	retlw	83	;'S'
   336  00B1  343A               	retlw	58	;':'
   337  00B2  3420               	retlw	32	;' '
   338  00B3  344F               	retlw	79	;'O'
   339  00B4  3466               	retlw	102	;'f'
   340  00B5  3466               	retlw	102	;'f'
   341  00B6  346C               	retlw	108	;'l'
   342  00B7  3469               	retlw	105	;'i'
   343  00B8  346E               	retlw	110	;'n'
   344  00B9  3465               	retlw	101	;'e'
   345  00BA  3400               	retlw	0
   346  00BB                     STR_13:	
   347  00BB  3457               	retlw	87	;'W'
   348  00BC  3469               	retlw	105	;'i'
   349  00BD  3446               	retlw	70	;'F'
   350  00BE  3469               	retlw	105	;'i'
   351  00BF  3420               	retlw	32	;' '
   352  00C0  3443               	retlw	67	;'C'
   353  00C1  346F               	retlw	111	;'o'
   354  00C2  346E               	retlw	110	;'n'
   355  00C3  346E               	retlw	110	;'n'
   356  00C4  3465               	retlw	101	;'e'
   357  00C5  3463               	retlw	99	;'c'
   358  00C6  3474               	retlw	116	;'t'
   359  00C7  3469               	retlw	105	;'i'
   360  00C8  346F               	retlw	111	;'o'
   361  00C9  346E               	retlw	110	;'n'
   362  00CA  3400               	retlw	0
   363  00CB                     STR_11:	
   364  00CB  344F               	retlw	79	;'O'
   365  00CC  3470               	retlw	112	;'p'
   366  00CD  3420               	retlw	32	;' '
   367  00CE  344D               	retlw	77	;'M'
   368  00CF  346F               	retlw	111	;'o'
   369  00D0  3464               	retlw	100	;'d'
   370  00D1  3465               	retlw	101	;'e'
   371  00D2  3420               	retlw	32	;' '
   372  00D3  3453               	retlw	83	;'S'
   373  00D4  3465               	retlw	101	;'e'
   374  00D5  3474               	retlw	116	;'t'
   375  00D6  3420               	retlw	32	;' '
   376  00D7  344F               	retlw	79	;'O'
   377  00D8  344B               	retlw	75	;'K'
   378  00D9  3400               	retlw	0
   379  00DA                     STR_8:	
   380  00DA  3453               	retlw	83	;'S'
   381  00DB  3465               	retlw	101	;'e'
   382  00DC  3474               	retlw	116	;'t'
   383  00DD  3420               	retlw	32	;' '
   384  00DE  344F               	retlw	79	;'O'
   385  00DF  3470               	retlw	112	;'p'
   386  00E0  342E               	retlw	46	;'.'
   387  00E1  3420               	retlw	32	;' '
   388  00E2  344D               	retlw	77	;'M'
   389  00E3  346F               	retlw	111	;'o'
   390  00E4  3464               	retlw	100	;'d'
   391  00E5  3465               	retlw	101	;'e'
   392  00E6  3400               	retlw	0
   393  00E7                     STR_9:	
   394  00E7  3441               	retlw	65	;'A'
   395  00E8  3454               	retlw	84	;'T'
   396  00E9  342B               	retlw	43	;'+'
   397  00EA  3443               	retlw	67	;'C'
   398  00EB  3457               	retlw	87	;'W'
   399  00EC  344D               	retlw	77	;'M'
   400  00ED  344F               	retlw	79	;'O'
   401  00EE  3444               	retlw	68	;'D'
   402  00EF  3445               	retlw	69	;'E'
   403  00F0  343D               	retlw	61	;'='
   404  00F1  3433               	retlw	51	;'3'
   405  00F2  3400               	retlw	0
   406  00F3                     STR_4:	
   407  00F3  3441               	retlw	65	;'A'
   408  00F4  3454               	retlw	84	;'T'
   409  00F5  3400               	retlw	0
   410  0088                     
   411                           ; #config settings
   412  0000                     
   413                           	psect	cinit
   414  07F4                     start_initialization:	
   415  07F4                     __initialization:	
   416                           
   417                           ; Clear objects allocated to BANK0
   418  07F4  01BD               	clrf	__pbssBANK0& (0+127)
   419  07F5  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   420  07F6  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   421  07F7  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   422  07F8  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   423  07F9  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   424  07FA  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   425  07FB  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   426  07FC                     end_of_initialization:	
   427                           ;End of C runtime variable initialization code
   428                           
   429  07FC                     __end_of__initialization:	
   430  07FC  0183               	clrf	3
   431  07FD  120A  118A  2D72   	ljmp	_main	;jump to C main() function
   432                           
   433                           	psect	bssBANK0
   434  003D                     __pbssBANK0:	
   435  003D                     _ESP_Response:	
   436  003D                     	ds	8
   437                           
   438                           	psect	cstackCOMMON
   439  0070                     __pcstackCOMMON:	
   440  0070                     ?_memset:	
   441  0070                     ?_Lcd_Port:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ??_Lcd_Port:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_Lcd_Cmd:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_Lcd_Clear:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_Lcd_Init:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_Lcd_Write_Char:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_UART_Data_Ready:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ??_UART_Data_Ready:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_UART_Read:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ??_UART_Read:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_UART_Read_Text:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ??_UART_Read_Text:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_UART_Write:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ??_UART_Write:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_UART_Write_Text:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_main:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_strcmp:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?___aldiv:	
   493                           ; 2 bytes @ 0x0
   494                           
   495  0070                     Lcd_Port@a:	
   496                           ; 4 bytes @ 0x0
   497                           
   498  0070                     UART_Write@data:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     strcmp@s2:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     memset@c:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ___aldiv@divisor:	
   508                           ; 2 bytes @ 0x0
   509                           
   510                           
   511                           ; 4 bytes @ 0x0
   512  0070                     	ds	1
   513  0071                     ??_Lcd_Cmd:	
   514  0071                     ??_Lcd_Write_Char:	
   515                           ; 1 bytes @ 0x1
   516                           
   517  0071                     ??_UART_Write_Text:	
   518                           ; 1 bytes @ 0x1
   519                           
   520  0071                     UART_Write_Text@i:	
   521                           ; 1 bytes @ 0x1
   522                           
   523                           
   524                           ; 2 bytes @ 0x1
   525  0071                     	ds	1
   526  0072                     ??_strcmp:	
   527  0072                     Lcd_Write_Char@temp:	
   528                           ; 1 bytes @ 0x2
   529                           
   530  0072                     UART_Read_Text@rec_data:	
   531                           ; 1 bytes @ 0x2
   532                           
   533  0072                     memset@n:	
   534                           ; 1 bytes @ 0x2
   535                           
   536                           
   537                           ; 2 bytes @ 0x2
   538  0072                     	ds	1
   539  0073                     Lcd_Cmd@a:	
   540  0073                     Lcd_Write_Char@y:	
   541                           ; 1 bytes @ 0x3
   542                           
   543  0073                     UART_Read_Text@buffer:	
   544                           ; 1 bytes @ 0x3
   545                           
   546  0073                     UART_Write_Text@text:	
   547                           ; 1 bytes @ 0x3
   548                           
   549                           
   550                           ; 1 bytes @ 0x3
   551  0073                     	ds	1
   552  0074                     ??_memset:	
   553  0074                     ??_Lcd_Clear:	
   554                           ; 1 bytes @ 0x4
   555                           
   556  0074                     ?_Lcd_Set_Cursor:	
   557                           ; 1 bytes @ 0x4
   558                           
   559  0074                     ??_Lcd_Init:	
   560                           ; 1 bytes @ 0x4
   561                           
   562  0074                     Lcd_Set_Cursor@b:	
   563                           ; 1 bytes @ 0x4
   564                           
   565  0074                     Lcd_Write_Char@a:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0074                     strcmp@r:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     UART_Read_Text@i:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     ___aldiv@dividend:	
   575                           ; 2 bytes @ 0x4
   576                           
   577                           
   578                           ; 4 bytes @ 0x4
   579  0074                     	ds	1
   580  0075                     ??_Lcd_Set_Cursor:	
   581  0075                     ?_Lcd_Write_String:	
   582                           ; 1 bytes @ 0x5
   583                           
   584  0075                     memset@p:	
   585                           ; 1 bytes @ 0x5
   586                           
   587  0075                     strcmp@s1:	
   588                           ; 1 bytes @ 0x5
   589                           
   590  0075                     Lcd_Write_String@a:	
   591                           ; 1 bytes @ 0x5
   592                           
   593                           
   594                           ; 2 bytes @ 0x5
   595  0075                     	ds	1
   596  0076                     memset@p1:	
   597                           
   598                           ; 1 bytes @ 0x6
   599  0076                     	ds	1
   600  0077                     ??_Lcd_Write_String:	
   601  0077                     Lcd_Set_Cursor@a:	
   602                           ; 1 bytes @ 0x7
   603                           
   604                           
   605                           ; 1 bytes @ 0x7
   606  0077                     	ds	1
   607  0078                     ??___aldiv:	
   608  0078                     Lcd_Set_Cursor@z:	
   609                           ; 1 bytes @ 0x8
   610                           
   611                           
   612                           ; 1 bytes @ 0x8
   613  0078                     	ds	1
   614  0079                     Lcd_Set_Cursor@y:	
   615  0079                     UART_Init@x:	
   616                           ; 1 bytes @ 0x9
   617                           
   618                           
   619                           ; 2 bytes @ 0x9
   620  0079                     	ds	1
   621  007A                     Lcd_Set_Cursor@temp:	
   622  007A                     Lcd_Write_String@i:	
   623                           ; 1 bytes @ 0xA
   624                           
   625                           
   626                           ; 2 bytes @ 0xA
   627  007A                     	ds	2
   628                           
   629                           	psect	cstackBANK0
   630  0020                     __pcstackBANK0:	
   631  0020                     ___aldiv@counter:	
   632                           
   633                           ; 1 bytes @ 0x0
   634  0020                     	ds	1
   635  0021                     ___aldiv@sign:	
   636                           
   637                           ; 1 bytes @ 0x1
   638  0021                     	ds	1
   639  0022                     ___aldiv@quotient:	
   640                           
   641                           ; 4 bytes @ 0x2
   642  0022                     	ds	4
   643  0026                     ?_UART_Init:	
   644  0026                     UART_Init@baudrate:	
   645                           ; 1 bytes @ 0x6
   646                           
   647                           
   648                           ; 4 bytes @ 0x6
   649  0026                     	ds	4
   650  002A                     ??_UART_Init:	
   651                           
   652                           ; 1 bytes @ 0xA
   653  002A                     	ds	12
   654  0036                     ??_main:	
   655                           
   656                           ; 1 bytes @ 0x16
   657  0036                     	ds	3
   658  0039                     main@device_status:	
   659                           
   660                           ; 1 bytes @ 0x19
   661  0039                     	ds	1
   662  003A                     main@esp_ok:	
   663                           
   664                           ; 1 bytes @ 0x1A
   665  003A                     	ds	1
   666  003B                     main@op_mode:	
   667                           
   668                           ; 1 bytes @ 0x1B
   669  003B                     	ds	1
   670  003C                     main@wifi_connect:	
   671                           
   672                           ; 1 bytes @ 0x1C
   673  003C                     	ds	1
   674                           
   675                           	psect	maintext
   676  0572                     __pmaintext:	
   677 ;;
   678 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   679 ;;
   680 ;; *************** function _main *****************
   681 ;; Defined at:
   682 ;;		line 48 in file "main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  wifi_connect    1   28[BANK0 ] unsigned char 
   687 ;;  op_mode         1   27[BANK0 ] unsigned char 
   688 ;;  esp_ok          1   26[BANK0 ] unsigned char 
   689 ;;  device_statu    1   25[BANK0 ] unsigned char 
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : B00/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   699 ;;      Params:         0       0       0       0       0
   700 ;;      Locals:         0       4       0       0       0
   701 ;;      Temps:          0       3       0       0       0
   702 ;;      Totals:         0       7       0       0       0
   703 ;;Total ram usage:        7 bytes
   704 ;; Hardware stack levels required when called:    3
   705 ;; This function calls:
   706 ;;		_Lcd_Clear
   707 ;;		_Lcd_Init
   708 ;;		_Lcd_Set_Cursor
   709 ;;		_Lcd_Write_String
   710 ;;		_UART_Data_Ready
   711 ;;		_UART_Init
   712 ;;		_UART_Read_Text
   713 ;;		_UART_Write
   714 ;;		_UART_Write_Text
   715 ;;		_memset
   716 ;;		_strcmp
   717 ;; This function is called by:
   718 ;;		Startup code after reset
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           
   723                           ;psect for function _main
   724  0572                     _main:	
   725                           
   726                           ;main.c: 50: unsigned char esp_ok = 0, op_mode = 0, wifi_connect = 0, device_status = 0;
   727                           
   728                           ;incstack = 0
   729                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   730  0572  1283               	bcf	3,5	;RP0=0, select bank0
   731  0573  1303               	bcf	3,6	;RP1=0, select bank0
   732  0574  01BA               	clrf	main@esp_ok
   733  0575  01BB               	clrf	main@op_mode
   734  0576  01BC               	clrf	main@wifi_connect
   735  0577  01B9               	clrf	main@device_status
   736                           
   737                           ;main.c: 51: TRISD = 0x00;
   738  0578  1683               	bsf	3,5	;RP0=1, select bank1
   739  0579  1303               	bcf	3,6	;RP1=0, select bank1
   740  057A  0188               	clrf	8	;volatile
   741                           
   742                           ;main.c: 52: RB7 = 0;
   743  057B  1283               	bcf	3,5	;RP0=0, select bank0
   744  057C  1303               	bcf	3,6	;RP1=0, select bank0
   745  057D  1386               	bcf	6,7	;volatile
   746                           
   747                           ;main.c: 54: Lcd_Init();
   748  057E  120A  118A  23A0  120A  118A  	fcall	_Lcd_Init
   749                           
   750                           ;main.c: 55: _delay((unsigned long)((100)*(22118400/4000.0)));
   751  0583  3003               	movlw	3
   752  0584  1283               	bcf	3,5	;RP0=0, select bank0
   753  0585  1303               	bcf	3,6	;RP1=0, select bank0
   754  0586  00B8               	movwf	??_main+2
   755  0587  30CF               	movlw	207
   756  0588  00B7               	movwf	??_main+1
   757  0589  301C               	movlw	28
   758  058A  00B6               	movwf	??_main
   759  058B                     u997:	
   760  058B  0BB6               	decfsz	??_main,f
   761  058C  2D8B               	goto	u997
   762  058D  0BB7               	decfsz	??_main+1,f
   763  058E  2D8B               	goto	u997
   764  058F  0BB8               	decfsz	??_main+2,f
   765  0590  2D8B               	goto	u997
   766  0591  0000               	nop
   767                           
   768                           ;main.c: 56: UART_Init(115200);
   769  0592  3000               	movlw	0
   770  0593  1283               	bcf	3,5	;RP0=0, select bank0
   771  0594  1303               	bcf	3,6	;RP1=0, select bank0
   772  0595  00A9               	movwf	UART_Init@baudrate+3
   773  0596  3001               	movlw	1
   774  0597  00A8               	movwf	UART_Init@baudrate+2
   775  0598  30C2               	movlw	194
   776  0599  00A7               	movwf	UART_Init@baudrate+1
   777  059A  3000               	movlw	0
   778  059B  00A6               	movwf	UART_Init@baudrate
   779  059C  120A  118A  2489  120A  118A  	fcall	_UART_Init
   780                           
   781                           ;main.c: 57: _delay((unsigned long)((100)*(22118400/4000.0)));
   782  05A1  3003               	movlw	3
   783  05A2  1283               	bcf	3,5	;RP0=0, select bank0
   784  05A3  1303               	bcf	3,6	;RP1=0, select bank0
   785  05A4  00B8               	movwf	??_main+2
   786  05A5  30CF               	movlw	207
   787  05A6  00B7               	movwf	??_main+1
   788  05A7  301C               	movlw	28
   789  05A8  00B6               	movwf	??_main
   790  05A9                     u1007:	
   791  05A9  0BB6               	decfsz	??_main,f
   792  05AA  2DA9               	goto	u1007
   793  05AB  0BB7               	decfsz	??_main+1,f
   794  05AC  2DA9               	goto	u1007
   795  05AD  0BB8               	decfsz	??_main+2,f
   796  05AE  2DA9               	goto	u1007
   797  05AF  0000               	nop
   798                           
   799                           ;main.c: 59: Lcd_Clear();
   800  05B0  120A  118A  2212  120A  118A  	fcall	_Lcd_Clear
   801                           
   802                           ;main.c: 60: Lcd_Set_Cursor(1,1);
   803  05B5  01F4               	clrf	Lcd_Set_Cursor@b
   804  05B6  0AF4               	incf	Lcd_Set_Cursor@b,f
   805  05B7  3001               	movlw	1
   806  05B8  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
   807                           
   808                           ;main.c: 61: Lcd_Write_String("DEVICE: MInc Dev");
   809  05BD  3058               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   810  05BE  00F5               	movwf	Lcd_Write_String@a
   811  05BF  3080               	movlw	128
   812  05C0  00F6               	movwf	Lcd_Write_String@a+1
   813  05C1  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
   814                           
   815                           ;main.c: 62: Lcd_Set_Cursor(2,1);
   816  05C6  01F4               	clrf	Lcd_Set_Cursor@b
   817  05C7  0AF4               	incf	Lcd_Set_Cursor@b,f
   818  05C8  3002               	movlw	2
   819  05C9  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
   820                           
   821                           ;main.c: 63: Lcd_Write_String("STATUS: Offline");
   822  05CE  3099               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   823  05CF  00F5               	movwf	Lcd_Write_String@a
   824  05D0  3080               	movlw	128
   825  05D1  00F6               	movwf	Lcd_Write_String@a+1
   826  05D2  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
   827                           
   828                           ;main.c: 64: _delay((unsigned long)((2500)*(22118400/4000.0)));
   829  05D7  3047               	movlw	71
   830  05D8  1283               	bcf	3,5	;RP0=0, select bank0
   831  05D9  1303               	bcf	3,6	;RP1=0, select bank0
   832  05DA  00B8               	movwf	??_main+2
   833  05DB  3022               	movlw	34
   834  05DC  00B7               	movwf	??_main+1
   835  05DD  300D               	movlw	13
   836  05DE  00B6               	movwf	??_main
   837  05DF                     u1017:	
   838  05DF  0BB6               	decfsz	??_main,f
   839  05E0  2DDF               	goto	u1017
   840  05E1  0BB7               	decfsz	??_main+1,f
   841  05E2  2DDF               	goto	u1017
   842  05E3  0BB8               	decfsz	??_main+2,f
   843  05E4  2DDF               	goto	u1017
   844  05E5                     l1184:	
   845                           ;main.c: 66: while(1)
   846                           
   847                           
   848                           ;main.c: 67: {
   849                           ;main.c: 68: _delay((unsigned long)((500)*(22118400/4000.0)));
   850  05E5  300F               	movlw	15
   851  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   852  05E7  1303               	bcf	3,6	;RP1=0, select bank0
   853  05E8  00B8               	movwf	??_main+2
   854  05E9  3007               	movlw	7
   855  05EA  00B7               	movwf	??_main+1
   856  05EB  3099               	movlw	153
   857  05EC  00B6               	movwf	??_main
   858  05ED                     u1027:	
   859  05ED  0BB6               	decfsz	??_main,f
   860  05EE  2DED               	goto	u1027
   861  05EF  0BB7               	decfsz	??_main+1,f
   862  05F0  2DED               	goto	u1027
   863  05F1  0BB8               	decfsz	??_main+2,f
   864  05F2  2DED               	goto	u1027
   865  05F3  2DF4               	nop2
   866  05F4                     l1220:	
   867                           ;main.c: 71: while(!esp_ok)
   868                           
   869  05F4  1283               	bcf	3,5	;RP0=0, select bank0
   870  05F5  1303               	bcf	3,6	;RP1=0, select bank0
   871  05F6  083A               	movf	main@esp_ok,w
   872  05F7  1D03               	btfss	3,2
   873  05F8  2F55               	goto	l1252
   874                           
   875                           ;main.c: 72: {
   876                           ;main.c: 73: Lcd_Clear();
   877  05F9  120A  118A  2212  120A  118A  	fcall	_Lcd_Clear
   878                           
   879                           ;main.c: 74: Lcd_Set_Cursor(1,1);
   880  05FE  01F4               	clrf	Lcd_Set_Cursor@b
   881  05FF  0AF4               	incf	Lcd_Set_Cursor@b,f
   882  0600  3001               	movlw	1
   883  0601  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
   884                           
   885                           ;main.c: 75: Lcd_Write_String("Send AT Command");
   886  0606  3089               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   887  0607  00F5               	movwf	Lcd_Write_String@a
   888  0608  3080               	movlw	128
   889  0609  00F6               	movwf	Lcd_Write_String@a+1
   890  060A  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
   891                           
   892                           ;main.c: 76: _delay((unsigned long)((100)*(22118400/4000.0)));
   893  060F  3003               	movlw	3
   894  0610  1283               	bcf	3,5	;RP0=0, select bank0
   895  0611  1303               	bcf	3,6	;RP1=0, select bank0
   896  0612  00B8               	movwf	??_main+2
   897  0613  30CF               	movlw	207
   898  0614  00B7               	movwf	??_main+1
   899  0615  301C               	movlw	28
   900  0616  00B6               	movwf	??_main
   901  0617                     u1037:	
   902  0617  0BB6               	decfsz	??_main,f
   903  0618  2E17               	goto	u1037
   904  0619  0BB7               	decfsz	??_main+1,f
   905  061A  2E17               	goto	u1037
   906  061B  0BB8               	decfsz	??_main+2,f
   907  061C  2E17               	goto	u1037
   908  061D  0000               	nop
   909                           
   910                           ;main.c: 77: UART_Write_Text("AT");
   911  061E  30E1               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   912  061F  120A  118A  226D  120A  118A  	fcall	_UART_Write_Text
   913                           
   914                           ;main.c: 78: UART_Write(13);
   915  0624  300D               	movlw	13
   916  0625  120A  118A  2208  120A  118A  	fcall	_UART_Write
   917  062A                     l1196:	
   918                           ;main.c: 80: while(!UART_Data_Ready());
   919                           
   920  062A  120A  118A  21FC  120A  118A  	fcall	_UART_Data_Ready
   921  062F  3A00               	xorlw	0
   922  0630  1903               	skipnz
   923  0631  2E2A               	goto	l1196
   924                           
   925                           ;main.c: 82: if(UART_Data_Ready())
   926  0632  120A  118A  21FC  120A  118A  	fcall	_UART_Data_Ready
   927  0637  3A00               	xorlw	0
   928  0638  1903               	skipnz
   929  0639  2DF4               	goto	l1220
   930                           
   931                           ;main.c: 83: {
   932                           ;main.c: 84: memset(ESP_Response, 0, sizeof(ESP_Response));
   933  063A  3000               	movlw	0
   934  063B  00F0               	movwf	memset@c
   935  063C  00F1               	movwf	memset@c+1
   936  063D  3008               	movlw	8
   937  063E  00F2               	movwf	memset@n
   938  063F  3000               	movlw	0
   939  0640  00F3               	movwf	memset@n+1
   940  0641  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
   941  0642  120A  118A  2251  120A  118A  	fcall	_memset
   942                           
   943                           ;main.c: 85: UART_Read_Text(ESP_Response);
   944  0647  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
   945  0648  120A  118A  228F  120A  118A  	fcall	_UART_Read_Text
   946                           
   947                           ;main.c: 86: _delay((unsigned long)((1000)*(22118400/4000.0)));
   948  064D  301D               	movlw	29
   949  064E  1283               	bcf	3,5	;RP0=0, select bank0
   950  064F  1303               	bcf	3,6	;RP1=0, select bank0
   951  0650  00B8               	movwf	??_main+2
   952  0651  300E               	movlw	14
   953  0652  00B7               	movwf	??_main+1
   954  0653  3036               	movlw	54
   955  0654  00B6               	movwf	??_main
   956  0655                     u1047:	
   957  0655  0BB6               	decfsz	??_main,f
   958  0656  2E55               	goto	u1047
   959  0657  0BB7               	decfsz	??_main+1,f
   960  0658  2E55               	goto	u1047
   961  0659  0BB8               	decfsz	??_main+2,f
   962  065A  2E55               	goto	u1047
   963  065B  0000               	nop
   964                           
   965                           ;main.c: 87: Lcd_Set_Cursor(2,1);
   966  065C  01F4               	clrf	Lcd_Set_Cursor@b
   967  065D  0AF4               	incf	Lcd_Set_Cursor@b,f
   968  065E  3002               	movlw	2
   969  065F  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
   970                           
   971                           ;main.c: 88: if(strcmp(ESP_Response, "OK") == 0)
   972  0664  3076               	movlw	(low (((STR_6+13)-__stringbase)| (0+32768)))& (0+255)
   973  0665  1283               	bcf	3,5	;RP0=0, select bank0
   974  0666  1303               	bcf	3,6	;RP1=0, select bank0
   975  0667  00B6               	movwf	??_main
   976  0668  0836               	movf	??_main,w
   977  0669  00F0               	movwf	strcmp@s2
   978  066A  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
   979  066B  120A  118A  22B6  120A  118A  	fcall	_strcmp
   980  0670  0870               	movf	?_strcmp,w
   981  0671  0471               	iorwf	?_strcmp+1,w
   982  0672  1D03               	btfss	3,2
   983  0673  2E82               	goto	l1214
   984                           
   985                           ;main.c: 89: {
   986                           ;main.c: 90: esp_ok = 1;
   987  0674  1283               	bcf	3,5	;RP0=0, select bank0
   988  0675  1303               	bcf	3,6	;RP1=0, select bank0
   989  0676  01BA               	clrf	main@esp_ok
   990  0677  0ABA               	incf	main@esp_ok,f
   991                           
   992                           ;main.c: 91: Lcd_Write_String("ESP Response OK");
   993  0678  3069               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   994  0679  00F5               	movwf	Lcd_Write_String@a
   995  067A  3080               	movlw	128
   996  067B  00F6               	movwf	Lcd_Write_String@a+1
   997  067C  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
   998                           
   999                           ;main.c: 93: }
  1000  0681  2EB2               	goto	l128
  1001  0682                     l1214:	
  1002                           
  1003                           ;main.c: 94: else
  1004                           ;main.c: 95: {
  1005                           ;main.c: 96: Lcd_Write_String("ESP Response Bad");
  1006  0682  3036               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1007  0683  00F5               	movwf	Lcd_Write_String@a
  1008  0684  3080               	movlw	128
  1009  0685  00F6               	movwf	Lcd_Write_String@a+1
  1010  0686  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
  1011                           
  1012                           ;main.c: 97: _delay((unsigned long)((1000)*(22118400/4000.0)));
  1013  068B  301D               	movlw	29
  1014  068C  1283               	bcf	3,5	;RP0=0, select bank0
  1015  068D  1303               	bcf	3,6	;RP1=0, select bank0
  1016  068E  00B8               	movwf	??_main+2
  1017  068F  300E               	movlw	14
  1018  0690  00B7               	movwf	??_main+1
  1019  0691  3036               	movlw	54
  1020  0692  00B6               	movwf	??_main
  1021  0693                     u1057:	
  1022  0693  0BB6               	decfsz	??_main,f
  1023  0694  2E93               	goto	u1057
  1024  0695  0BB7               	decfsz	??_main+1,f
  1025  0696  2E93               	goto	u1057
  1026  0697  0BB8               	decfsz	??_main+2,f
  1027  0698  2E93               	goto	u1057
  1028  0699  0000               	nop
  1029                           
  1030                           ;main.c: 98: Lcd_Write_String(ESP_Response);
  1031  069A  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1032  069B  00F5               	movwf	Lcd_Write_String@a
  1033  069C  3000               	movlw	0
  1034  069D  00F6               	movwf	Lcd_Write_String@a+1
  1035  069E  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
  1036                           
  1037                           ;main.c: 99: _delay((unsigned long)((500)*(22118400/4000.0)));
  1038  06A3  300F               	movlw	15
  1039  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  1040  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  1041  06A6  00B8               	movwf	??_main+2
  1042  06A7  3007               	movlw	7
  1043  06A8  00B7               	movwf	??_main+1
  1044  06A9  3099               	movlw	153
  1045  06AA  00B6               	movwf	??_main
  1046  06AB                     u1067:	
  1047  06AB  0BB6               	decfsz	??_main,f
  1048  06AC  2EAB               	goto	u1067
  1049  06AD  0BB7               	decfsz	??_main+1,f
  1050  06AE  2EAB               	goto	u1067
  1051  06AF  0BB8               	decfsz	??_main+2,f
  1052  06B0  2EAB               	goto	u1067
  1053  06B1  2EB2               	nop2
  1054  06B2                     l128:	
  1055                           
  1056                           ;main.c: 101: }
  1057                           ;main.c: 102: _delay((unsigned long)((500)*(22118400/4000.0)));
  1058  06B2  300F               	movlw	15
  1059  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1060  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1061  06B5  00B8               	movwf	??_main+2
  1062  06B6  3007               	movlw	7
  1063  06B7  00B7               	movwf	??_main+1
  1064  06B8  3099               	movlw	153
  1065  06B9  00B6               	movwf	??_main
  1066  06BA                     u1077:	
  1067  06BA  0BB6               	decfsz	??_main,f
  1068  06BB  2EBA               	goto	u1077
  1069  06BC  0BB7               	decfsz	??_main+1,f
  1070  06BD  2EBA               	goto	u1077
  1071  06BE  0BB8               	decfsz	??_main+2,f
  1072  06BF  2EBA               	goto	u1077
  1073  06C0  2EC1               	nop2
  1074  06C1  2DF4               	goto	l1220
  1075  06C2                     l1222:	
  1076                           ;main.c: 103: }
  1077                           ;main.c: 104: }
  1078                           ;main.c: 107: while(!op_mode)
  1079                           
  1080                           
  1081                           ;main.c: 108: {
  1082                           ;main.c: 109: Lcd_Clear();
  1083  06C2  120A  118A  2212  120A  118A  	fcall	_Lcd_Clear
  1084                           
  1085                           ;main.c: 110: Lcd_Set_Cursor(1,1);
  1086  06C7  01F4               	clrf	Lcd_Set_Cursor@b
  1087  06C8  0AF4               	incf	Lcd_Set_Cursor@b,f
  1088  06C9  3001               	movlw	1
  1089  06CA  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
  1090                           
  1091                           ;main.c: 111: Lcd_Write_String("Set Op. Mode");
  1092  06CF  30C8               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1093  06D0  00F5               	movwf	Lcd_Write_String@a
  1094  06D1  3080               	movlw	128
  1095  06D2  00F6               	movwf	Lcd_Write_String@a+1
  1096  06D3  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
  1097                           
  1098                           ;main.c: 112: _delay((unsigned long)((100)*(22118400/4000.0)));
  1099  06D8  3003               	movlw	3
  1100  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  1101  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  1102  06DB  00B8               	movwf	??_main+2
  1103  06DC  30CF               	movlw	207
  1104  06DD  00B7               	movwf	??_main+1
  1105  06DE  301C               	movlw	28
  1106  06DF  00B6               	movwf	??_main
  1107  06E0                     u1087:	
  1108  06E0  0BB6               	decfsz	??_main,f
  1109  06E1  2EE0               	goto	u1087
  1110  06E2  0BB7               	decfsz	??_main+1,f
  1111  06E3  2EE0               	goto	u1087
  1112  06E4  0BB8               	decfsz	??_main+2,f
  1113  06E5  2EE0               	goto	u1087
  1114  06E6  0000               	nop
  1115                           
  1116                           ;main.c: 113: UART_Write_Text("AT+CWMODE=3");
  1117  06E7  30D5               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1118  06E8  120A  118A  226D  120A  118A  	fcall	_UART_Write_Text
  1119  06ED                     l1230:	
  1120                           ;main.c: 116: while(!UART_Data_Ready());
  1121                           
  1122  06ED  120A  118A  21FC  120A  118A  	fcall	_UART_Data_Ready
  1123  06F2  3A00               	xorlw	0
  1124  06F3  1903               	skipnz
  1125  06F4  2EED               	goto	l1230
  1126                           
  1127                           ;main.c: 118: if(UART_Data_Ready())
  1128  06F5  120A  118A  21FC  120A  118A  	fcall	_UART_Data_Ready
  1129  06FA  3A00               	xorlw	0
  1130  06FB  1903               	skipnz
  1131  06FC  2F55               	goto	l1252
  1132                           
  1133                           ;main.c: 119: {
  1134                           ;main.c: 120: memset(ESP_Response, 0, sizeof(ESP_Response));
  1135  06FD  3000               	movlw	0
  1136  06FE  00F0               	movwf	memset@c
  1137  06FF  00F1               	movwf	memset@c+1
  1138  0700  3008               	movlw	8
  1139  0701  00F2               	movwf	memset@n
  1140  0702  3000               	movlw	0
  1141  0703  00F3               	movwf	memset@n+1
  1142  0704  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1143  0705  120A  118A  2251  120A  118A  	fcall	_memset
  1144                           
  1145                           ;main.c: 121: UART_Read_Text(ESP_Response);
  1146  070A  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1147  070B  120A  118A  228F  120A  118A  	fcall	_UART_Read_Text
  1148                           
  1149                           ;main.c: 122: _delay((unsigned long)((1000)*(22118400/4000.0)));
  1150  0710  301D               	movlw	29
  1151  0711  1283               	bcf	3,5	;RP0=0, select bank0
  1152  0712  1303               	bcf	3,6	;RP1=0, select bank0
  1153  0713  00B8               	movwf	??_main+2
  1154  0714  300E               	movlw	14
  1155  0715  00B7               	movwf	??_main+1
  1156  0716  3036               	movlw	54
  1157  0717  00B6               	movwf	??_main
  1158  0718                     u1097:	
  1159  0718  0BB6               	decfsz	??_main,f
  1160  0719  2F18               	goto	u1097
  1161  071A  0BB7               	decfsz	??_main+1,f
  1162  071B  2F18               	goto	u1097
  1163  071C  0BB8               	decfsz	??_main+2,f
  1164  071D  2F18               	goto	u1097
  1165  071E  0000               	nop
  1166                           
  1167                           ;main.c: 123: Lcd_Set_Cursor(2,1);
  1168  071F  01F4               	clrf	Lcd_Set_Cursor@b
  1169  0720  0AF4               	incf	Lcd_Set_Cursor@b,f
  1170  0721  3002               	movlw	2
  1171  0722  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
  1172                           
  1173                           ;main.c: 124: if(strcmp(ESP_Response, "OK") == 0)
  1174  0727  3076               	movlw	(low (((STR_6+13)-__stringbase)| (0+32768)))& (0+255)
  1175  0728  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0729  1303               	bcf	3,6	;RP1=0, select bank0
  1177  072A  00B6               	movwf	??_main
  1178  072B  0836               	movf	??_main,w
  1179  072C  00F0               	movwf	strcmp@s2
  1180  072D  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1181  072E  120A  118A  22B6  120A  118A  	fcall	_strcmp
  1182  0733  0870               	movf	?_strcmp,w
  1183  0734  0471               	iorwf	?_strcmp+1,w
  1184  0735  1D03               	btfss	3,2
  1185  0736  2F3D               	goto	l1248
  1186                           
  1187                           ;main.c: 125: {
  1188                           ;main.c: 126: op_mode = 1;
  1189  0737  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0738  1303               	bcf	3,6	;RP1=0, select bank0
  1191  0739  01BB               	clrf	main@op_mode
  1192  073A  0ABB               	incf	main@op_mode,f
  1193                           
  1194                           ;main.c: 127: Lcd_Write_String("Op Mode Set OK");
  1195  073B  30B9               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1196  073C  2F3E               	goto	L1
  1197  073D                     l1248:	
  1198                           ;main.c: 129: }
  1199                           
  1200                           
  1201                           ;main.c: 130: else
  1202                           ;main.c: 131: {
  1203                           ;main.c: 132: Lcd_Write_String("Op Mode Set Fail");
  1204  073D  3047               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1205  073E                     L1:	
  1206  073E  00F5               	movwf	Lcd_Write_String@a
  1207  073F  3080               	movlw	128
  1208  0740  00F6               	movwf	Lcd_Write_String@a+1
  1209  0741  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
  1210                           
  1211                           ;main.c: 134: }
  1212                           ;main.c: 135: _delay((unsigned long)((500)*(22118400/4000.0)));
  1213  0746  300F               	movlw	15
  1214  0747  1283               	bcf	3,5	;RP0=0, select bank0
  1215  0748  1303               	bcf	3,6	;RP1=0, select bank0
  1216  0749  00B8               	movwf	??_main+2
  1217  074A  3007               	movlw	7
  1218  074B  00B7               	movwf	??_main+1
  1219  074C  3099               	movlw	153
  1220  074D  00B6               	movwf	??_main
  1221  074E                     u1107:	
  1222  074E  0BB6               	decfsz	??_main,f
  1223  074F  2F4E               	goto	u1107
  1224  0750  0BB7               	decfsz	??_main+1,f
  1225  0751  2F4E               	goto	u1107
  1226  0752  0BB8               	decfsz	??_main+2,f
  1227  0753  2F4E               	goto	u1107
  1228  0754  2F55               	nop2
  1229  0755                     l1252:	
  1230  0755  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0756  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0757  083B               	movf	main@op_mode,w
  1233  0758  1D03               	btfss	3,2
  1234  0759  2FEE               	goto	l1284
  1235  075A  2EC2               	goto	l1222
  1236  075B                     l1254:	
  1237                           ;main.c: 136: }
  1238                           ;main.c: 137: }
  1239                           ;main.c: 140: while(!wifi_connect)
  1240                           
  1241                           
  1242                           ;main.c: 141: {
  1243                           ;main.c: 142: Lcd_Clear();
  1244  075B  120A  118A  2212  120A  118A  	fcall	_Lcd_Clear
  1245                           
  1246                           ;main.c: 143: Lcd_Set_Cursor(1,1);
  1247  0760  01F4               	clrf	Lcd_Set_Cursor@b
  1248  0761  0AF4               	incf	Lcd_Set_Cursor@b,f
  1249  0762  3001               	movlw	1
  1250  0763  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
  1251                           
  1252                           ;main.c: 144: Lcd_Write_String("WiFi Connection");
  1253  0768  30A9               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1254  0769  00F5               	movwf	Lcd_Write_String@a
  1255  076A  3080               	movlw	128
  1256  076B  00F6               	movwf	Lcd_Write_String@a+1
  1257  076C  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
  1258                           
  1259                           ;main.c: 145: _delay((unsigned long)((100)*(22118400/4000.0)));
  1260  0771  3003               	movlw	3
  1261  0772  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0773  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0774  00B8               	movwf	??_main+2
  1264  0775  30CF               	movlw	207
  1265  0776  00B7               	movwf	??_main+1
  1266  0777  301C               	movlw	28
  1267  0778  00B6               	movwf	??_main
  1268  0779                     u1117:	
  1269  0779  0BB6               	decfsz	??_main,f
  1270  077A  2F79               	goto	u1117
  1271  077B  0BB7               	decfsz	??_main+1,f
  1272  077C  2F79               	goto	u1117
  1273  077D  0BB8               	decfsz	??_main+2,f
  1274  077E  2F79               	goto	u1117
  1275  077F  0000               	nop
  1276                           
  1277                           ;main.c: 146: UART_Write_Text("AT+CWJAP='MInc Mobile','oluwaseun'");
  1278  0780  3001               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1279  0781  120A  118A  226D  120A  118A  	fcall	_UART_Write_Text
  1280  0786                     l1262:	
  1281                           ;main.c: 149: while(!UART_Data_Ready());
  1282                           
  1283  0786  120A  118A  21FC  120A  118A  	fcall	_UART_Data_Ready
  1284  078B  3A00               	xorlw	0
  1285  078C  1903               	skipnz
  1286  078D  2F86               	goto	l1262
  1287                           
  1288                           ;main.c: 151: if(UART_Data_Ready())
  1289  078E  120A  118A  21FC  120A  118A  	fcall	_UART_Data_Ready
  1290  0793  3A00               	xorlw	0
  1291  0794  1903               	skipnz
  1292  0795  2FEE               	goto	l1284
  1293                           
  1294                           ;main.c: 152: {
  1295                           ;main.c: 153: memset(ESP_Response, 0, sizeof(ESP_Response));
  1296  0796  3000               	movlw	0
  1297  0797  00F0               	movwf	memset@c
  1298  0798  00F1               	movwf	memset@c+1
  1299  0799  3008               	movlw	8
  1300  079A  00F2               	movwf	memset@n
  1301  079B  3000               	movlw	0
  1302  079C  00F3               	movwf	memset@n+1
  1303  079D  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1304  079E  120A  118A  2251  120A  118A  	fcall	_memset
  1305                           
  1306                           ;main.c: 154: UART_Read_Text(ESP_Response);
  1307  07A3  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1308  07A4  120A  118A  228F  120A  118A  	fcall	_UART_Read_Text
  1309                           
  1310                           ;main.c: 155: _delay((unsigned long)((1000)*(22118400/4000.0)));
  1311  07A9  301D               	movlw	29
  1312  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  1313  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  1314  07AC  00B8               	movwf	??_main+2
  1315  07AD  300E               	movlw	14
  1316  07AE  00B7               	movwf	??_main+1
  1317  07AF  3036               	movlw	54
  1318  07B0  00B6               	movwf	??_main
  1319  07B1                     u1127:	
  1320  07B1  0BB6               	decfsz	??_main,f
  1321  07B2  2FB1               	goto	u1127
  1322  07B3  0BB7               	decfsz	??_main+1,f
  1323  07B4  2FB1               	goto	u1127
  1324  07B5  0BB8               	decfsz	??_main+2,f
  1325  07B6  2FB1               	goto	u1127
  1326  07B7  0000               	nop
  1327                           
  1328                           ;main.c: 156: Lcd_Set_Cursor(2,1);
  1329  07B8  01F4               	clrf	Lcd_Set_Cursor@b
  1330  07B9  0AF4               	incf	Lcd_Set_Cursor@b,f
  1331  07BA  3002               	movlw	2
  1332  07BB  120A  118A  2356  120A  118A  	fcall	_Lcd_Set_Cursor
  1333                           
  1334                           ;main.c: 157: if(strcmp(ESP_Response, "OK") == 0)
  1335  07C0  3076               	movlw	(low (((STR_6+13)-__stringbase)| (0+32768)))& (0+255)
  1336  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1337  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1338  07C3  00B6               	movwf	??_main
  1339  07C4  0836               	movf	??_main,w
  1340  07C5  00F0               	movwf	strcmp@s2
  1341  07C6  303D               	movlw	(low (_ESP_Response| 0))& (0+255)
  1342  07C7  120A  118A  22B6  120A  118A  	fcall	_strcmp
  1343  07CC  0870               	movf	?_strcmp,w
  1344  07CD  0471               	iorwf	?_strcmp+1,w
  1345  07CE  1D03               	btfss	3,2
  1346  07CF  2FD6               	goto	l1280
  1347                           
  1348                           ;main.c: 158: {
  1349                           ;main.c: 159: wifi_connect = 1;
  1350  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1351  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  1352  07D2  01BC               	clrf	main@wifi_connect
  1353  07D3  0ABC               	incf	main@wifi_connect,f
  1354                           
  1355                           ;main.c: 160: Lcd_Write_String("WiFi Connect OK");
  1356  07D4  3079               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1357  07D5  2FD7               	goto	L2
  1358  07D6                     l1280:	
  1359                           ;main.c: 162: }
  1360                           
  1361                           
  1362                           ;main.c: 163: else
  1363                           ;main.c: 164: {
  1364                           ;main.c: 165: Lcd_Write_String("WiFi Connect Fail");
  1365  07D6  3024               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1366  07D7                     L2:	
  1367  07D7  00F5               	movwf	Lcd_Write_String@a
  1368  07D8  3080               	movlw	128
  1369  07D9  00F6               	movwf	Lcd_Write_String@a+1
  1370  07DA  120A  118A  2319  120A  118A  	fcall	_Lcd_Write_String
  1371                           
  1372                           ;main.c: 167: }
  1373                           ;main.c: 168: _delay((unsigned long)((500)*(22118400/4000.0)));
  1374  07DF  300F               	movlw	15
  1375  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  1376  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  1377  07E2  00B8               	movwf	??_main+2
  1378  07E3  3007               	movlw	7
  1379  07E4  00B7               	movwf	??_main+1
  1380  07E5  3099               	movlw	153
  1381  07E6  00B6               	movwf	??_main
  1382  07E7                     u1137:	
  1383  07E7  0BB6               	decfsz	??_main,f
  1384  07E8  2FE7               	goto	u1137
  1385  07E9  0BB7               	decfsz	??_main+1,f
  1386  07EA  2FE7               	goto	u1137
  1387  07EB  0BB8               	decfsz	??_main+2,f
  1388  07EC  2FE7               	goto	u1137
  1389  07ED  2FEE               	nop2
  1390  07EE                     l1284:	
  1391  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  1392  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  1393  07F0  083C               	movf	main@wifi_connect,w
  1394  07F1  1D03               	btfss	3,2
  1395  07F2  2DE5               	goto	l1184
  1396  07F3  2F5B               	goto	l1254
  1397  07F4                     __end_of_main:	
  1398                           
  1399                           	psect	text1
  1400  02B6                     __ptext1:	
  1401 ;; *************** function _strcmp *****************
  1402 ;; Defined at:
  1403 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\strcmp.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  s1              1    wreg     PTR const unsigned char 
  1406 ;;		 -> ESP_Response(8), 
  1407 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1408 ;;		 -> STR_15(3), STR_10(3), STR_5(3), 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  s1              1    5[COMMON] PTR const unsigned char 
  1411 ;;		 -> ESP_Response(8), 
  1412 ;;  r               1    4[COMMON] char 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  2    0[COMMON] int 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1422 ;;      Params:         2       0       0       0       0
  1423 ;;      Locals:         2       0       0       0       0
  1424 ;;      Temps:          2       0       0       0       0
  1425 ;;      Totals:         6       0       0       0       0
  1426 ;;Total ram usage:        6 bytes
  1427 ;; Hardware stack levels used:    2
  1428 ;; This function calls:
  1429 ;;		Nothing
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           
  1436                           ;psect for function _strcmp
  1437  02B6                     _strcmp:	
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1441                           ;strcmp@s1 stored from wreg
  1442  02B6  00F5               	movwf	strcmp@s1
  1443  02B7  2AC0               	goto	l1152
  1444  02B8                     l1148:	
  1445  02B8  3001               	movlw	1
  1446  02B9  00F2               	movwf	??_strcmp
  1447  02BA  0872               	movf	??_strcmp,w
  1448  02BB  07F5               	addwf	strcmp@s1,f
  1449  02BC  3001               	movlw	1
  1450  02BD  00F2               	movwf	??_strcmp
  1451  02BE  0872               	movf	??_strcmp,w
  1452  02BF  07F0               	addwf	strcmp@s2,f
  1453  02C0                     l1152:	
  1454  02C0  0875               	movf	strcmp@s1,w
  1455  02C1  0084               	movwf	4
  1456  02C2  1383               	bcf	3,7	;select IRP bank0
  1457  02C3  0800               	movf	0,w
  1458  02C4  00F2               	movwf	??_strcmp
  1459  02C5  0870               	movf	strcmp@s2,w
  1460  02C6  0084               	movwf	4
  1461  02C7  120A  118A  200D  120A  118A  	fcall	stringdir
  1462  02CC  3AFF               	xorlw	255
  1463  02CD  3E01               	addlw	1
  1464  02CE  0772               	addwf	??_strcmp,w
  1465  02CF  00F3               	movwf	??_strcmp+1
  1466  02D0  0873               	movf	??_strcmp+1,w
  1467  02D1  00F4               	movwf	strcmp@r
  1468  02D2  0874               	movf	strcmp@r,w
  1469  02D3  1D03               	btfss	3,2
  1470  02D4  2ADA               	goto	l1156
  1471  02D5  0875               	movf	strcmp@s1,w
  1472  02D6  0084               	movwf	4
  1473  02D7  0800               	movf	0,w
  1474  02D8  1D03               	btfss	3,2
  1475  02D9  2AB8               	goto	l1148
  1476  02DA                     l1156:	
  1477  02DA  0874               	movf	strcmp@r,w
  1478  02DB  00F0               	movwf	?_strcmp
  1479  02DC  01F1               	clrf	?_strcmp+1
  1480  02DD  1BF0               	btfsc	?_strcmp,7
  1481  02DE  03F1               	decf	?_strcmp+1,f
  1482  02DF  0008               	return
  1483  02E0                     __end_of_strcmp:	
  1484                           
  1485                           	psect	text2
  1486  0251                     __ptext2:	
  1487 ;; *************** function _memset *****************
  1488 ;; Defined at:
  1489 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\memset.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  p1              1    wreg     PTR void 
  1492 ;;		 -> ESP_Response(8), 
  1493 ;;  c               2    0[COMMON] int 
  1494 ;;  n               2    2[COMMON] unsigned int 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  p1              1    6[COMMON] PTR void 
  1497 ;;		 -> ESP_Response(8), 
  1498 ;;  p               1    5[COMMON] PTR unsigned char 
  1499 ;;		 -> ESP_Response(8), 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      PTR void 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1509 ;;      Params:         4       0       0       0       0
  1510 ;;      Locals:         2       0       0       0       0
  1511 ;;      Temps:          1       0       0       0       0
  1512 ;;      Totals:         7       0       0       0       0
  1513 ;;Total ram usage:        7 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           
  1523                           ;psect for function _memset
  1524  0251                     _memset:	
  1525                           
  1526                           ;incstack = 0
  1527                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  1528                           ;memset@p1 stored from wreg
  1529  0251  00F6               	movwf	memset@p1
  1530  0252  0876               	movf	memset@p1,w
  1531  0253  00F4               	movwf	??_memset
  1532  0254  0874               	movf	??_memset,w
  1533  0255  00F5               	movwf	memset@p
  1534  0256                     l1144:	
  1535  0256  3001               	movlw	1
  1536  0257  02F2               	subwf	memset@n,f
  1537  0258  3000               	movlw	0
  1538  0259  1C03               	skipc
  1539  025A  03F3               	decf	memset@n+1,f
  1540  025B  02F3               	subwf	memset@n+1,f
  1541  025C  0A72               	incf	memset@n,w
  1542  025D  1903               	btfsc	3,2
  1543  025E  0A73               	incf	memset@n+1,w
  1544  025F  1903               	btfsc	3,2
  1545  0260  0008               	return
  1546  0261  0870               	movf	memset@c,w
  1547  0262  00F4               	movwf	??_memset
  1548  0263  0875               	movf	memset@p,w
  1549  0264  0084               	movwf	4
  1550  0265  0874               	movf	??_memset,w
  1551  0266  1383               	bcf	3,7	;select IRP bank0
  1552  0267  0080               	movwf	0
  1553  0268  3001               	movlw	1
  1554  0269  00F4               	movwf	??_memset
  1555  026A  0874               	movf	??_memset,w
  1556  026B  07F5               	addwf	memset@p,f
  1557  026C  2A56               	goto	l1144
  1558  026D                     __end_of_memset:	
  1559                           ;	Return value of _memset is never used
  1560                           
  1561                           
  1562                           	psect	text3
  1563  026D                     __ptext3:	
  1564 ;; *************** function _UART_Write_Text *****************
  1565 ;; Defined at:
  1566 ;;		line 65 in file "UniversalAsyncReceiveTransmit.h"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;  text            1    wreg     PTR const unsigned char 
  1569 ;;		 -> STR_14(35), STR_9(12), STR_4(3), 
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  text            1    3[COMMON] PTR const unsigned char 
  1572 ;;		 -> STR_14(35), STR_9(12), STR_4(3), 
  1573 ;;  i               2    1[COMMON] int 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1583 ;;      Params:         0       0       0       0       0
  1584 ;;      Locals:         3       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0
  1586 ;;      Totals:         3       0       0       0       0
  1587 ;;Total ram usage:        3 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    1
  1590 ;; This function calls:
  1591 ;;		_UART_Write
  1592 ;; This function is called by:
  1593 ;;		_main
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           
  1598                           ;psect for function _UART_Write_Text
  1599  026D                     _UART_Write_Text:	
  1600                           
  1601                           ;incstack = 0
  1602                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1603                           ;UART_Write_Text@text stored from wreg
  1604  026D  00F3               	movwf	UART_Write_Text@text
  1605                           
  1606                           ;UniversalAsyncReceiveTransmit.h: 67: int i;
  1607                           ;UniversalAsyncReceiveTransmit.h: 68: for(i = 0; text[i] != '\0'; i++)
  1608  026E  01F1               	clrf	UART_Write_Text@i
  1609  026F  01F2               	clrf	UART_Write_Text@i+1
  1610  0270                     l1136:	
  1611  0270  0871               	movf	UART_Write_Text@i,w
  1612  0271  0773               	addwf	UART_Write_Text@text,w
  1613  0272  0084               	movwf	4
  1614  0273  120A  118A  200D  120A  118A  	fcall	stringdir
  1615  0278  3A00               	xorlw	0
  1616  0279  1903               	btfsc	3,2
  1617  027A  0008               	return
  1618                           
  1619                           ;UniversalAsyncReceiveTransmit.h: 69: {
  1620                           ;UniversalAsyncReceiveTransmit.h: 70: UART_Write(text[i]);
  1621  027B  0871               	movf	UART_Write_Text@i,w
  1622  027C  0773               	addwf	UART_Write_Text@text,w
  1623  027D  0084               	movwf	4
  1624  027E  120A  118A  200D  120A  118A  	fcall	stringdir
  1625  0283  120A  118A  2208  120A  118A  	fcall	_UART_Write
  1626  0288  3001               	movlw	1
  1627  0289  07F1               	addwf	UART_Write_Text@i,f
  1628  028A  1803               	skipnc
  1629  028B  0AF2               	incf	UART_Write_Text@i+1,f
  1630  028C  3000               	movlw	0
  1631  028D  07F2               	addwf	UART_Write_Text@i+1,f
  1632  028E  2A70               	goto	l1136
  1633  028F                     __end_of_UART_Write_Text:	
  1634                           
  1635                           	psect	text4
  1636  0208                     __ptext4:	
  1637 ;; *************** function _UART_Write *****************
  1638 ;; Defined at:
  1639 ;;		line 59 in file "UniversalAsyncReceiveTransmit.h"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  data            1    wreg     unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  data            1    0[COMMON] unsigned char 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1653 ;;      Params:         0       0       0       0       0
  1654 ;;      Locals:         1       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0
  1656 ;;      Totals:         1       0       0       0       0
  1657 ;;Total ram usage:        1 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_UART_Write_Text
  1663 ;;		_main
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           
  1668                           ;psect for function _UART_Write
  1669  0208                     _UART_Write:	
  1670                           
  1671                           ;incstack = 0
  1672                           ; Regs used in _UART_Write: [wreg]
  1673                           ;UART_Write@data stored from wreg
  1674  0208  00F0               	movwf	UART_Write@data
  1675  0209                     l106:	
  1676                           ;UniversalAsyncReceiveTransmit.h: 61: while(!TRMT);
  1677                           
  1678  0209  1683               	bsf	3,5	;RP0=1, select bank1
  1679  020A  1303               	bcf	3,6	;RP1=0, select bank1
  1680  020B  1C98               	btfss	24,1	;volatile
  1681  020C  2A09               	goto	l106
  1682                           
  1683                           ;UniversalAsyncReceiveTransmit.h: 62: TXREG = data;
  1684  020D  0870               	movf	UART_Write@data,w
  1685  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1686  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0210  0099               	movwf	25	;volatile
  1688  0211  0008               	return
  1689  0212                     __end_of_UART_Write:	
  1690                           
  1691                           	psect	text5
  1692  028F                     __ptext5:	
  1693 ;; *************** function _UART_Read_Text *****************
  1694 ;; Defined at:
  1695 ;;		line 45 in file "UniversalAsyncReceiveTransmit.h"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  buffer          1    wreg     PTR unsigned char 
  1698 ;;		 -> ESP_Response(8), 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  buffer          1    3[COMMON] PTR unsigned char 
  1701 ;;		 -> ESP_Response(8), 
  1702 ;;  i               2    4[COMMON] int 
  1703 ;;  rec_data        1    2[COMMON] unsigned char 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  1    wreg      void 
  1706 ;; Registers used:
  1707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1713 ;;      Params:         0       0       0       0       0
  1714 ;;      Locals:         4       0       0       0       0
  1715 ;;      Temps:          2       0       0       0       0
  1716 ;;      Totals:         6       0       0       0       0
  1717 ;;Total ram usage:        6 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    1
  1720 ;; This function calls:
  1721 ;;		_UART_Read
  1722 ;; This function is called by:
  1723 ;;		_main
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           
  1728                           ;psect for function _UART_Read_Text
  1729  028F                     _UART_Read_Text:	
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in _UART_Read_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1733                           ;UART_Read_Text@buffer stored from wreg
  1734  028F  00F3               	movwf	UART_Read_Text@buffer
  1735                           
  1736                           ;UniversalAsyncReceiveTransmit.h: 47: unsigned char rec_data;
  1737                           ;UniversalAsyncReceiveTransmit.h: 50: int i = 0;
  1738  0290  01F4               	clrf	UART_Read_Text@i
  1739  0291  01F5               	clrf	UART_Read_Text@i+1
  1740  0292                     l1122:	
  1741                           ;UniversalAsyncReceiveTransmit.h: 51: do
  1742                           
  1743                           
  1744                           ;UniversalAsyncReceiveTransmit.h: 52: {
  1745                           ;UniversalAsyncReceiveTransmit.h: 53: rec_data = UART_Read();
  1746  0292  120A  118A  2202  120A  118A  	fcall	_UART_Read
  1747  0297  00F0               	movwf	??_UART_Read_Text
  1748  0298  0870               	movf	??_UART_Read_Text,w
  1749  0299  00F2               	movwf	UART_Read_Text@rec_data
  1750                           
  1751                           ;UniversalAsyncReceiveTransmit.h: 54: buffer[i] = rec_data;
  1752  029A  0872               	movf	UART_Read_Text@rec_data,w
  1753  029B  00F0               	movwf	??_UART_Read_Text
  1754  029C  0874               	movf	UART_Read_Text@i,w
  1755  029D  0773               	addwf	UART_Read_Text@buffer,w
  1756  029E  00F1               	movwf	??_UART_Read_Text+1
  1757  029F  0871               	movf	??_UART_Read_Text+1,w
  1758  02A0  0084               	movwf	4
  1759  02A1  0870               	movf	??_UART_Read_Text,w
  1760  02A2  1383               	bcf	3,7	;select IRP bank0
  1761  02A3  0080               	movwf	0
  1762                           
  1763                           ;UniversalAsyncReceiveTransmit.h: 55: i++;
  1764  02A4  3001               	movlw	1
  1765  02A5  07F4               	addwf	UART_Read_Text@i,f
  1766  02A6  1803               	skipnc
  1767  02A7  0AF5               	incf	UART_Read_Text@i+1,f
  1768  02A8  3000               	movlw	0
  1769  02A9  07F5               	addwf	UART_Read_Text@i+1,f
  1770                           
  1771                           ;UniversalAsyncReceiveTransmit.h: 56: }while(i < 2);
  1772  02AA  0875               	movf	UART_Read_Text@i+1,w
  1773  02AB  3A80               	xorlw	128
  1774  02AC  00FF               	movwf	127
  1775  02AD  3080               	movlw	128
  1776  02AE  027F               	subwf	127,w
  1777  02AF  1D03               	skipz
  1778  02B0  2AB3               	goto	u825
  1779  02B1  3002               	movlw	2
  1780  02B2  0274               	subwf	UART_Read_Text@i,w
  1781  02B3                     u825:	
  1782  02B3  1803               	btfsc	3,0
  1783  02B4  0008               	return
  1784  02B5  2A92               	goto	l1122
  1785  02B6                     __end_of_UART_Read_Text:	
  1786                           
  1787                           	psect	text6
  1788  0202                     __ptext6:	
  1789 ;; *************** function _UART_Read *****************
  1790 ;; Defined at:
  1791 ;;		line 39 in file "UniversalAsyncReceiveTransmit.h"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      unsigned char 
  1798 ;; Registers used:
  1799 ;;		wreg
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1805 ;;      Params:         0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0
  1808 ;;      Totals:         0       0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_UART_Read_Text
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _UART_Read
  1820  0202                     _UART_Read:	
  1821  0202                     l95:	
  1822                           ;UniversalAsyncReceiveTransmit.h: 41: while(!RCIF);
  1823                           
  1824                           ;incstack = 0
  1825                           ; Regs used in _UART_Read: [wreg]
  1826                           
  1827  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1828  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1829  0204  1E8C               	btfss	12,5	;volatile
  1830  0205  2A02               	goto	l95
  1831                           
  1832                           ;UniversalAsyncReceiveTransmit.h: 42: return RCREG;
  1833  0206  081A               	movf	26,w	;volatile
  1834  0207  0008               	return
  1835  0208                     __end_of_UART_Read:	
  1836                           
  1837                           	psect	text7
  1838  0489                     __ptext7:	
  1839 ;; *************** function _UART_Init *****************
  1840 ;; Defined at:
  1841 ;;		line 1 in file "UniversalAsyncReceiveTransmit.h"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  baudrate        4    6[BANK0 ] const long 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  x               2    9[COMMON] unsigned int 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      unsigned char 
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0, pclath, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1855 ;;      Params:         0       4       0       0       0
  1856 ;;      Locals:         2       0       0       0       0
  1857 ;;      Temps:          0      12       0       0       0
  1858 ;;      Totals:         2      16       0       0       0
  1859 ;;Total ram usage:       18 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    1
  1862 ;; This function calls:
  1863 ;;		___aldiv
  1864 ;; This function is called by:
  1865 ;;		_main
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           
  1870                           ;psect for function _UART_Init
  1871  0489                     _UART_Init:	
  1872                           
  1873                           ;UniversalAsyncReceiveTransmit.h: 3: unsigned int x;
  1874                           ;UniversalAsyncReceiveTransmit.h: 5: x = (22118400 - (baudrate * 64)) / (baudrate * 64);
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1878  0489  1283               	bcf	3,5	;RP0=0, select bank0
  1879  048A  1303               	bcf	3,6	;RP1=0, select bank0
  1880  048B  0826               	movf	UART_Init@baudrate,w
  1881  048C  00AA               	movwf	??_UART_Init
  1882  048D  0827               	movf	UART_Init@baudrate+1,w
  1883  048E  00AB               	movwf	??_UART_Init+1
  1884  048F  0828               	movf	UART_Init@baudrate+2,w
  1885  0490  00AC               	movwf	??_UART_Init+2
  1886  0491  0829               	movf	UART_Init@baudrate+3,w
  1887  0492  00AD               	movwf	??_UART_Init+3
  1888  0493  3006               	movlw	6
  1889  0494                     u745:	
  1890  0494  1003               	clrc
  1891  0495  0DAA               	rlf	??_UART_Init,f
  1892  0496  0DAB               	rlf	??_UART_Init+1,f
  1893  0497  0DAC               	rlf	??_UART_Init+2,f
  1894  0498  0DAD               	rlf	??_UART_Init+3,f
  1895  0499  3EFF               	addlw	-1
  1896  049A  1D03               	skipz
  1897  049B  2C94               	goto	u745
  1898  049C  082D               	movf	??_UART_Init+3,w
  1899  049D  00F3               	movwf	___aldiv@divisor+3
  1900  049E  082C               	movf	??_UART_Init+2,w
  1901  049F  00F2               	movwf	___aldiv@divisor+2
  1902  04A0  082B               	movf	??_UART_Init+1,w
  1903  04A1  00F1               	movwf	___aldiv@divisor+1
  1904  04A2  082A               	movf	??_UART_Init,w
  1905  04A3  00F0               	movwf	___aldiv@divisor
  1906  04A4  3000               	movlw	0
  1907  04A5  00AE               	movwf	??_UART_Init+4
  1908  04A6  3080               	movlw	128
  1909  04A7  00AF               	movwf	??_UART_Init+5
  1910  04A8  3051               	movlw	81
  1911  04A9  00B0               	movwf	??_UART_Init+6
  1912  04AA  3001               	movlw	1
  1913  04AB  00B1               	movwf	??_UART_Init+7
  1914  04AC  0826               	movf	UART_Init@baudrate,w
  1915  04AD  00B2               	movwf	??_UART_Init+8
  1916  04AE  0827               	movf	UART_Init@baudrate+1,w
  1917  04AF  00B3               	movwf	??_UART_Init+9
  1918  04B0  0828               	movf	UART_Init@baudrate+2,w
  1919  04B1  00B4               	movwf	??_UART_Init+10
  1920  04B2  0829               	movf	UART_Init@baudrate+3,w
  1921  04B3  00B5               	movwf	??_UART_Init+11
  1922  04B4  3006               	movlw	6
  1923  04B5                     u755:	
  1924  04B5  1003               	clrc
  1925  04B6  0DB2               	rlf	??_UART_Init+8,f
  1926  04B7  0DB3               	rlf	??_UART_Init+9,f
  1927  04B8  0DB4               	rlf	??_UART_Init+10,f
  1928  04B9  0DB5               	rlf	??_UART_Init+11,f
  1929  04BA  3EFF               	addlw	-1
  1930  04BB  1D03               	skipz
  1931  04BC  2CB5               	goto	u755
  1932  04BD  09B2               	comf	??_UART_Init+8,f
  1933  04BE  09B3               	comf	??_UART_Init+9,f
  1934  04BF  09B4               	comf	??_UART_Init+10,f
  1935  04C0  09B5               	comf	??_UART_Init+11,f
  1936  04C1  0AB2               	incf	??_UART_Init+8,f
  1937  04C2  1903               	skipnz
  1938  04C3  0AB3               	incf	??_UART_Init+9,f
  1939  04C4  1903               	skipnz
  1940  04C5  0AB4               	incf	??_UART_Init+10,f
  1941  04C6  1903               	skipnz
  1942  04C7  0AB5               	incf	??_UART_Init+11,f
  1943  04C8  0832               	movf	??_UART_Init+8,w
  1944  04C9  07AE               	addwf	??_UART_Init+4,f
  1945  04CA  0833               	movf	??_UART_Init+9,w
  1946  04CB  1803               	skipnc
  1947  04CC  0F33               	incfsz	??_UART_Init+9,w
  1948  04CD  2CCF               	goto	u760
  1949  04CE  2CD0               	goto	u761
  1950  04CF                     u760:	
  1951  04CF  07AF               	addwf	??_UART_Init+5,f
  1952  04D0                     u761:	
  1953  04D0  0834               	movf	??_UART_Init+10,w
  1954  04D1  1803               	skipnc
  1955  04D2  0F34               	incfsz	??_UART_Init+10,w
  1956  04D3  2CD5               	goto	u762
  1957  04D4  2CD6               	goto	u763
  1958  04D5                     u762:	
  1959  04D5  07B0               	addwf	??_UART_Init+6,f
  1960  04D6                     u763:	
  1961  04D6  0835               	movf	??_UART_Init+11,w
  1962  04D7  1803               	skipnc
  1963  04D8  0A35               	incf	??_UART_Init+11,w
  1964  04D9  07B1               	addwf	??_UART_Init+7,f
  1965  04DA  0831               	movf	??_UART_Init+7,w
  1966  04DB  00F7               	movwf	___aldiv@dividend+3
  1967  04DC  0830               	movf	??_UART_Init+6,w
  1968  04DD  00F6               	movwf	___aldiv@dividend+2
  1969  04DE  082F               	movf	??_UART_Init+5,w
  1970  04DF  00F5               	movwf	___aldiv@dividend+1
  1971  04E0  082E               	movf	??_UART_Init+4,w
  1972  04E1  00F4               	movwf	___aldiv@dividend
  1973  04E2  120A  118A  23FA  120A  118A  	fcall	___aldiv
  1974  04E7  0871               	movf	?___aldiv+1,w
  1975  04E8  00FA               	movwf	UART_Init@x+1
  1976  04E9  0870               	movf	?___aldiv,w
  1977  04EA  00F9               	movwf	UART_Init@x
  1978                           
  1979                           ;UniversalAsyncReceiveTransmit.h: 7: if(x > 255)
  1980  04EB  3001               	movlw	1
  1981  04EC  027A               	subwf	UART_Init@x+1,w
  1982  04ED  3000               	movlw	0
  1983  04EE  1903               	skipnz
  1984  04EF  0279               	subwf	UART_Init@x,w
  1985  04F0  1C03               	skipc
  1986  04F1  2D58               	goto	l1098
  1987                           
  1988                           ;UniversalAsyncReceiveTransmit.h: 8: {
  1989                           ;UniversalAsyncReceiveTransmit.h: 9: x = (22118400 - baudrate * 16) / (baudrate * 16);
  1990  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  1991  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  1992  04F4  0826               	movf	UART_Init@baudrate,w
  1993  04F5  00AA               	movwf	??_UART_Init
  1994  04F6  0827               	movf	UART_Init@baudrate+1,w
  1995  04F7  00AB               	movwf	??_UART_Init+1
  1996  04F8  0828               	movf	UART_Init@baudrate+2,w
  1997  04F9  00AC               	movwf	??_UART_Init+2
  1998  04FA  0829               	movf	UART_Init@baudrate+3,w
  1999  04FB  00AD               	movwf	??_UART_Init+3
  2000  04FC  3004               	movlw	4
  2001  04FD                     u785:	
  2002  04FD  1003               	clrc
  2003  04FE  0DAA               	rlf	??_UART_Init,f
  2004  04FF  0DAB               	rlf	??_UART_Init+1,f
  2005  0500  0DAC               	rlf	??_UART_Init+2,f
  2006  0501  0DAD               	rlf	??_UART_Init+3,f
  2007  0502  3EFF               	addlw	-1
  2008  0503  1D03               	skipz
  2009  0504  2CFD               	goto	u785
  2010  0505  082D               	movf	??_UART_Init+3,w
  2011  0506  00F3               	movwf	___aldiv@divisor+3
  2012  0507  082C               	movf	??_UART_Init+2,w
  2013  0508  00F2               	movwf	___aldiv@divisor+2
  2014  0509  082B               	movf	??_UART_Init+1,w
  2015  050A  00F1               	movwf	___aldiv@divisor+1
  2016  050B  082A               	movf	??_UART_Init,w
  2017  050C  00F0               	movwf	___aldiv@divisor
  2018  050D  3000               	movlw	0
  2019  050E  00AE               	movwf	??_UART_Init+4
  2020  050F  3080               	movlw	128
  2021  0510  00AF               	movwf	??_UART_Init+5
  2022  0511  3051               	movlw	81
  2023  0512  00B0               	movwf	??_UART_Init+6
  2024  0513  3001               	movlw	1
  2025  0514  00B1               	movwf	??_UART_Init+7
  2026  0515  0826               	movf	UART_Init@baudrate,w
  2027  0516  00B2               	movwf	??_UART_Init+8
  2028  0517  0827               	movf	UART_Init@baudrate+1,w
  2029  0518  00B3               	movwf	??_UART_Init+9
  2030  0519  0828               	movf	UART_Init@baudrate+2,w
  2031  051A  00B4               	movwf	??_UART_Init+10
  2032  051B  0829               	movf	UART_Init@baudrate+3,w
  2033  051C  00B5               	movwf	??_UART_Init+11
  2034  051D  3004               	movlw	4
  2035  051E                     u795:	
  2036  051E  1003               	clrc
  2037  051F  0DB2               	rlf	??_UART_Init+8,f
  2038  0520  0DB3               	rlf	??_UART_Init+9,f
  2039  0521  0DB4               	rlf	??_UART_Init+10,f
  2040  0522  0DB5               	rlf	??_UART_Init+11,f
  2041  0523  3EFF               	addlw	-1
  2042  0524  1D03               	skipz
  2043  0525  2D1E               	goto	u795
  2044  0526  09B2               	comf	??_UART_Init+8,f
  2045  0527  09B3               	comf	??_UART_Init+9,f
  2046  0528  09B4               	comf	??_UART_Init+10,f
  2047  0529  09B5               	comf	??_UART_Init+11,f
  2048  052A  0AB2               	incf	??_UART_Init+8,f
  2049  052B  1903               	skipnz
  2050  052C  0AB3               	incf	??_UART_Init+9,f
  2051  052D  1903               	skipnz
  2052  052E  0AB4               	incf	??_UART_Init+10,f
  2053  052F  1903               	skipnz
  2054  0530  0AB5               	incf	??_UART_Init+11,f
  2055  0531  0832               	movf	??_UART_Init+8,w
  2056  0532  07AE               	addwf	??_UART_Init+4,f
  2057  0533  0833               	movf	??_UART_Init+9,w
  2058  0534  1803               	skipnc
  2059  0535  0F33               	incfsz	??_UART_Init+9,w
  2060  0536  2D38               	goto	u800
  2061  0537  2D39               	goto	u801
  2062  0538                     u800:	
  2063  0538  07AF               	addwf	??_UART_Init+5,f
  2064  0539                     u801:	
  2065  0539  0834               	movf	??_UART_Init+10,w
  2066  053A  1803               	skipnc
  2067  053B  0F34               	incfsz	??_UART_Init+10,w
  2068  053C  2D3E               	goto	u802
  2069  053D  2D3F               	goto	u803
  2070  053E                     u802:	
  2071  053E  07B0               	addwf	??_UART_Init+6,f
  2072  053F                     u803:	
  2073  053F  0835               	movf	??_UART_Init+11,w
  2074  0540  1803               	skipnc
  2075  0541  0A35               	incf	??_UART_Init+11,w
  2076  0542  07B1               	addwf	??_UART_Init+7,f
  2077  0543  0831               	movf	??_UART_Init+7,w
  2078  0544  00F7               	movwf	___aldiv@dividend+3
  2079  0545  0830               	movf	??_UART_Init+6,w
  2080  0546  00F6               	movwf	___aldiv@dividend+2
  2081  0547  082F               	movf	??_UART_Init+5,w
  2082  0548  00F5               	movwf	___aldiv@dividend+1
  2083  0549  082E               	movf	??_UART_Init+4,w
  2084  054A  00F4               	movwf	___aldiv@dividend
  2085  054B  120A  118A  23FA   	fcall	___aldiv
  2086  054E  0871               	movf	?___aldiv+1,w
  2087  054F  00FA               	movwf	UART_Init@x+1
  2088  0550  0870               	movf	?___aldiv,w
  2089  0551  00F9               	movwf	UART_Init@x
  2090                           
  2091                           ;UniversalAsyncReceiveTransmit.h: 10: BRGH = 1;
  2092  0552  1683               	bsf	3,5	;RP0=1, select bank1
  2093  0553  1303               	bcf	3,6	;RP1=0, select bank1
  2094  0554  1518               	bsf	24,2	;volatile
  2095                           
  2096                           ;UniversalAsyncReceiveTransmit.h: 11: SPBRG = x;
  2097  0555  0879               	movf	UART_Init@x,w
  2098  0556  0099               	movwf	25	;volatile
  2099                           
  2100                           ;UniversalAsyncReceiveTransmit.h: 12: return 1;
  2101                           ;	Return value of _UART_Init is never used
  2102  0557  0008               	return
  2103  0558                     l1098:	
  2104                           
  2105                           ;UniversalAsyncReceiveTransmit.h: 13: }
  2106                           ;UniversalAsyncReceiveTransmit.h: 15: if( x < 256)
  2107  0558  3001               	movlw	1
  2108  0559  027A               	subwf	UART_Init@x+1,w
  2109  055A  3000               	movlw	0
  2110  055B  1903               	skipnz
  2111  055C  0279               	subwf	UART_Init@x,w
  2112  055D  1803               	skipnc
  2113  055E  0008               	return
  2114                           
  2115                           ;UniversalAsyncReceiveTransmit.h: 16: {
  2116                           ;UniversalAsyncReceiveTransmit.h: 17: SPBRG = x;
  2117  055F  0879               	movf	UART_Init@x,w
  2118  0560  1683               	bsf	3,5	;RP0=1, select bank1
  2119  0561  1303               	bcf	3,6	;RP1=0, select bank1
  2120  0562  0099               	movwf	25	;volatile
  2121                           
  2122                           ;UniversalAsyncReceiveTransmit.h: 18: SYNC = 0;
  2123  0563  1218               	bcf	24,4	;volatile
  2124                           
  2125                           ;UniversalAsyncReceiveTransmit.h: 19: SPEN = 1;
  2126  0564  1283               	bcf	3,5	;RP0=0, select bank0
  2127  0565  1303               	bcf	3,6	;RP1=0, select bank0
  2128  0566  1798               	bsf	24,7	;volatile
  2129                           
  2130                           ;UniversalAsyncReceiveTransmit.h: 20: TRISC7 = 1;
  2131  0567  1683               	bsf	3,5	;RP0=1, select bank1
  2132  0568  1303               	bcf	3,6	;RP1=0, select bank1
  2133  0569  1787               	bsf	7,7	;volatile
  2134                           
  2135                           ;UniversalAsyncReceiveTransmit.h: 21: TRISC6 = 0;
  2136  056A  1307               	bcf	7,6	;volatile
  2137                           
  2138                           ;UniversalAsyncReceiveTransmit.h: 22: CREN = 1;
  2139  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2140  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2141  056D  1618               	bsf	24,4	;volatile
  2142                           
  2143                           ;UniversalAsyncReceiveTransmit.h: 23: TXEN = 1;
  2144  056E  1683               	bsf	3,5	;RP0=1, select bank1
  2145  056F  1303               	bcf	3,6	;RP1=0, select bank1
  2146  0570  1698               	bsf	24,5	;volatile
  2147                           
  2148                           ;UniversalAsyncReceiveTransmit.h: 24: return 1;
  2149                           ;	Return value of _UART_Init is never used
  2150  0571  0008               	return
  2151  0572                     __end_of_UART_Init:	
  2152                           ;UniversalAsyncReceiveTransmit.h: 25: }
  2153                           ;UniversalAsyncReceiveTransmit.h: 26: return 0;
  2154                           ;	Return value of _UART_Init is never used
  2155                           
  2156                           
  2157                           	psect	text8
  2158  03FA                     __ptext8:	
  2159 ;; *************** function ___aldiv *****************
  2160 ;; Defined at:
  2161 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  divisor         4    0[COMMON] long 
  2164 ;;  dividend        4    4[COMMON] long 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  quotient        4    2[BANK0 ] long 
  2167 ;;  sign            1    1[BANK0 ] unsigned char 
  2168 ;;  counter         1    0[BANK0 ] unsigned char 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  4    0[COMMON] long 
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2178 ;;      Params:         8       0       0       0       0
  2179 ;;      Locals:         0       6       0       0       0
  2180 ;;      Temps:          1       0       0       0       0
  2181 ;;      Totals:         9       6       0       0       0
  2182 ;;Total ram usage:       15 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_UART_Init
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function ___aldiv
  2193  03FA                     ___aldiv:	
  2194                           
  2195                           ;incstack = 0
  2196                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2197  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2198  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2199  03FC  01A1               	clrf	___aldiv@sign
  2200  03FD  1FF3               	btfss	___aldiv@divisor+3,7
  2201  03FE  2C0C               	goto	l289
  2202  03FF  09F0               	comf	___aldiv@divisor,f
  2203  0400  09F1               	comf	___aldiv@divisor+1,f
  2204  0401  09F2               	comf	___aldiv@divisor+2,f
  2205  0402  09F3               	comf	___aldiv@divisor+3,f
  2206  0403  0AF0               	incf	___aldiv@divisor,f
  2207  0404  1903               	skipnz
  2208  0405  0AF1               	incf	___aldiv@divisor+1,f
  2209  0406  1903               	skipnz
  2210  0407  0AF2               	incf	___aldiv@divisor+2,f
  2211  0408  1903               	skipnz
  2212  0409  0AF3               	incf	___aldiv@divisor+3,f
  2213  040A  01A1               	clrf	___aldiv@sign
  2214  040B  0AA1               	incf	___aldiv@sign,f
  2215  040C                     l289:	
  2216  040C  1FF7               	btfss	___aldiv@dividend+3,7
  2217  040D  2C1D               	goto	l1016
  2218  040E  09F4               	comf	___aldiv@dividend,f
  2219  040F  09F5               	comf	___aldiv@dividend+1,f
  2220  0410  09F6               	comf	___aldiv@dividend+2,f
  2221  0411  09F7               	comf	___aldiv@dividend+3,f
  2222  0412  0AF4               	incf	___aldiv@dividend,f
  2223  0413  1903               	skipnz
  2224  0414  0AF5               	incf	___aldiv@dividend+1,f
  2225  0415  1903               	skipnz
  2226  0416  0AF6               	incf	___aldiv@dividend+2,f
  2227  0417  1903               	skipnz
  2228  0418  0AF7               	incf	___aldiv@dividend+3,f
  2229  0419  3001               	movlw	1
  2230  041A  00F8               	movwf	??___aldiv
  2231  041B  0878               	movf	??___aldiv,w
  2232  041C  06A1               	xorwf	___aldiv@sign,f
  2233  041D                     l1016:	
  2234  041D  3000               	movlw	0
  2235  041E  00A5               	movwf	___aldiv@quotient+3
  2236  041F  3000               	movlw	0
  2237  0420  00A4               	movwf	___aldiv@quotient+2
  2238  0421  3000               	movlw	0
  2239  0422  00A3               	movwf	___aldiv@quotient+1
  2240  0423  3000               	movlw	0
  2241  0424  00A2               	movwf	___aldiv@quotient
  2242  0425  0873               	movf	___aldiv@divisor+3,w
  2243  0426  0472               	iorwf	___aldiv@divisor+2,w
  2244  0427  0471               	iorwf	___aldiv@divisor+1,w
  2245  0428  0470               	iorwf	___aldiv@divisor,w
  2246  0429  1903               	skipnz
  2247  042A  2C72               	goto	l1038
  2248  042B  01A0               	clrf	___aldiv@counter
  2249  042C  0AA0               	incf	___aldiv@counter,f
  2250  042D                     l1024:	
  2251  042D  1BF3               	btfsc	___aldiv@divisor+3,7
  2252  042E  2C3D               	goto	l1026
  2253  042F  3001               	movlw	1
  2254  0430  00F8               	movwf	??___aldiv
  2255  0431                     u605:	
  2256  0431  1003               	clrc
  2257  0432  0DF0               	rlf	___aldiv@divisor,f
  2258  0433  0DF1               	rlf	___aldiv@divisor+1,f
  2259  0434  0DF2               	rlf	___aldiv@divisor+2,f
  2260  0435  0DF3               	rlf	___aldiv@divisor+3,f
  2261  0436  0BF8               	decfsz	??___aldiv,f
  2262  0437  2C31               	goto	u605
  2263  0438  3001               	movlw	1
  2264  0439  00F8               	movwf	??___aldiv
  2265  043A  0878               	movf	??___aldiv,w
  2266  043B  07A0               	addwf	___aldiv@counter,f
  2267  043C  2C2D               	goto	l1024
  2268  043D                     l1026:	
  2269  043D  3001               	movlw	1
  2270  043E  00F8               	movwf	??___aldiv
  2271  043F                     u625:	
  2272  043F  1003               	clrc
  2273  0440  0DA2               	rlf	___aldiv@quotient,f
  2274  0441  0DA3               	rlf	___aldiv@quotient+1,f
  2275  0442  0DA4               	rlf	___aldiv@quotient+2,f
  2276  0443  0DA5               	rlf	___aldiv@quotient+3,f
  2277  0444  0BF8               	decfsz	??___aldiv,f
  2278  0445  2C3F               	goto	u625
  2279  0446  0873               	movf	___aldiv@divisor+3,w
  2280  0447  0277               	subwf	___aldiv@dividend+3,w
  2281  0448  1D03               	skipz
  2282  0449  2C54               	goto	u635
  2283  044A  0872               	movf	___aldiv@divisor+2,w
  2284  044B  0276               	subwf	___aldiv@dividend+2,w
  2285  044C  1D03               	skipz
  2286  044D  2C54               	goto	u635
  2287  044E  0871               	movf	___aldiv@divisor+1,w
  2288  044F  0275               	subwf	___aldiv@dividend+1,w
  2289  0450  1D03               	skipz
  2290  0451  2C54               	goto	u635
  2291  0452  0870               	movf	___aldiv@divisor,w
  2292  0453  0274               	subwf	___aldiv@dividend,w
  2293  0454                     u635:	
  2294  0454  1C03               	skipc
  2295  0455  2C65               	goto	l1034
  2296  0456  0870               	movf	___aldiv@divisor,w
  2297  0457  02F4               	subwf	___aldiv@dividend,f
  2298  0458  0871               	movf	___aldiv@divisor+1,w
  2299  0459  1C03               	skipc
  2300  045A  0F71               	incfsz	___aldiv@divisor+1,w
  2301  045B  02F5               	subwf	___aldiv@dividend+1,f
  2302  045C  0872               	movf	___aldiv@divisor+2,w
  2303  045D  1C03               	skipc
  2304  045E  0F72               	incfsz	___aldiv@divisor+2,w
  2305  045F  02F6               	subwf	___aldiv@dividend+2,f
  2306  0460  0873               	movf	___aldiv@divisor+3,w
  2307  0461  1C03               	skipc
  2308  0462  0F73               	incfsz	___aldiv@divisor+3,w
  2309  0463  02F7               	subwf	___aldiv@dividend+3,f
  2310  0464  1422               	bsf	___aldiv@quotient,0
  2311  0465                     l1034:	
  2312  0465  3001               	movlw	1
  2313  0466                     u645:	
  2314  0466  1003               	clrc
  2315  0467  0CF3               	rrf	___aldiv@divisor+3,f
  2316  0468  0CF2               	rrf	___aldiv@divisor+2,f
  2317  0469  0CF1               	rrf	___aldiv@divisor+1,f
  2318  046A  0CF0               	rrf	___aldiv@divisor,f
  2319  046B  3EFF               	addlw	-1
  2320  046C  1D03               	skipz
  2321  046D  2C66               	goto	u645
  2322  046E  3001               	movlw	1
  2323  046F  02A0               	subwf	___aldiv@counter,f
  2324  0470  1D03               	btfss	3,2
  2325  0471  2C3D               	goto	l1026
  2326  0472                     l1038:	
  2327  0472  0821               	movf	___aldiv@sign,w
  2328  0473  1903               	btfsc	3,2
  2329  0474  2C80               	goto	l1042
  2330  0475  09A2               	comf	___aldiv@quotient,f
  2331  0476  09A3               	comf	___aldiv@quotient+1,f
  2332  0477  09A4               	comf	___aldiv@quotient+2,f
  2333  0478  09A5               	comf	___aldiv@quotient+3,f
  2334  0479  0AA2               	incf	___aldiv@quotient,f
  2335  047A  1903               	skipnz
  2336  047B  0AA3               	incf	___aldiv@quotient+1,f
  2337  047C  1903               	skipnz
  2338  047D  0AA4               	incf	___aldiv@quotient+2,f
  2339  047E  1903               	skipnz
  2340  047F  0AA5               	incf	___aldiv@quotient+3,f
  2341  0480                     l1042:	
  2342  0480  0825               	movf	___aldiv@quotient+3,w
  2343  0481  00F3               	movwf	?___aldiv+3
  2344  0482  0824               	movf	___aldiv@quotient+2,w
  2345  0483  00F2               	movwf	?___aldiv+2
  2346  0484  0823               	movf	___aldiv@quotient+1,w
  2347  0485  00F1               	movwf	?___aldiv+1
  2348  0486  0822               	movf	___aldiv@quotient,w
  2349  0487  00F0               	movwf	?___aldiv
  2350  0488  0008               	return
  2351  0489                     __end_of___aldiv:	
  2352                           
  2353                           	psect	text9
  2354  01FC                     __ptext9:	
  2355 ;; *************** function _UART_Data_Ready *****************
  2356 ;; Defined at:
  2357 ;;		line 34 in file "UniversalAsyncReceiveTransmit.h"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      unsigned char 
  2364 ;; Registers used:
  2365 ;;		wreg
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2371 ;;      Params:         0       0       0       0       0
  2372 ;;      Locals:         0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0
  2374 ;;      Totals:         0       0       0       0       0
  2375 ;;Total ram usage:        0 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; This function calls:
  2378 ;;		Nothing
  2379 ;; This function is called by:
  2380 ;;		_main
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           
  2385                           ;psect for function _UART_Data_Ready
  2386  01FC                     _UART_Data_Ready:	
  2387                           
  2388                           ;UniversalAsyncReceiveTransmit.h: 36: return RCIF;
  2389                           
  2390                           ;incstack = 0
  2391                           ; Regs used in _UART_Data_Ready: [wreg]
  2392  01FC  3000               	movlw	0
  2393  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2394  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2395  01FF  1A8C               	btfsc	12,5	;volatile
  2396  0200  3001               	movlw	1
  2397  0201  0008               	return
  2398  0202                     __end_of_UART_Data_Ready:	
  2399                           
  2400                           	psect	text10
  2401  0319                     __ptext10:	
  2402 ;; *************** function _Lcd_Write_String *****************
  2403 ;; Defined at:
  2404 ;;		line 114 in file "LiquidCrystalDisplay.h"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  a               2    5[COMMON] PTR const unsigned char 
  2407 ;;		 -> STR_17(18), STR_16(16), STR_13(16), STR_12(17), 
  2408 ;;		 -> STR_11(15), STR_8(13), STR_7(17), STR_6(16), 
  2409 ;;		 -> ESP_Response(8), STR_3(16), STR_2(16), STR_1(17), 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  i               2   10[COMMON] int 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         2       0       0       0       0
  2422 ;;      Locals:         2       0       0       0       0
  2423 ;;      Temps:          3       0       0       0       0
  2424 ;;      Totals:         7       0       0       0       0
  2425 ;;Total ram usage:        7 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    2
  2428 ;; This function calls:
  2429 ;;		_Lcd_Write_Char
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _Lcd_Write_String
  2437  0319                     _Lcd_Write_String:	
  2438                           
  2439                           ;LiquidCrystalDisplay.h: 116: int i;
  2440                           ;LiquidCrystalDisplay.h: 117: for(i = 0; a[i] != '\0'; i++)
  2441                           
  2442                           ;incstack = 0
  2443                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2444  0319  01FA               	clrf	Lcd_Write_String@i
  2445  031A  01FB               	clrf	Lcd_Write_String@i+1
  2446  031B                     l1084:	
  2447  031B  087A               	movf	Lcd_Write_String@i,w
  2448  031C  0775               	addwf	Lcd_Write_String@a,w
  2449  031D  00F8               	movwf	??_Lcd_Write_String+1
  2450  031E  0876               	movf	Lcd_Write_String@a+1,w
  2451  031F  00F7               	movwf	??_Lcd_Write_String
  2452  0320  1803               	skipnc
  2453  0321  0AF7               	incf	??_Lcd_Write_String,f
  2454  0322  1BFA               	btfsc	Lcd_Write_String@i,7
  2455  0323  03F7               	decf	??_Lcd_Write_String,f
  2456  0324  0877               	movf	??_Lcd_Write_String,w
  2457  0325  00F9               	movwf	??_Lcd_Write_String+2
  2458  0326  0879               	movf	??_Lcd_Write_String+2,w
  2459  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0328  1303               	bcf	3,6	;RP1=0, select bank0
  2461  0329  00FF               	movwf	127
  2462  032A  0878               	movf	??_Lcd_Write_String+1,w
  2463  032B  0084               	movwf	4
  2464  032C  120A  118A  2003  120A  118A  	fcall	stringtab
  2465  0331  3A00               	xorlw	0
  2466  0332  1903               	btfsc	3,2
  2467  0333  0008               	return
  2468                           
  2469                           ;LiquidCrystalDisplay.h: 118: {
  2470                           ;LiquidCrystalDisplay.h: 119: Lcd_Write_Char(a[i]);
  2471  0334  087A               	movf	Lcd_Write_String@i,w
  2472  0335  0775               	addwf	Lcd_Write_String@a,w
  2473  0336  00F8               	movwf	??_Lcd_Write_String+1
  2474  0337  0876               	movf	Lcd_Write_String@a+1,w
  2475  0338  00F7               	movwf	??_Lcd_Write_String
  2476  0339  1803               	skipnc
  2477  033A  0AF7               	incf	??_Lcd_Write_String,f
  2478  033B  1BFA               	btfsc	Lcd_Write_String@i,7
  2479  033C  03F7               	decf	??_Lcd_Write_String,f
  2480  033D  0877               	movf	??_Lcd_Write_String,w
  2481  033E  00F9               	movwf	??_Lcd_Write_String+2
  2482  033F  0879               	movf	??_Lcd_Write_String+2,w
  2483  0340  1283               	bcf	3,5	;RP0=0, select bank0
  2484  0341  1303               	bcf	3,6	;RP1=0, select bank0
  2485  0342  00FF               	movwf	127
  2486  0343  0878               	movf	??_Lcd_Write_String+1,w
  2487  0344  0084               	movwf	4
  2488  0345  120A  118A  2003  120A  118A  	fcall	stringtab
  2489  034A  120A  118A  22E0  120A  118A  	fcall	_Lcd_Write_Char
  2490  034F  3001               	movlw	1
  2491  0350  07FA               	addwf	Lcd_Write_String@i,f
  2492  0351  1803               	skipnc
  2493  0352  0AFB               	incf	Lcd_Write_String@i+1,f
  2494  0353  3000               	movlw	0
  2495  0354  07FB               	addwf	Lcd_Write_String@i+1,f
  2496  0355  2B1B               	goto	l1084
  2497  0356                     __end_of_Lcd_Write_String:	
  2498                           
  2499                           	psect	text11
  2500  02E0                     __ptext11:	
  2501 ;; *************** function _Lcd_Write_Char *****************
  2502 ;; Defined at:
  2503 ;;		line 98 in file "LiquidCrystalDisplay.h"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  a               1    wreg     unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  a               1    4[COMMON] unsigned char 
  2508 ;;  y               1    3[COMMON] unsigned char 
  2509 ;;  temp            1    2[COMMON] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, pclath, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2519 ;;      Params:         0       0       0       0       0
  2520 ;;      Locals:         3       0       0       0       0
  2521 ;;      Temps:          1       0       0       0       0
  2522 ;;      Totals:         4       0       0       0       0
  2523 ;;Total ram usage:        4 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    1
  2526 ;; This function calls:
  2527 ;;		_Lcd_Port
  2528 ;; This function is called by:
  2529 ;;		_Lcd_Write_String
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _Lcd_Write_Char
  2535  02E0                     _Lcd_Write_Char:	
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2539                           ;Lcd_Write_Char@a stored from wreg
  2540  02E0  00F4               	movwf	Lcd_Write_Char@a
  2541                           
  2542                           ;LiquidCrystalDisplay.h: 100: char temp,y;
  2543                           ;LiquidCrystalDisplay.h: 101: temp = a&0x0F;
  2544  02E1  0874               	movf	Lcd_Write_Char@a,w
  2545  02E2  390F               	andlw	15
  2546  02E3  00F1               	movwf	??_Lcd_Write_Char
  2547  02E4  0871               	movf	??_Lcd_Write_Char,w
  2548  02E5  00F2               	movwf	Lcd_Write_Char@temp
  2549                           
  2550                           ;LiquidCrystalDisplay.h: 102: y = a&0xF0;
  2551  02E6  0874               	movf	Lcd_Write_Char@a,w
  2552  02E7  39F0               	andlw	240
  2553  02E8  00F1               	movwf	??_Lcd_Write_Char
  2554  02E9  0871               	movf	??_Lcd_Write_Char,w
  2555  02EA  00F3               	movwf	Lcd_Write_Char@y
  2556                           
  2557                           ;LiquidCrystalDisplay.h: 103: RD2 = 1;
  2558  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2559  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  2560  02ED  1508               	bsf	8,2	;volatile
  2561                           
  2562                           ;LiquidCrystalDisplay.h: 104: Lcd_Port(y>>4);
  2563  02EE  0873               	movf	Lcd_Write_Char@y,w
  2564  02EF  00F1               	movwf	??_Lcd_Write_Char
  2565  02F0  3004               	movlw	4
  2566  02F1                     u545:	
  2567  02F1  1003               	clrc
  2568  02F2  0CF1               	rrf	??_Lcd_Write_Char,f
  2569  02F3  3EFF               	addlw	-1
  2570  02F4  1D03               	skipz
  2571  02F5  2AF1               	goto	u545
  2572  02F6  0871               	movf	??_Lcd_Write_Char,w
  2573  02F7  120A  118A  221D  120A  118A  	fcall	_Lcd_Port
  2574                           
  2575                           ;LiquidCrystalDisplay.h: 105: RD3 = 1;
  2576  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2577  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  2578  02FE  1588               	bsf	8,3	;volatile
  2579                           
  2580                           ;LiquidCrystalDisplay.h: 106: _delay((unsigned long)((40)*(22118400/4000000.0)));
  2581  02FF  3049               	movlw	73
  2582  0300  00F1               	movwf	??_Lcd_Write_Char
  2583  0301                     u1147:	
  2584  0301  0BF1               	decfsz	??_Lcd_Write_Char,f
  2585  0302  2B01               	goto	u1147
  2586  0303  0000               	nop
  2587                           
  2588                           ;LiquidCrystalDisplay.h: 107: RD3 = 0;
  2589  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0305  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0306  1188               	bcf	8,3	;volatile
  2592                           
  2593                           ;LiquidCrystalDisplay.h: 108: Lcd_Port(temp);
  2594  0307  0872               	movf	Lcd_Write_Char@temp,w
  2595  0308  120A  118A  221D  120A  118A  	fcall	_Lcd_Port
  2596                           
  2597                           ;LiquidCrystalDisplay.h: 109: RD3 = 1;
  2598  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2599  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2600  030F  1588               	bsf	8,3	;volatile
  2601                           
  2602                           ;LiquidCrystalDisplay.h: 110: _delay((unsigned long)((40)*(22118400/4000000.0)));
  2603  0310  3049               	movlw	73
  2604  0311  00F1               	movwf	??_Lcd_Write_Char
  2605  0312                     u1157:	
  2606  0312  0BF1               	decfsz	??_Lcd_Write_Char,f
  2607  0313  2B12               	goto	u1157
  2608  0314  0000               	nop
  2609                           
  2610                           ;LiquidCrystalDisplay.h: 111: RD3 = 0;
  2611  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2612  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2613  0317  1188               	bcf	8,3	;volatile
  2614  0318  0008               	return
  2615  0319                     __end_of_Lcd_Write_Char:	
  2616                           
  2617                           	psect	text12
  2618  0356                     __ptext12:	
  2619 ;; *************** function _Lcd_Set_Cursor *****************
  2620 ;; Defined at:
  2621 ;;		line 58 in file "LiquidCrystalDisplay.h"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  a               1    wreg     unsigned char 
  2624 ;;  b               1    4[COMMON] unsigned char 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  a               1    7[COMMON] unsigned char 
  2627 ;;  temp            1   10[COMMON] unsigned char 
  2628 ;;  y               1    9[COMMON] unsigned char 
  2629 ;;  z               1    8[COMMON] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, pclath, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2639 ;;      Params:         1       0       0       0       0
  2640 ;;      Locals:         4       0       0       0       0
  2641 ;;      Temps:          2       0       0       0       0
  2642 ;;      Totals:         7       0       0       0       0
  2643 ;;Total ram usage:        7 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    2
  2646 ;; This function calls:
  2647 ;;		_Lcd_Cmd
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           
  2654                           ;psect for function _Lcd_Set_Cursor
  2655  0356                     _Lcd_Set_Cursor:	
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2659                           ;Lcd_Set_Cursor@a stored from wreg
  2660  0356  00F7               	movwf	Lcd_Set_Cursor@a
  2661                           
  2662                           ;LiquidCrystalDisplay.h: 60: char temp,z,y;
  2663                           ;LiquidCrystalDisplay.h: 61: if(a == 1)
  2664  0357  0377               	decf	Lcd_Set_Cursor@a,w
  2665  0358  1D03               	btfss	3,2
  2666  0359  2B7B               	goto	l1058
  2667                           
  2668                           ;LiquidCrystalDisplay.h: 62: {
  2669                           ;LiquidCrystalDisplay.h: 63: temp = 0x80 + b - 1;
  2670  035A  0874               	movf	Lcd_Set_Cursor@b,w
  2671  035B  3E7F               	addlw	127
  2672  035C  00F5               	movwf	??_Lcd_Set_Cursor
  2673  035D  0875               	movf	??_Lcd_Set_Cursor,w
  2674  035E  00FA               	movwf	Lcd_Set_Cursor@temp
  2675                           
  2676                           ;LiquidCrystalDisplay.h: 64: z = temp>>4;
  2677  035F  087A               	movf	Lcd_Set_Cursor@temp,w
  2678  0360  00F5               	movwf	??_Lcd_Set_Cursor
  2679  0361  3004               	movlw	4
  2680  0362                     u685:	
  2681  0362  1003               	clrc
  2682  0363  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2683  0364  3EFF               	addlw	-1
  2684  0365  1D03               	skipz
  2685  0366  2B62               	goto	u685
  2686  0367  0875               	movf	??_Lcd_Set_Cursor,w
  2687  0368  00F6               	movwf	??_Lcd_Set_Cursor+1
  2688  0369  0876               	movf	??_Lcd_Set_Cursor+1,w
  2689  036A  00F8               	movwf	Lcd_Set_Cursor@z
  2690                           
  2691                           ;LiquidCrystalDisplay.h: 65: y = temp & 0x0F;
  2692  036B  087A               	movf	Lcd_Set_Cursor@temp,w
  2693  036C  390F               	andlw	15
  2694  036D  00F5               	movwf	??_Lcd_Set_Cursor
  2695  036E  0875               	movf	??_Lcd_Set_Cursor,w
  2696  036F  00F9               	movwf	Lcd_Set_Cursor@y
  2697                           
  2698                           ;LiquidCrystalDisplay.h: 66: Lcd_Cmd(z);
  2699  0370  0878               	movf	Lcd_Set_Cursor@z,w
  2700  0371  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2701                           
  2702                           ;LiquidCrystalDisplay.h: 67: Lcd_Cmd(y);
  2703  0376  0879               	movf	Lcd_Set_Cursor@y,w
  2704  0377  120A  118A  2237   	fcall	_Lcd_Cmd
  2705                           
  2706                           ;LiquidCrystalDisplay.h: 68: }
  2707  037A  0008               	return
  2708  037B                     l1058:	
  2709                           
  2710                           ;LiquidCrystalDisplay.h: 69: else if(a == 2)
  2711  037B  3002               	movlw	2
  2712  037C  0677               	xorwf	Lcd_Set_Cursor@a,w
  2713  037D  1D03               	btfss	3,2
  2714  037E  0008               	return
  2715                           
  2716                           ;LiquidCrystalDisplay.h: 70: {
  2717                           ;LiquidCrystalDisplay.h: 71: temp = 0xC0 + b - 1;
  2718  037F  0874               	movf	Lcd_Set_Cursor@b,w
  2719  0380  3EBF               	addlw	191
  2720  0381  00F5               	movwf	??_Lcd_Set_Cursor
  2721  0382  0875               	movf	??_Lcd_Set_Cursor,w
  2722  0383  00FA               	movwf	Lcd_Set_Cursor@temp
  2723                           
  2724                           ;LiquidCrystalDisplay.h: 72: z = temp>>4;
  2725  0384  087A               	movf	Lcd_Set_Cursor@temp,w
  2726  0385  00F5               	movwf	??_Lcd_Set_Cursor
  2727  0386  3004               	movlw	4
  2728  0387                     u705:	
  2729  0387  1003               	clrc
  2730  0388  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2731  0389  3EFF               	addlw	-1
  2732  038A  1D03               	skipz
  2733  038B  2B87               	goto	u705
  2734  038C  0875               	movf	??_Lcd_Set_Cursor,w
  2735  038D  00F6               	movwf	??_Lcd_Set_Cursor+1
  2736  038E  0876               	movf	??_Lcd_Set_Cursor+1,w
  2737  038F  00F8               	movwf	Lcd_Set_Cursor@z
  2738                           
  2739                           ;LiquidCrystalDisplay.h: 73: y = temp & 0x0F;
  2740  0390  087A               	movf	Lcd_Set_Cursor@temp,w
  2741  0391  390F               	andlw	15
  2742  0392  00F5               	movwf	??_Lcd_Set_Cursor
  2743  0393  0875               	movf	??_Lcd_Set_Cursor,w
  2744  0394  00F9               	movwf	Lcd_Set_Cursor@y
  2745                           
  2746                           ;LiquidCrystalDisplay.h: 74: Lcd_Cmd(z);
  2747  0395  0878               	movf	Lcd_Set_Cursor@z,w
  2748  0396  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2749                           
  2750                           ;LiquidCrystalDisplay.h: 75: Lcd_Cmd(y);
  2751  039B  0879               	movf	Lcd_Set_Cursor@y,w
  2752  039C  120A  118A  2237   	fcall	_Lcd_Cmd
  2753  039F  0008               	return
  2754  03A0                     __end_of_Lcd_Set_Cursor:	
  2755                           
  2756                           	psect	text13
  2757  03A0                     __ptext13:	
  2758 ;; *************** function _Lcd_Init *****************
  2759 ;; Defined at:
  2760 ;;		line 79 in file "LiquidCrystalDisplay.h"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0, pclath, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2774 ;;      Params:         0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0
  2776 ;;      Temps:          2       0       0       0       0
  2777 ;;      Totals:         2       0       0       0       0
  2778 ;;Total ram usage:        2 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    2
  2781 ;; This function calls:
  2782 ;;		_Lcd_Cmd
  2783 ;;		_Lcd_Port
  2784 ;; This function is called by:
  2785 ;;		_main
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           
  2790                           ;psect for function _Lcd_Init
  2791  03A0                     _Lcd_Init:	
  2792                           
  2793                           ;LiquidCrystalDisplay.h: 81: Lcd_Port(0x00);
  2794                           
  2795                           ;incstack = 0
  2796                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2797  03A0  3000               	movlw	0
  2798  03A1  120A  118A  221D  120A  118A  	fcall	_Lcd_Port
  2799                           
  2800                           ;LiquidCrystalDisplay.h: 82: _delay((unsigned long)((20)*(22118400/4000.0)));
  2801  03A6  3090               	movlw	144
  2802  03A7  00F5               	movwf	??_Lcd_Init+1
  2803  03A8  309F               	movlw	159
  2804  03A9  00F4               	movwf	??_Lcd_Init
  2805  03AA                     u1167:	
  2806  03AA  0BF4               	decfsz	??_Lcd_Init,f
  2807  03AB  2BAA               	goto	u1167
  2808  03AC  0BF5               	decfsz	??_Lcd_Init+1,f
  2809  03AD  2BAA               	goto	u1167
  2810                           
  2811                           ;LiquidCrystalDisplay.h: 83: Lcd_Cmd(0x03);
  2812  03AE  3003               	movlw	3
  2813  03AF  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2814                           
  2815                           ;LiquidCrystalDisplay.h: 84: _delay((unsigned long)((5)*(22118400/4000.0)));
  2816  03B4  3024               	movlw	36
  2817  03B5  00F5               	movwf	??_Lcd_Init+1
  2818  03B6  30E7               	movlw	231
  2819  03B7  00F4               	movwf	??_Lcd_Init
  2820  03B8                     u1177:	
  2821  03B8  0BF4               	decfsz	??_Lcd_Init,f
  2822  03B9  2BB8               	goto	u1177
  2823  03BA  0BF5               	decfsz	??_Lcd_Init+1,f
  2824  03BB  2BB8               	goto	u1177
  2825                           
  2826                           ;LiquidCrystalDisplay.h: 85: Lcd_Cmd(0x03);
  2827  03BC  3003               	movlw	3
  2828  03BD  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2829                           
  2830                           ;LiquidCrystalDisplay.h: 86: _delay((unsigned long)((11)*(22118400/4000.0)));
  2831  03C2  304F               	movlw	79
  2832  03C3  00F5               	movwf	??_Lcd_Init+1
  2833  03C4  30FD               	movlw	253
  2834  03C5  00F4               	movwf	??_Lcd_Init
  2835  03C6                     u1187:	
  2836  03C6  0BF4               	decfsz	??_Lcd_Init,f
  2837  03C7  2BC6               	goto	u1187
  2838  03C8  0BF5               	decfsz	??_Lcd_Init+1,f
  2839  03C9  2BC6               	goto	u1187
  2840  03CA  0000               	nop
  2841                           
  2842                           ;LiquidCrystalDisplay.h: 87: Lcd_Cmd(0x03);
  2843  03CB  3003               	movlw	3
  2844  03CC  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2845                           
  2846                           ;LiquidCrystalDisplay.h: 89: Lcd_Cmd(0x02);
  2847  03D1  3002               	movlw	2
  2848  03D2  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2849                           
  2850                           ;LiquidCrystalDisplay.h: 90: Lcd_Cmd(0x02);
  2851  03D7  3002               	movlw	2
  2852  03D8  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2853                           
  2854                           ;LiquidCrystalDisplay.h: 91: Lcd_Cmd(0x08);
  2855  03DD  3008               	movlw	8
  2856  03DE  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2857                           
  2858                           ;LiquidCrystalDisplay.h: 92: Lcd_Cmd(0x00);
  2859  03E3  3000               	movlw	0
  2860  03E4  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2861                           
  2862                           ;LiquidCrystalDisplay.h: 93: Lcd_Cmd(0x0C);
  2863  03E9  300C               	movlw	12
  2864  03EA  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2865                           
  2866                           ;LiquidCrystalDisplay.h: 94: Lcd_Cmd(0x00);
  2867  03EF  3000               	movlw	0
  2868  03F0  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2869                           
  2870                           ;LiquidCrystalDisplay.h: 95: Lcd_Cmd(0x06);
  2871  03F5  3006               	movlw	6
  2872  03F6  120A  118A  2237   	fcall	_Lcd_Cmd
  2873  03F9  0008               	return
  2874  03FA                     __end_of_Lcd_Init:	
  2875                           
  2876                           	psect	text14
  2877  0212                     __ptext14:	
  2878 ;; *************** function _Lcd_Clear *****************
  2879 ;; Defined at:
  2880 ;;		line 52 in file "LiquidCrystalDisplay.h"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0, pclath, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2894 ;;      Params:         0       0       0       0       0
  2895 ;;      Locals:         0       0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0
  2897 ;;      Totals:         0       0       0       0       0
  2898 ;;Total ram usage:        0 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    2
  2901 ;; This function calls:
  2902 ;;		_Lcd_Cmd
  2903 ;; This function is called by:
  2904 ;;		_main
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _Lcd_Clear
  2910  0212                     _Lcd_Clear:	
  2911                           
  2912                           ;LiquidCrystalDisplay.h: 54: Lcd_Cmd(0);
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2916  0212  3000               	movlw	0
  2917  0213  120A  118A  2237  120A  118A  	fcall	_Lcd_Cmd
  2918                           
  2919                           ;LiquidCrystalDisplay.h: 55: Lcd_Cmd(1);
  2920  0218  3001               	movlw	1
  2921  0219  120A  118A  2237   	fcall	_Lcd_Cmd
  2922  021C  0008               	return
  2923  021D                     __end_of_Lcd_Clear:	
  2924                           
  2925                           	psect	text15
  2926  0237                     __ptext15:	
  2927 ;; *************** function _Lcd_Cmd *****************
  2928 ;; Defined at:
  2929 ;;		line 43 in file "LiquidCrystalDisplay.h"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  a               1    wreg     unsigned char 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  a               1    3[COMMON] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0, pclath, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2943 ;;      Params:         0       0       0       0       0
  2944 ;;      Locals:         1       0       0       0       0
  2945 ;;      Temps:          2       0       0       0       0
  2946 ;;      Totals:         3       0       0       0       0
  2947 ;;Total ram usage:        3 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    1
  2950 ;; This function calls:
  2951 ;;		_Lcd_Port
  2952 ;; This function is called by:
  2953 ;;		_Lcd_Clear
  2954 ;;		_Lcd_Set_Cursor
  2955 ;;		_Lcd_Init
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           
  2960                           ;psect for function _Lcd_Cmd
  2961  0237                     _Lcd_Cmd:	
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2965                           ;Lcd_Cmd@a stored from wreg
  2966  0237  00F3               	movwf	Lcd_Cmd@a
  2967                           
  2968                           ;LiquidCrystalDisplay.h: 45: RD2 = 0;
  2969  0238  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0239  1303               	bcf	3,6	;RP1=0, select bank0
  2971  023A  1108               	bcf	8,2	;volatile
  2972                           
  2973                           ;LiquidCrystalDisplay.h: 46: Lcd_Port(a);
  2974  023B  0873               	movf	Lcd_Cmd@a,w
  2975  023C  120A  118A  221D  120A  118A  	fcall	_Lcd_Port
  2976                           
  2977                           ;LiquidCrystalDisplay.h: 47: RD3 = 1;
  2978  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0242  1303               	bcf	3,6	;RP1=0, select bank0
  2980  0243  1588               	bsf	8,3	;volatile
  2981                           
  2982                           ;LiquidCrystalDisplay.h: 48: _delay((unsigned long)((4)*(22118400/4000.0)));
  2983  0244  301D               	movlw	29
  2984  0245  00F2               	movwf	??_Lcd_Cmd+1
  2985  0246  30B8               	movlw	184
  2986  0247  00F1               	movwf	??_Lcd_Cmd
  2987  0248                     u1197:	
  2988  0248  0BF1               	decfsz	??_Lcd_Cmd,f
  2989  0249  2A48               	goto	u1197
  2990  024A  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2991  024B  2A48               	goto	u1197
  2992  024C  0000               	nop
  2993                           
  2994                           ;LiquidCrystalDisplay.h: 49: RD3 = 0;
  2995  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2996  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2997  024F  1188               	bcf	8,3	;volatile
  2998  0250  0008               	return
  2999  0251                     __end_of_Lcd_Cmd:	
  3000                           
  3001                           	psect	text16
  3002  021D                     __ptext16:	
  3003 ;; *************** function _Lcd_Port *****************
  3004 ;; Defined at:
  3005 ;;		line 4 in file "LiquidCrystalDisplay.h"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  a               1    wreg     unsigned char 
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  a               1    0[COMMON] unsigned char 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3019 ;;      Params:         0       0       0       0       0
  3020 ;;      Locals:         1       0       0       0       0
  3021 ;;      Temps:          0       0       0       0       0
  3022 ;;      Totals:         1       0       0       0       0
  3023 ;;Total ram usage:        1 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_Lcd_Cmd
  3029 ;;		_Lcd_Init
  3030 ;;		_Lcd_Write_Char
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           
  3035                           ;psect for function _Lcd_Port
  3036  021D                     _Lcd_Port:	
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _Lcd_Port: [wreg]
  3040                           ;Lcd_Port@a stored from wreg
  3041  021D  00F0               	movwf	Lcd_Port@a
  3042                           
  3043                           ;LiquidCrystalDisplay.h: 6: if(a & 1)
  3044  021E  1C70               	btfss	Lcd_Port@a,0
  3045  021F  2A24               	goto	l49
  3046                           
  3047                           ;LiquidCrystalDisplay.h: 7: {
  3048                           ;LiquidCrystalDisplay.h: 8: RD4 = 1;
  3049  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3050  0221  1303               	bcf	3,6	;RP1=0, select bank0
  3051  0222  1608               	bsf	8,4	;volatile
  3052                           
  3053                           ;LiquidCrystalDisplay.h: 9: }
  3054  0223  2A27               	goto	l50
  3055  0224                     l49:	
  3056                           
  3057                           ;LiquidCrystalDisplay.h: 10: else
  3058                           ;LiquidCrystalDisplay.h: 11: {
  3059                           ;LiquidCrystalDisplay.h: 12: RD4 = 0;
  3060  0224  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0225  1303               	bcf	3,6	;RP1=0, select bank0
  3062  0226  1208               	bcf	8,4	;volatile
  3063  0227                     l50:	
  3064                           
  3065                           ;LiquidCrystalDisplay.h: 13: }
  3066                           ;LiquidCrystalDisplay.h: 15: if(a & 2)
  3067  0227  1CF0               	btfss	Lcd_Port@a,1
  3068  0228  2A2B               	goto	l51
  3069                           
  3070                           ;LiquidCrystalDisplay.h: 16: {
  3071                           ;LiquidCrystalDisplay.h: 17: RD5 = 1;
  3072  0229  1688               	bsf	8,5	;volatile
  3073                           
  3074                           ;LiquidCrystalDisplay.h: 18: }
  3075  022A  2A2C               	goto	l52
  3076  022B                     l51:	
  3077                           
  3078                           ;LiquidCrystalDisplay.h: 19: else
  3079                           ;LiquidCrystalDisplay.h: 20: {
  3080                           ;LiquidCrystalDisplay.h: 21: RD5 = 0;
  3081  022B  1288               	bcf	8,5	;volatile
  3082  022C                     l52:	
  3083                           
  3084                           ;LiquidCrystalDisplay.h: 22: }
  3085                           ;LiquidCrystalDisplay.h: 24: if(a & 4)
  3086  022C  1D70               	btfss	Lcd_Port@a,2
  3087  022D  2A30               	goto	l53
  3088                           
  3089                           ;LiquidCrystalDisplay.h: 25: {
  3090                           ;LiquidCrystalDisplay.h: 26: RD6 = 1;
  3091  022E  1708               	bsf	8,6	;volatile
  3092                           
  3093                           ;LiquidCrystalDisplay.h: 27: }
  3094  022F  2A31               	goto	l54
  3095  0230                     l53:	
  3096                           
  3097                           ;LiquidCrystalDisplay.h: 28: else
  3098                           ;LiquidCrystalDisplay.h: 29: {
  3099                           ;LiquidCrystalDisplay.h: 30: RD6 = 0;
  3100  0230  1308               	bcf	8,6	;volatile
  3101  0231                     l54:	
  3102                           
  3103                           ;LiquidCrystalDisplay.h: 31: }
  3104                           ;LiquidCrystalDisplay.h: 33: if(a & 8)
  3105  0231  1DF0               	btfss	Lcd_Port@a,3
  3106  0232  2A35               	goto	l55
  3107                           
  3108                           ;LiquidCrystalDisplay.h: 34: {
  3109                           ;LiquidCrystalDisplay.h: 35: RD7 = 1;
  3110  0233  1788               	bsf	8,7	;volatile
  3111                           
  3112                           ;LiquidCrystalDisplay.h: 36: }
  3113  0234  0008               	return
  3114  0235                     l55:	
  3115                           
  3116                           ;LiquidCrystalDisplay.h: 37: else
  3117                           ;LiquidCrystalDisplay.h: 38: {
  3118                           ;LiquidCrystalDisplay.h: 39: RD7 = 0;
  3119  0235  1388               	bcf	8,7	;volatile
  3120  0236  0008               	return
  3121  0237                     __end_of_Lcd_Port:	
  3122  007E                     btemp	set	126	;btemp
  3123  007E                     wtemp0	set	126


Data Sizes:
    Strings     227
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     29      37
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_15(CODE[3]), STR_10(CODE[3]), STR_5(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    memset@p1	PTR void  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    memset@p	PTR unsigned char  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    UART_Write_Text@text	PTR const unsigned char  size(1) Largest target is 35
		 -> STR_14(CODE[35]), STR_9(CODE[12]), STR_4(CODE[3]), 

    UART_Read_Text@buffer	PTR unsigned char  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[18]), STR_16(CODE[16]), STR_13(CODE[16]), STR_12(CODE[17]), 
		 -> STR_11(CODE[15]), STR_8(CODE[13]), STR_7(CODE[17]), STR_6(CODE[16]), 
		 -> ESP_Response(BANK0[8]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _UART_Write_Text->_UART_Write
    _UART_Init->___aldiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    4045
                                             22 BANK0      7     7      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                    _UART_Data_Ready
                          _UART_Init
                     _UART_Read_Text
                         _UART_Write
                    _UART_Write_Text
                             _memset
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     4      2     331
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     495
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      3     3      0     193
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Read_Text                                       6     6      0     172
                                              0 COMMON     6     6      0
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     743
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     904
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     804
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read_Text
     _UART_Read
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _memset
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      25       5       46.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Feb 07 04:09:41 2017

                        pc 0002                __CFG_CP$OFF 0000                         l50 0227  
                       l51 022B                         l52 022C                         l53 0230  
                       l54 0231                         l55 0235                         l49 0224  
                       l95 0202                         fsr 0004                __CFG_LVP$ON 0000  
                      l106 0209                        l128 06B2                        l289 040C  
                      _RD2 0042                        _RD3 0043                        _RB7 0037  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        u605 0431  
                      u800 0538                        u705 0387                        u545 02F1  
                      u625 043F                        u801 0539                        u802 053E  
                      u635 0454                        u803 053F                        u645 0466  
                      u760 04CF                        u761 04D0                        u745 0494  
                      u825 02B3                        u762 04D5                        u763 04D6  
                      u755 04B5                        u685 0362                        u785 04FD  
                      u795 051E                        u997 058B                        fsr0 0004  
                      indf 0000               __CFG_FOSC$HS 0000                       l1024 042D  
                     l1016 041D                       l1042 0480                       l1034 0465  
                     l1026 043D                       l1122 0292                       l1220 05F4  
                     l1038 0472                       l1230 06ED                       l1222 06C2  
                     l1214 0682                       l1136 0270                       l1144 0256  
                     l1152 02C0                       l1058 037B                       l1084 031B  
                     l1156 02DA                       l1148 02B8                       l1252 0755  
                     l1262 0786                       l1254 075B                       l1280 07D6  
                     l1248 073D                       l1184 05E5                       l1098 0558  
                     l1284 07EE                       l1196 062A                       STR_1 006A  
                     STR_2 00AB                       STR_3 009B                       STR_4 00F3  
                     STR_5 0088                       STR_6 007B                       STR_7 0048  
                     STR_8 00DA                       STR_9 00E7                       _BRGH 04C2  
                     _CREN 00C4                       u1007 05A9                       u1017 05DF  
                     u1107 074E                       u1027 05ED                       u1117 0779  
                     u1037 0617                       u1127 07B1                       u1047 0655  
                     u1137 07E7                       u1057 0693                       u1147 0301  
                     u1067 06AB                       u1157 0312                       u1077 06BA  
                     u1167 03AA                       u1087 06E0                       u1177 03B8  
                     u1097 0718                       u1187 03C6                       u1197 0248  
                     _RCIF 0065                       _SPEN 00C7                       _TRMT 04C1  
                     _TXEN 04C5                       _SYNC 04C4               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0075                main@op_mode 003B                       _main 0572  
                     btemp 007E                       start 0000         ??_Lcd_Write_String 0077  
          __end_of_Lcd_Cmd 0251    __end_of_UART_Write_Text 028F            __end_of___aldiv 0489  
                    ?_main 0070                      STR_10 0088                      STR_11 00CB  
                    STR_12 0059                      STR_13 00BB                      STR_14 0013  
                    STR_15 0088                      STR_16 008B                      STR_17 0036  
            __CFG_WDTE$OFF 0000                      _RCREG 001A                      _SPBRG 0099  
  __size_of_Lcd_Set_Cursor 004A                      _TRISD 0088                      _TXREG 0019  
     UART_Read_Text@buffer 0073                ?_UART_Write 0070         __size_of_UART_Init 00E9  
       __size_of_UART_Read 0006             __CFG_BOREN$OFF 0000                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 03FA  
         __end_of_Lcd_Port 0237            __initialization 07F4               __end_of_main 07F4  
                   ??_main 0036         __size_of_Lcd_Clear 000B                  ??_Lcd_Cmd 0071  
  __size_of_Lcd_Write_Char 0039                     _TRISC6 043E                     _TRISC7 043F  
           __CFG_PWRTE$OFF 0000          __end_of_UART_Init 0572          __end_of_UART_Read 0208  
      __size_of_UART_Write 000A                  ??___aldiv 0078           ?_UART_Write_Text 0070  
  __size_of_UART_Read_Text 0027                     _memset 0251                     _strcmp 02B6  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC          __end_of_Lcd_Clear 021D  
           __pcstackCOMMON 0070             _Lcd_Set_Cursor 0356                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pbssBANK0 003D   __size_of_UART_Data_Ready 0006  
               __pmaintext 0572                    ?_memset 0070  __size_of_Lcd_Write_String 003D  
   __end_of_Lcd_Set_Cursor 03A0                    ?_strcmp 0070               ??_UART_Write 0070  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 02E0                    _Lcd_Cmd 0237                    ___aldiv 03FA  
   UART_Read_Text@rec_data 0072         __end_of_UART_Write 0212             _UART_Read_Text 028F  
          __size_of_memset 001C            ?_Lcd_Set_Cursor 0074                    __ptext1 02B6  
                  __ptext2 0251                    __ptext3 026D                    __ptext4 0208  
                  __ptext5 028F                    __ptext6 0202                    __ptext7 0489  
                  __ptext8 03FA                    __ptext9 01FC            __size_of_strcmp 002A  
         ___aldiv@dividend 0074     __end_of_Lcd_Write_Char 0319       end_of_initialization 07FC  
                  memset@c 0070                    memset@n 0072                    memset@p 0075  
   __end_of_UART_Read_Text 02B6           ___aldiv@quotient 0022                  Lcd_Port@a 0070  
        ??_UART_Data_Ready 0070                    strcmp@r 0074                  _UART_Init 0489  
                _UART_Read 0202             UART_Write@data 0070            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0075          Lcd_Write_String@i 007A                 main@esp_ok 003A  
        main@device_status 0039            ?_UART_Read_Text 0070                  _Lcd_Clear 0212  
         _Lcd_Write_String 0319                 ?_UART_Init 0026                 ?_UART_Read 0070  
           __end_of_memset 026D   __size_of_UART_Write_Text 0022             __end_of_strcmp 02E0  
      start_initialization 07F4          __size_of_Lcd_Init 005A          __size_of_Lcd_Port 001A  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074                   ??_memset 0074  
          Lcd_Write_Char@y 0073                   ??_strcmp 0072                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070               _ESP_Response 003D  
         ??_Lcd_Set_Cursor 0075                   ?___aldiv 0070                ??_UART_Init 002A  
              ??_UART_Read 0070                  __pstrings 0003                 UART_Init@x 0079  
        ??_UART_Write_Text 0071            ___aldiv@divisor 0070            ___aldiv@counter 0020  
          _UART_Data_Ready 01FC            UART_Read_Text@i 0074                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074          UART_Init@baudrate 0026                __stringbase 0012  
         ??_Lcd_Write_Char 0071                   _Lcd_Init 03A0                   _Lcd_Port 021D  
 __end_of_Lcd_Write_String 0356           ??_UART_Read_Text 0070           __size_of_Lcd_Cmd 001A  
         __size_of___aldiv 008F         __end_of__stringtab 0013           main@wifi_connect 003C  
                 __ptext10 0319                   __ptext11 02E0                   __ptext12 0356  
                 __ptext13 03A0                   __ptext14 0212                   __ptext15 0237  
                 __ptext16 021D    __end_of_UART_Data_Ready 0202        UART_Write_Text@text 0073  
            __size_of_main 0282                   memset@p1 0076         Lcd_Write_Char@temp 0072  
                stringcode 000D         Lcd_Set_Cursor@temp 007A            _UART_Write_Text 026D  
                 strcmp@s1 0075                   strcmp@s2 0070                   stringdir 000D  
                 stringtab 0003               ___aldiv@sign 0021                 _UART_Write 0208  
         ?_UART_Data_Ready 0070           UART_Write_Text@i 0071  
