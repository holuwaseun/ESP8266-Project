

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Feb 05 12:51:14 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0019                     _TXREG	set	25
   123  001A                     _RCREG	set	26
   124  0065                     _RCIF	set	101
   125  00C4                     _CREN	set	196
   126  00C7                     _SPEN	set	199
   127  0043                     _RD3	set	67
   128  0042                     _RD2	set	66
   129  0047                     _RD7	set	71
   130  0046                     _RD6	set	70
   131  0045                     _RD5	set	69
   132  0044                     _RD4	set	68
   133  0088                     _TRISD	set	136
   134  0099                     _SPBRG	set	153
   135  04C1                     _TRMT	set	1217
   136  04C5                     _TXEN	set	1221
   137  043E                     _TRISC6	set	1086
   138  043F                     _TRISC7	set	1087
   139  04C4                     _SYNC	set	1220
   140  04C2                     _BRGH	set	1218
   141                           
   142                           	psect	strings
   143  0003                     __pstrings:	
   144  0003                     stringtab:	
   145  0003                     __stringtab:	
   146  0003                     stringcode:	
   147                           ;	String table - string pointers are 1 byte each
   148                           
   149  0003                     stringdir:	
   150  0003  3000               	movlw	high stringdir
   151  0004  008A               	movwf	10
   152  0005  0804               	movf	4,w
   153  0006  0A84               	incf	4,f
   154  0007  0782               	addwf	2,f
   155  0008                     __stringbase:	
   156  0008  3400               	retlw	0
   157  0009                     __end_of__stringtab:	
   158  0009                     STR_20:	
   159  0009  3441               	retlw	65	;'A'
   160  000A  3454               	retlw	84	;'T'
   161  000B  342B               	retlw	43	;'+'
   162  000C  3443               	retlw	67	;'C'
   163  000D  3457               	retlw	87	;'W'
   164  000E  344A               	retlw	74	;'J'
   165  000F  3441               	retlw	65	;'A'
   166  0010  3450               	retlw	80	;'P'
   167  0011  343D               	retlw	61	;'='
   168  0012  3427               	retlw	39	;'''
   169  0013  344D               	retlw	77	;'M'
   170  0014  3449               	retlw	73	;'I'
   171  0015  346E               	retlw	110	;'n'
   172  0016  3463               	retlw	99	;'c'
   173  0017  3420               	retlw	32	;' '
   174  0018  344D               	retlw	77	;'M'
   175  0019  346F               	retlw	111	;'o'
   176  001A  3462               	retlw	98	;'b'
   177  001B  3469               	retlw	105	;'i'
   178  001C  346C               	retlw	108	;'l'
   179  001D  3465               	retlw	101	;'e'
   180  001E  3427               	retlw	39	;'''
   181  001F  342C               	retlw	44	;','
   182  0020  3427               	retlw	39	;'''
   183  0021  346F               	retlw	111	;'o'
   184  0022  346C               	retlw	108	;'l'
   185  0023  3475               	retlw	117	;'u'
   186  0024  3477               	retlw	119	;'w'
   187  0025  3461               	retlw	97	;'a'
   188  0026  3473               	retlw	115	;'s'
   189  0027  3465               	retlw	101	;'e'
   190  0028  3475               	retlw	117	;'u'
   191  0029  346E               	retlw	110	;'n'
   192  002A  3427               	retlw	39	;'''
   193  002B  3400               	retlw	0
   194  002C                     STR_25:	
   195  002C  3457               	retlw	87	;'W'
   196  002D  3469               	retlw	105	;'i'
   197  002E  3446               	retlw	70	;'F'
   198  002F  3469               	retlw	105	;'i'
   199  0030  3420               	retlw	32	;' '
   200  0031  3443               	retlw	67	;'C'
   201  0032  346F               	retlw	111	;'o'
   202  0033  346E               	retlw	110	;'n'
   203  0034  346E               	retlw	110	;'n'
   204  0035  3465               	retlw	101	;'e'
   205  0036  3463               	retlw	99	;'c'
   206  0037  3474               	retlw	116	;'t'
   207  0038  3420               	retlw	32	;' '
   208  0039  3446               	retlw	70	;'F'
   209  003A  3461               	retlw	97	;'a'
   210  003B  3469               	retlw	105	;'i'
   211  003C  346C               	retlw	108	;'l'
   212  003D  3400               	retlw	0
   213  003E                     STR_9:	
   214  003E  3445               	retlw	69	;'E'
   215  003F  3453               	retlw	83	;'S'
   216  0040  3450               	retlw	80	;'P'
   217  0041  3420               	retlw	32	;' '
   218  0042  3452               	retlw	82	;'R'
   219  0043  3465               	retlw	101	;'e'
   220  0044  3473               	retlw	115	;'s'
   221  0045  3470               	retlw	112	;'p'
   222  0046  346F               	retlw	111	;'o'
   223  0047  346E               	retlw	110	;'n'
   224  0048  3473               	retlw	115	;'s'
   225  0049  3465               	retlw	101	;'e'
   226  004A  3420               	retlw	32	;' '
   227  004B  3442               	retlw	66	;'B'
   228  004C  3461               	retlw	97	;'a'
   229  004D  3464               	retlw	100	;'d'
   230  004E  3400               	retlw	0
   231  004F                     STR_17:	
   232  004F  344F               	retlw	79	;'O'
   233  0050  3470               	retlw	112	;'p'
   234  0051  3420               	retlw	32	;' '
   235  0052  344D               	retlw	77	;'M'
   236  0053  346F               	retlw	111	;'o'
   237  0054  3464               	retlw	100	;'d'
   238  0055  3465               	retlw	101	;'e'
   239  0056  3420               	retlw	32	;' '
   240  0057  3453               	retlw	83	;'S'
   241  0058  3465               	retlw	101	;'e'
   242  0059  3474               	retlw	116	;'t'
   243  005A  3420               	retlw	32	;' '
   244  005B  3446               	retlw	70	;'F'
   245  005C  3461               	retlw	97	;'a'
   246  005D  3469               	retlw	105	;'i'
   247  005E  346C               	retlw	108	;'l'
   248  005F  3400               	retlw	0
   249  0060                     STR_1:	
   250  0060  3444               	retlw	68	;'D'
   251  0061  3445               	retlw	69	;'E'
   252  0062  3456               	retlw	86	;'V'
   253  0063  3449               	retlw	73	;'I'
   254  0064  3443               	retlw	67	;'C'
   255  0065  3445               	retlw	69	;'E'
   256  0066  343A               	retlw	58	;':'
   257  0067  3420               	retlw	32	;' '
   258  0068  344D               	retlw	77	;'M'
   259  0069  3449               	retlw	73	;'I'
   260  006A  346E               	retlw	110	;'n'
   261  006B  3463               	retlw	99	;'c'
   262  006C  3420               	retlw	32	;' '
   263  006D  3444               	retlw	68	;'D'
   264  006E  3465               	retlw	101	;'e'
   265  006F  3476               	retlw	118	;'v'
   266  0070  3400               	retlw	0
   267  0071                     STR_7:	
   268  0071  3445               	retlw	69	;'E'
   269  0072  3453               	retlw	83	;'S'
   270  0073  3450               	retlw	80	;'P'
   271  0074  3420               	retlw	32	;' '
   272  0075  3452               	retlw	82	;'R'
   273  0076  3465               	retlw	101	;'e'
   274  0077  3473               	retlw	115	;'s'
   275  0078  3470               	retlw	112	;'p'
   276  0079  346F               	retlw	111	;'o'
   277  007A  346E               	retlw	110	;'n'
   278  007B  3473               	retlw	115	;'s'
   279  007C  3465               	retlw	101	;'e'
   280  007D  3420               	retlw	32	;' '
   281  007E  344F               	retlw	79	;'O'
   282  007F  344B               	retlw	75	;'K'
   283  0080  3400               	retlw	0
   284  0081                     STR_23:	
   285  0081  3457               	retlw	87	;'W'
   286  0082  3469               	retlw	105	;'i'
   287  0083  3446               	retlw	70	;'F'
   288  0084  3469               	retlw	105	;'i'
   289  0085  3420               	retlw	32	;' '
   290  0086  3443               	retlw	67	;'C'
   291  0087  346F               	retlw	111	;'o'
   292  0088  346E               	retlw	110	;'n'
   293  0089  346E               	retlw	110	;'n'
   294  008A  3465               	retlw	101	;'e'
   295  008B  3463               	retlw	99	;'c'
   296  008C  3474               	retlw	116	;'t'
   297  008D  3420               	retlw	32	;' '
   298  008E  344F               	retlw	79	;'O'
   299  008F  344B               	retlw	75	;'K'
   300  0090  3400               	retlw	0
   301  0091                     STR_3:	
   302  0091  3453               	retlw	83	;'S'
   303  0092  3465               	retlw	101	;'e'
   304  0093  346E               	retlw	110	;'n'
   305  0094  3464               	retlw	100	;'d'
   306  0095  3420               	retlw	32	;' '
   307  0096  3441               	retlw	65	;'A'
   308  0097  3454               	retlw	84	;'T'
   309  0098  3420               	retlw	32	;' '
   310  0099  3443               	retlw	67	;'C'
   311  009A  346F               	retlw	111	;'o'
   312  009B  346D               	retlw	109	;'m'
   313  009C  346D               	retlw	109	;'m'
   314  009D  3461               	retlw	97	;'a'
   315  009E  346E               	retlw	110	;'n'
   316  009F  3464               	retlw	100	;'d'
   317  00A0  3400               	retlw	0
   318  00A1                     STR_2:	
   319  00A1  3453               	retlw	83	;'S'
   320  00A2  3454               	retlw	84	;'T'
   321  00A3  3441               	retlw	65	;'A'
   322  00A4  3454               	retlw	84	;'T'
   323  00A5  3455               	retlw	85	;'U'
   324  00A6  3453               	retlw	83	;'S'
   325  00A7  343A               	retlw	58	;':'
   326  00A8  3420               	retlw	32	;' '
   327  00A9  344F               	retlw	79	;'O'
   328  00AA  3466               	retlw	102	;'f'
   329  00AB  3466               	retlw	102	;'f'
   330  00AC  346C               	retlw	108	;'l'
   331  00AD  3469               	retlw	105	;'i'
   332  00AE  346E               	retlw	110	;'n'
   333  00AF  3465               	retlw	101	;'e'
   334  00B0  3400               	retlw	0
   335  00B1                     STR_19:	
   336  00B1  3457               	retlw	87	;'W'
   337  00B2  3469               	retlw	105	;'i'
   338  00B3  3446               	retlw	70	;'F'
   339  00B4  3469               	retlw	105	;'i'
   340  00B5  3420               	retlw	32	;' '
   341  00B6  3443               	retlw	67	;'C'
   342  00B7  346F               	retlw	111	;'o'
   343  00B8  346E               	retlw	110	;'n'
   344  00B9  346E               	retlw	110	;'n'
   345  00BA  3465               	retlw	101	;'e'
   346  00BB  3463               	retlw	99	;'c'
   347  00BC  3474               	retlw	116	;'t'
   348  00BD  3469               	retlw	105	;'i'
   349  00BE  346F               	retlw	111	;'o'
   350  00BF  346E               	retlw	110	;'n'
   351  00C0  3400               	retlw	0
   352  00C1                     STR_15:	
   353  00C1  344F               	retlw	79	;'O'
   354  00C2  3470               	retlw	112	;'p'
   355  00C3  3420               	retlw	32	;' '
   356  00C4  344D               	retlw	77	;'M'
   357  00C5  346F               	retlw	111	;'o'
   358  00C6  3464               	retlw	100	;'d'
   359  00C7  3465               	retlw	101	;'e'
   360  00C8  3420               	retlw	32	;' '
   361  00C9  3453               	retlw	83	;'S'
   362  00CA  3465               	retlw	101	;'e'
   363  00CB  3474               	retlw	116	;'t'
   364  00CC  3420               	retlw	32	;' '
   365  00CD  344F               	retlw	79	;'O'
   366  00CE  344B               	retlw	75	;'K'
   367  00CF  3400               	retlw	0
   368  00D0                     STR_11:	
   369  00D0  3453               	retlw	83	;'S'
   370  00D1  3465               	retlw	101	;'e'
   371  00D2  3474               	retlw	116	;'t'
   372  00D3  3420               	retlw	32	;' '
   373  00D4  344F               	retlw	79	;'O'
   374  00D5  3470               	retlw	112	;'p'
   375  00D6  342E               	retlw	46	;'.'
   376  00D7  3420               	retlw	32	;' '
   377  00D8  344D               	retlw	77	;'M'
   378  00D9  346F               	retlw	111	;'o'
   379  00DA  3464               	retlw	100	;'d'
   380  00DB  3465               	retlw	101	;'e'
   381  00DC  3400               	retlw	0
   382  00DD                     STR_12:	
   383  00DD  3441               	retlw	65	;'A'
   384  00DE  3454               	retlw	84	;'T'
   385  00DF  342B               	retlw	43	;'+'
   386  00E0  3443               	retlw	67	;'C'
   387  00E1  3457               	retlw	87	;'W'
   388  00E2  344D               	retlw	77	;'M'
   389  00E3  344F               	retlw	79	;'O'
   390  00E4  3444               	retlw	68	;'D'
   391  00E5  3445               	retlw	69	;'E'
   392  00E6  343D               	retlw	61	;'='
   393  00E7  3433               	retlw	51	;'3'
   394  00E8  3400               	retlw	0
   395  00E9                     STR_5:	
   396  00E9  340A               	retlw	10
   397  00EA  340D               	retlw	13
   398  00EB  3400               	retlw	0
   399  00EC                     STR_4:	
   400  00EC  3441               	retlw	65	;'A'
   401  00ED  3454               	retlw	84	;'T'
   402  00EE  3400               	retlw	0
   403  00E9                     
   404                           ; #config settings
   405  0000                     
   406                           	psect	cinit
   407  07F4                     start_initialization:	
   408  07F4                     __initialization:	
   409                           
   410                           ; Clear objects allocated to BANK0
   411  07F4  01BA               	clrf	__pbssBANK0& (0+127)
   412  07F5  01BB               	clrf	(__pbssBANK0+1)& (0+127)
   413  07F6  01BC               	clrf	(__pbssBANK0+2)& (0+127)
   414  07F7  01BD               	clrf	(__pbssBANK0+3)& (0+127)
   415  07F8  01BE               	clrf	(__pbssBANK0+4)& (0+127)
   416  07F9  01BF               	clrf	(__pbssBANK0+5)& (0+127)
   417  07FA  01C0               	clrf	(__pbssBANK0+6)& (0+127)
   418  07FB  01C1               	clrf	(__pbssBANK0+7)& (0+127)
   419  07FC                     end_of_initialization:	
   420                           ;End of C runtime variable initialization code
   421                           
   422  07FC                     __end_of__initialization:	
   423  07FC  0183               	clrf	3
   424  07FD  120A  118A  2DCA   	ljmp	_main	;jump to C main() function
   425                           
   426                           	psect	bssBANK0
   427  003A                     __pbssBANK0:	
   428  003A                     _ESP_Response:	
   429  003A                     	ds	8
   430                           
   431                           	psect	cstackCOMMON
   432  0070                     __pcstackCOMMON:	
   433  0070                     ?_memset:	
   434  0070                     ?_Lcd_Port:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ??_Lcd_Port:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_Lcd_Cmd:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_Lcd_Clear:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_Lcd_Init:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_Lcd_Write_Char:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_Lcd_Write_String:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_UART_Data_Ready:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_UART_Data_Ready:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_UART_Read:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_UART_Read:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_UART_Read_Text:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_UART_Read_Text:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_UART_Write:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ??_UART_Write:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_UART_Write_Text:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_main:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_strcmp:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?___aldiv:	
   489                           ; 2 bytes @ 0x0
   490                           
   491  0070                     Lcd_Port@a:	
   492                           ; 4 bytes @ 0x0
   493                           
   494  0070                     UART_Write@data:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     strcmp@s2:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     memset@c:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ___aldiv@divisor:	
   504                           ; 2 bytes @ 0x0
   505                           
   506                           
   507                           ; 4 bytes @ 0x0
   508  0070                     	ds	1
   509  0071                     ??_Lcd_Cmd:	
   510  0071                     ??_Lcd_Write_Char:	
   511                           ; 1 bytes @ 0x1
   512                           
   513  0071                     ??_UART_Write_Text:	
   514                           ; 1 bytes @ 0x1
   515                           
   516  0071                     UART_Write_Text@i:	
   517                           ; 1 bytes @ 0x1
   518                           
   519                           
   520                           ; 2 bytes @ 0x1
   521  0071                     	ds	1
   522  0072                     ??_strcmp:	
   523  0072                     Lcd_Write_Char@temp:	
   524                           ; 1 bytes @ 0x2
   525                           
   526  0072                     UART_Read_Text@rec_data:	
   527                           ; 1 bytes @ 0x2
   528                           
   529  0072                     memset@n:	
   530                           ; 1 bytes @ 0x2
   531                           
   532                           
   533                           ; 2 bytes @ 0x2
   534  0072                     	ds	1
   535  0073                     Lcd_Cmd@a:	
   536  0073                     Lcd_Write_Char@y:	
   537                           ; 1 bytes @ 0x3
   538                           
   539  0073                     UART_Read_Text@buffer:	
   540                           ; 1 bytes @ 0x3
   541                           
   542  0073                     UART_Write_Text@text:	
   543                           ; 1 bytes @ 0x3
   544                           
   545                           
   546                           ; 1 bytes @ 0x3
   547  0073                     	ds	1
   548  0074                     ??_memset:	
   549  0074                     ??_Lcd_Clear:	
   550                           ; 1 bytes @ 0x4
   551                           
   552  0074                     ?_Lcd_Set_Cursor:	
   553                           ; 1 bytes @ 0x4
   554                           
   555  0074                     ??_Lcd_Init:	
   556                           ; 1 bytes @ 0x4
   557                           
   558  0074                     Lcd_Set_Cursor@b:	
   559                           ; 1 bytes @ 0x4
   560                           
   561  0074                     Lcd_Write_Char@a:	
   562                           ; 1 bytes @ 0x4
   563                           
   564  0074                     strcmp@r:	
   565                           ; 1 bytes @ 0x4
   566                           
   567  0074                     UART_Read_Text@i:	
   568                           ; 1 bytes @ 0x4
   569                           
   570  0074                     ___aldiv@dividend:	
   571                           ; 2 bytes @ 0x4
   572                           
   573                           
   574                           ; 4 bytes @ 0x4
   575  0074                     	ds	1
   576  0075                     ??_Lcd_Set_Cursor:	
   577  0075                     ??_Lcd_Write_String:	
   578                           ; 1 bytes @ 0x5
   579                           
   580  0075                     memset@p:	
   581                           ; 1 bytes @ 0x5
   582                           
   583  0075                     strcmp@s1:	
   584                           ; 1 bytes @ 0x5
   585                           
   586  0075                     Lcd_Write_String@i:	
   587                           ; 1 bytes @ 0x5
   588                           
   589                           
   590                           ; 2 bytes @ 0x5
   591  0075                     	ds	1
   592  0076                     memset@p1:	
   593                           
   594                           ; 1 bytes @ 0x6
   595  0076                     	ds	1
   596  0077                     Lcd_Set_Cursor@a:	
   597  0077                     Lcd_Write_String@a:	
   598                           ; 1 bytes @ 0x7
   599                           
   600                           
   601                           ; 1 bytes @ 0x7
   602  0077                     	ds	1
   603  0078                     ??___aldiv:	
   604  0078                     Lcd_Set_Cursor@z:	
   605                           ; 1 bytes @ 0x8
   606                           
   607                           
   608                           ; 1 bytes @ 0x8
   609  0078                     	ds	1
   610  0079                     Lcd_Set_Cursor@y:	
   611  0079                     UART_Init@x:	
   612                           ; 1 bytes @ 0x9
   613                           
   614                           
   615                           ; 2 bytes @ 0x9
   616  0079                     	ds	1
   617  007A                     Lcd_Set_Cursor@temp:	
   618                           
   619                           ; 1 bytes @ 0xA
   620  007A                     	ds	1
   621  007B                     ??_main:	
   622                           
   623                           ; 1 bytes @ 0xB
   624  007B                     	ds	3
   625                           
   626                           	psect	cstackBANK0
   627  0020                     __pcstackBANK0:	
   628  0020                     ___aldiv@counter:	
   629                           
   630                           ; 1 bytes @ 0x0
   631  0020                     	ds	1
   632  0021                     ___aldiv@sign:	
   633                           
   634                           ; 1 bytes @ 0x1
   635  0021                     	ds	1
   636  0022                     ___aldiv@quotient:	
   637                           
   638                           ; 4 bytes @ 0x2
   639  0022                     	ds	4
   640  0026                     ?_UART_Init:	
   641  0026                     UART_Init@baudrate:	
   642                           ; 1 bytes @ 0x6
   643                           
   644                           
   645                           ; 4 bytes @ 0x6
   646  0026                     	ds	4
   647  002A                     ??_UART_Init:	
   648                           
   649                           ; 1 bytes @ 0xA
   650  002A                     	ds	12
   651  0036                     main@device_status:	
   652                           
   653                           ; 1 bytes @ 0x16
   654  0036                     	ds	1
   655  0037                     main@esp_ok:	
   656                           
   657                           ; 1 bytes @ 0x17
   658  0037                     	ds	1
   659  0038                     main@op_mode:	
   660                           
   661                           ; 1 bytes @ 0x18
   662  0038                     	ds	1
   663  0039                     main@wifi_connect:	
   664                           
   665                           ; 1 bytes @ 0x19
   666  0039                     	ds	1
   667                           
   668                           	psect	maintext
   669  05CA                     __pmaintext:	
   670 ;;
   671 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   672 ;;
   673 ;; *************** function _main *****************
   674 ;; Defined at:
   675 ;;		line 48 in file "main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  wifi_connect    1   25[BANK0 ] unsigned char 
   680 ;;  op_mode         1   24[BANK0 ] unsigned char 
   681 ;;  esp_ok          1   23[BANK0 ] unsigned char 
   682 ;;  device_statu    1   22[BANK0 ] unsigned char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   687 ;; Tracked objects:
   688 ;;		On entry : B00/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   692 ;;      Params:         0       0       0       0       0
   693 ;;      Locals:         0       4       0       0       0
   694 ;;      Temps:          3       0       0       0       0
   695 ;;      Totals:         3       4       0       0       0
   696 ;;Total ram usage:        7 bytes
   697 ;; Hardware stack levels required when called:    3
   698 ;; This function calls:
   699 ;;		_Lcd_Clear
   700 ;;		_Lcd_Init
   701 ;;		_Lcd_Set_Cursor
   702 ;;		_Lcd_Write_String
   703 ;;		_UART_Data_Ready
   704 ;;		_UART_Init
   705 ;;		_UART_Read_Text
   706 ;;		_UART_Write_Text
   707 ;;		_memset
   708 ;;		_strcmp
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           
   715                           ;psect for function _main
   716  05CA                     _main:	
   717                           
   718                           ;main.c: 50: unsigned char esp_ok = 0, op_mode = 0, wifi_connect = 0, device_status = 0;
   719                           
   720                           ;incstack = 0
   721                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   722  05CA  1283               	bcf	3,5	;RP0=0, select bank0
   723  05CB  1303               	bcf	3,6	;RP1=0, select bank0
   724  05CC  01B7               	clrf	main@esp_ok
   725  05CD  01B8               	clrf	main@op_mode
   726  05CE  01B9               	clrf	main@wifi_connect
   727  05CF  01B6               	clrf	main@device_status
   728                           
   729                           ;main.c: 51: TRISD = 0x00;
   730  05D0  1683               	bsf	3,5	;RP0=1, select bank1
   731  05D1  1303               	bcf	3,6	;RP1=0, select bank1
   732  05D2  0188               	clrf	8	;volatile
   733                           
   734                           ;main.c: 52: Lcd_Init();
   735  05D3  120A  118A  23F7  120A  118A  	fcall	_Lcd_Init
   736                           
   737                           ;main.c: 53: _delay((unsigned long)((100)*(20000000/4000.0)));
   738  05D8  3003               	movlw	3
   739  05D9  00FD               	movwf	??_main+2
   740  05DA  308A               	movlw	138
   741  05DB  00FC               	movwf	??_main+1
   742  05DC  3055               	movlw	85
   743  05DD  00FB               	movwf	??_main
   744  05DE                     u957:	
   745  05DE  0BFB               	decfsz	??_main,f
   746  05DF  2DDE               	goto	u957
   747  05E0  0BFC               	decfsz	??_main+1,f
   748  05E1  2DDE               	goto	u957
   749  05E2  0BFD               	decfsz	??_main+2,f
   750  05E3  2DDE               	goto	u957
   751  05E4  2DE5               	nop2
   752                           
   753                           ;main.c: 54: UART_Init(9600);
   754  05E5  3000               	movlw	0
   755  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   756  05E7  1303               	bcf	3,6	;RP1=0, select bank0
   757  05E8  00A9               	movwf	UART_Init@baudrate+3
   758  05E9  3000               	movlw	0
   759  05EA  00A8               	movwf	UART_Init@baudrate+2
   760  05EB  3025               	movlw	37
   761  05EC  00A7               	movwf	UART_Init@baudrate+1
   762  05ED  3080               	movlw	128
   763  05EE  00A6               	movwf	UART_Init@baudrate
   764  05EF  120A  118A  24E2  120A  118A  	fcall	_UART_Init
   765                           
   766                           ;main.c: 55: _delay((unsigned long)((100)*(20000000/4000.0)));
   767  05F4  3003               	movlw	3
   768  05F5  00FD               	movwf	??_main+2
   769  05F6  308A               	movlw	138
   770  05F7  00FC               	movwf	??_main+1
   771  05F8  3055               	movlw	85
   772  05F9  00FB               	movwf	??_main
   773  05FA                     u967:	
   774  05FA  0BFB               	decfsz	??_main,f
   775  05FB  2DFA               	goto	u967
   776  05FC  0BFC               	decfsz	??_main+1,f
   777  05FD  2DFA               	goto	u967
   778  05FE  0BFD               	decfsz	??_main+2,f
   779  05FF  2DFA               	goto	u967
   780  0600  2E01               	nop2
   781                           
   782                           ;main.c: 57: Lcd_Clear();
   783  0601  120A  118A  2284  120A  118A  	fcall	_Lcd_Clear
   784                           
   785                           ;main.c: 58: Lcd_Set_Cursor(1,1);
   786  0606  01F4               	clrf	Lcd_Set_Cursor@b
   787  0607  0AF4               	incf	Lcd_Set_Cursor@b,f
   788  0608  3001               	movlw	1
   789  0609  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
   790                           
   791                           ;main.c: 59: Lcd_Write_String("DEVICE: MInc Dev");
   792  060E  3058               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   793  060F  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
   794                           
   795                           ;main.c: 60: Lcd_Set_Cursor(2,1);
   796  0614  01F4               	clrf	Lcd_Set_Cursor@b
   797  0615  0AF4               	incf	Lcd_Set_Cursor@b,f
   798  0616  3002               	movlw	2
   799  0617  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
   800                           
   801                           ;main.c: 61: Lcd_Write_String("STATUS: Offline");
   802  061C  3099               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   803  061D  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
   804                           
   805                           ;main.c: 62: _delay((unsigned long)((2500)*(20000000/4000.0)));
   806  0622  3040               	movlw	64
   807  0623  00FD               	movwf	??_main+2
   808  0624  306A               	movlw	106
   809  0625  00FC               	movwf	??_main+1
   810  0626  3097               	movlw	151
   811  0627  00FB               	movwf	??_main
   812  0628                     u977:	
   813  0628  0BFB               	decfsz	??_main,f
   814  0629  2E28               	goto	u977
   815  062A  0BFC               	decfsz	??_main+1,f
   816  062B  2E28               	goto	u977
   817  062C  0BFD               	decfsz	??_main+2,f
   818  062D  2E28               	goto	u977
   819  062E  2E2F               	nop2
   820  062F                     l1202:	
   821                           ;main.c: 65: {
   822                           ;main.c: 67: while(!esp_ok)
   823                           
   824                           ;main.c: 64: while(1)
   825                           
   826  062F  1283               	bcf	3,5	;RP0=0, select bank0
   827  0630  1303               	bcf	3,6	;RP1=0, select bank0
   828  0631  0837               	movf	main@esp_ok,w
   829  0632  1D03               	btfss	3,2
   830  0633  2F57               	goto	l1236
   831                           
   832                           ;main.c: 68: {
   833                           ;main.c: 69: Lcd_Clear();
   834  0634  120A  118A  2284  120A  118A  	fcall	_Lcd_Clear
   835                           
   836                           ;main.c: 70: Lcd_Set_Cursor(1,1);
   837  0639  01F4               	clrf	Lcd_Set_Cursor@b
   838  063A  0AF4               	incf	Lcd_Set_Cursor@b,f
   839  063B  3001               	movlw	1
   840  063C  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
   841                           
   842                           ;main.c: 71: Lcd_Write_String("Send AT Command");
   843  0641  3089               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   844  0642  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
   845                           
   846                           ;main.c: 72: _delay((unsigned long)((100)*(20000000/4000.0)));
   847  0647  3003               	movlw	3
   848  0648  00FD               	movwf	??_main+2
   849  0649  308A               	movlw	138
   850  064A  00FC               	movwf	??_main+1
   851  064B  3055               	movlw	85
   852  064C  00FB               	movwf	??_main
   853  064D                     u987:	
   854  064D  0BFB               	decfsz	??_main,f
   855  064E  2E4D               	goto	u987
   856  064F  0BFC               	decfsz	??_main+1,f
   857  0650  2E4D               	goto	u987
   858  0651  0BFD               	decfsz	??_main+2,f
   859  0652  2E4D               	goto	u987
   860  0653  2E54               	nop2
   861                           
   862                           ;main.c: 73: UART_Write_Text("AT");
   863  0654  30E4               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   864  0655  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
   865                           
   866                           ;main.c: 74: UART_Write_Text("\n\r");
   867  065A  30E1               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   868  065B  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
   869  0660                     l1180:	
   870                           ;main.c: 76: while(!UART_Data_Ready());
   871                           
   872  0660  120A  118A  226E  120A  118A  	fcall	_UART_Data_Ready
   873  0665  3A00               	xorlw	0
   874  0666  1903               	skipnz
   875  0667  2E60               	goto	l1180
   876                           
   877                           ;main.c: 78: if(UART_Data_Ready())
   878  0668  120A  118A  226E  120A  118A  	fcall	_UART_Data_Ready
   879  066D  3A00               	xorlw	0
   880  066E  1903               	skipnz
   881  066F  2E2F               	goto	l1202
   882                           
   883                           ;main.c: 79: {
   884                           ;main.c: 80: memset(ESP_Response, 0, sizeof(ESP_Response));
   885  0670  3000               	movlw	0
   886  0671  00F0               	movwf	memset@c
   887  0672  00F1               	movwf	memset@c+1
   888  0673  3008               	movlw	8
   889  0674  00F2               	movwf	memset@n
   890  0675  3000               	movlw	0
   891  0676  00F3               	movwf	memset@n+1
   892  0677  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
   893  0678  120A  118A  22C3  120A  118A  	fcall	_memset
   894                           
   895                           ;main.c: 81: UART_Read_Text(ESP_Response);
   896  067D  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
   897  067E  120A  118A  2323  120A  118A  	fcall	_UART_Read_Text
   898                           
   899                           ;main.c: 82: _delay((unsigned long)((1000)*(20000000/4000.0)));
   900  0683  301A               	movlw	26
   901  0684  00FD               	movwf	??_main+2
   902  0685  305E               	movlw	94
   903  0686  00FC               	movwf	??_main+1
   904  0687  306E               	movlw	110
   905  0688  00FB               	movwf	??_main
   906  0689                     u997:	
   907  0689  0BFB               	decfsz	??_main,f
   908  068A  2E89               	goto	u997
   909  068B  0BFC               	decfsz	??_main+1,f
   910  068C  2E89               	goto	u997
   911  068D  0BFD               	decfsz	??_main+2,f
   912  068E  2E89               	goto	u997
   913  068F  0000               	nop
   914                           
   915                           ;main.c: 83: Lcd_Set_Cursor(2,1);
   916  0690  01F4               	clrf	Lcd_Set_Cursor@b
   917  0691  0AF4               	incf	Lcd_Set_Cursor@b,f
   918  0692  3002               	movlw	2
   919  0693  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
   920                           
   921                           ;main.c: 84: if(strcmp(ESP_Response, "OK") == 0)
   922  0698  3076               	movlw	(low (((STR_7+13)-__stringbase)| (0+32768)))& (0+255)
   923  0699  00FB               	movwf	??_main
   924  069A  087B               	movf	??_main,w
   925  069B  00F0               	movwf	strcmp@s2
   926  069C  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
   927  069D  120A  118A  234A  120A  118A  	fcall	_strcmp
   928  06A2  0870               	movf	?_strcmp,w
   929  06A3  0471               	iorwf	?_strcmp+1,w
   930  06A4  1D03               	btfss	3,2
   931  06A5  2EAC               	goto	l1198
   932                           
   933                           ;main.c: 85: {
   934                           ;main.c: 86: esp_ok = 1;
   935  06A6  1283               	bcf	3,5	;RP0=0, select bank0
   936  06A7  1303               	bcf	3,6	;RP1=0, select bank0
   937  06A8  01B7               	clrf	main@esp_ok
   938  06A9  0AB7               	incf	main@esp_ok,f
   939                           
   940                           ;main.c: 87: Lcd_Write_String("ESP Response OK");
   941  06AA  3069               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   942  06AB  2EAD               	goto	L1
   943  06AC                     l1198:	
   944                           ;main.c: 89: }
   945                           
   946                           ;main.c: 88: UART_Write_Text("\n\r");
   947                           
   948                           
   949                           ;main.c: 90: else
   950                           ;main.c: 91: {
   951                           ;main.c: 92: Lcd_Write_String("ESP Response Bad");
   952  06AC  3036               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   953  06AD                     L1:	
   954  06AD  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
   955                           
   956                           ;main.c: 93: UART_Write_Text("\n\r");
   957  06B2  30E1               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   958  06B3  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
   959                           
   960                           ;main.c: 94: }
   961                           ;main.c: 95: _delay((unsigned long)((1500)*(20000000/4000.0)));
   962  06B8  3027               	movlw	39
   963  06B9  00FD               	movwf	??_main+2
   964  06BA  300D               	movlw	13
   965  06BB  00FC               	movwf	??_main+1
   966  06BC  3026               	movlw	38
   967  06BD  00FB               	movwf	??_main
   968  06BE                     u1007:	
   969  06BE  0BFB               	decfsz	??_main,f
   970  06BF  2EBE               	goto	u1007
   971  06C0  0BFC               	decfsz	??_main+1,f
   972  06C1  2EBE               	goto	u1007
   973  06C2  0BFD               	decfsz	??_main+2,f
   974  06C3  2EBE               	goto	u1007
   975  06C4  0000               	nop
   976  06C5  2E2F               	goto	l1202
   977  06C6                     l1204:	
   978                           ;main.c: 96: }
   979                           ;main.c: 97: }
   980                           ;main.c: 100: while(!op_mode)
   981                           
   982                           
   983                           ;main.c: 101: {
   984                           ;main.c: 102: Lcd_Clear();
   985  06C6  120A  118A  2284  120A  118A  	fcall	_Lcd_Clear
   986                           
   987                           ;main.c: 103: Lcd_Set_Cursor(1,1);
   988  06CB  01F4               	clrf	Lcd_Set_Cursor@b
   989  06CC  0AF4               	incf	Lcd_Set_Cursor@b,f
   990  06CD  3001               	movlw	1
   991  06CE  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
   992                           
   993                           ;main.c: 104: Lcd_Write_String("Set Op. Mode");
   994  06D3  30C8               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
   995  06D4  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
   996                           
   997                           ;main.c: 105: _delay((unsigned long)((100)*(20000000/4000.0)));
   998  06D9  3003               	movlw	3
   999  06DA  00FD               	movwf	??_main+2
  1000  06DB  308A               	movlw	138
  1001  06DC  00FC               	movwf	??_main+1
  1002  06DD  3055               	movlw	85
  1003  06DE  00FB               	movwf	??_main
  1004  06DF                     u1017:	
  1005  06DF  0BFB               	decfsz	??_main,f
  1006  06E0  2EDF               	goto	u1017
  1007  06E1  0BFC               	decfsz	??_main+1,f
  1008  06E2  2EDF               	goto	u1017
  1009  06E3  0BFD               	decfsz	??_main+2,f
  1010  06E4  2EDF               	goto	u1017
  1011  06E5  2EE6               	nop2
  1012                           
  1013                           ;main.c: 106: UART_Write_Text("AT+CWMODE=3");
  1014  06E6  30D5               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1015  06E7  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
  1016                           
  1017                           ;main.c: 107: UART_Write_Text("\n\r");
  1018  06EC  30E1               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1019  06ED  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
  1020  06F2                     l1214:	
  1021                           ;main.c: 109: while(!UART_Data_Ready());
  1022                           
  1023  06F2  120A  118A  226E  120A  118A  	fcall	_UART_Data_Ready
  1024  06F7  3A00               	xorlw	0
  1025  06F8  1903               	skipnz
  1026  06F9  2EF2               	goto	l1214
  1027                           
  1028                           ;main.c: 111: if(UART_Data_Ready())
  1029  06FA  120A  118A  226E  120A  118A  	fcall	_UART_Data_Ready
  1030  06FF  3A00               	xorlw	0
  1031  0700  1903               	skipnz
  1032  0701  2F57               	goto	l1236
  1033                           
  1034                           ;main.c: 112: {
  1035                           ;main.c: 113: memset(ESP_Response, 0, sizeof(ESP_Response));
  1036  0702  3000               	movlw	0
  1037  0703  00F0               	movwf	memset@c
  1038  0704  00F1               	movwf	memset@c+1
  1039  0705  3008               	movlw	8
  1040  0706  00F2               	movwf	memset@n
  1041  0707  3000               	movlw	0
  1042  0708  00F3               	movwf	memset@n+1
  1043  0709  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
  1044  070A  120A  118A  22C3  120A  118A  	fcall	_memset
  1045                           
  1046                           ;main.c: 114: UART_Read_Text(ESP_Response);
  1047  070F  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
  1048  0710  120A  118A  2323  120A  118A  	fcall	_UART_Read_Text
  1049                           
  1050                           ;main.c: 115: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1051  0715  301A               	movlw	26
  1052  0716  00FD               	movwf	??_main+2
  1053  0717  305E               	movlw	94
  1054  0718  00FC               	movwf	??_main+1
  1055  0719  306E               	movlw	110
  1056  071A  00FB               	movwf	??_main
  1057  071B                     u1027:	
  1058  071B  0BFB               	decfsz	??_main,f
  1059  071C  2F1B               	goto	u1027
  1060  071D  0BFC               	decfsz	??_main+1,f
  1061  071E  2F1B               	goto	u1027
  1062  071F  0BFD               	decfsz	??_main+2,f
  1063  0720  2F1B               	goto	u1027
  1064  0721  0000               	nop
  1065                           
  1066                           ;main.c: 116: Lcd_Set_Cursor(2,1);
  1067  0722  01F4               	clrf	Lcd_Set_Cursor@b
  1068  0723  0AF4               	incf	Lcd_Set_Cursor@b,f
  1069  0724  3002               	movlw	2
  1070  0725  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
  1071                           
  1072                           ;main.c: 117: if(strcmp(ESP_Response, "OK") == 0)
  1073  072A  3076               	movlw	(low (((STR_7+13)-__stringbase)| (0+32768)))& (0+255)
  1074  072B  00FB               	movwf	??_main
  1075  072C  087B               	movf	??_main,w
  1076  072D  00F0               	movwf	strcmp@s2
  1077  072E  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
  1078  072F  120A  118A  234A  120A  118A  	fcall	_strcmp
  1079  0734  0870               	movf	?_strcmp,w
  1080  0735  0471               	iorwf	?_strcmp+1,w
  1081  0736  1D03               	btfss	3,2
  1082  0737  2F3E               	goto	l1232
  1083                           
  1084                           ;main.c: 118: {
  1085                           ;main.c: 119: op_mode = 1;
  1086  0738  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0739  1303               	bcf	3,6	;RP1=0, select bank0
  1088  073A  01B8               	clrf	main@op_mode
  1089  073B  0AB8               	incf	main@op_mode,f
  1090                           
  1091                           ;main.c: 120: Lcd_Write_String("Op Mode Set OK");
  1092  073C  30B9               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1093  073D  2F3F               	goto	L2
  1094  073E                     l1232:	
  1095                           ;main.c: 122: }
  1096                           
  1097                           ;main.c: 121: UART_Write_Text("\n\r");
  1098                           
  1099                           
  1100                           ;main.c: 123: else
  1101                           ;main.c: 124: {
  1102                           ;main.c: 125: Lcd_Write_String("Op Mode Set Fail");
  1103  073E  3047               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1104  073F                     L2:	
  1105  073F  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
  1106                           
  1107                           ;main.c: 126: UART_Write_Text("\n\r");
  1108  0744  30E1               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1109  0745  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
  1110                           
  1111                           ;main.c: 127: }
  1112                           ;main.c: 128: _delay((unsigned long)((1500)*(20000000/4000.0)));
  1113  074A  3027               	movlw	39
  1114  074B  00FD               	movwf	??_main+2
  1115  074C  300D               	movlw	13
  1116  074D  00FC               	movwf	??_main+1
  1117  074E  3026               	movlw	38
  1118  074F  00FB               	movwf	??_main
  1119  0750                     u1037:	
  1120  0750  0BFB               	decfsz	??_main,f
  1121  0751  2F50               	goto	u1037
  1122  0752  0BFC               	decfsz	??_main+1,f
  1123  0753  2F50               	goto	u1037
  1124  0754  0BFD               	decfsz	??_main+2,f
  1125  0755  2F50               	goto	u1037
  1126  0756  0000               	nop
  1127  0757                     l1236:	
  1128  0757  1283               	bcf	3,5	;RP0=0, select bank0
  1129  0758  1303               	bcf	3,6	;RP1=0, select bank0
  1130  0759  0838               	movf	main@op_mode,w
  1131  075A  1D03               	btfss	3,2
  1132  075B  2FEE               	goto	l1270
  1133  075C  2EC6               	goto	l1204
  1134  075D                     l1238:	
  1135                           ;main.c: 129: }
  1136                           ;main.c: 130: }
  1137                           ;main.c: 133: while(!wifi_connect)
  1138                           
  1139                           
  1140                           ;main.c: 134: {
  1141                           ;main.c: 135: Lcd_Clear();
  1142  075D  120A  118A  2284  120A  118A  	fcall	_Lcd_Clear
  1143                           
  1144                           ;main.c: 136: Lcd_Set_Cursor(1,1);
  1145  0762  01F4               	clrf	Lcd_Set_Cursor@b
  1146  0763  0AF4               	incf	Lcd_Set_Cursor@b,f
  1147  0764  3001               	movlw	1
  1148  0765  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
  1149                           
  1150                           ;main.c: 137: Lcd_Write_String("WiFi Connection");
  1151  076A  30A9               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  1152  076B  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
  1153                           
  1154                           ;main.c: 138: _delay((unsigned long)((100)*(20000000/4000.0)));
  1155  0770  3003               	movlw	3
  1156  0771  00FD               	movwf	??_main+2
  1157  0772  308A               	movlw	138
  1158  0773  00FC               	movwf	??_main+1
  1159  0774  3055               	movlw	85
  1160  0775  00FB               	movwf	??_main
  1161  0776                     u1047:	
  1162  0776  0BFB               	decfsz	??_main,f
  1163  0777  2F76               	goto	u1047
  1164  0778  0BFC               	decfsz	??_main+1,f
  1165  0779  2F76               	goto	u1047
  1166  077A  0BFD               	decfsz	??_main+2,f
  1167  077B  2F76               	goto	u1047
  1168  077C  2F7D               	nop2
  1169                           
  1170                           ;main.c: 139: UART_Write_Text("AT+CWJAP='MInc Mobile','oluwaseun'");
  1171  077D  3001               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  1172  077E  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
  1173                           
  1174                           ;main.c: 140: UART_Write_Text("\n\r");
  1175  0783  30E1               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1176  0784  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
  1177  0789                     l1248:	
  1178                           ;main.c: 142: while(!UART_Data_Ready());
  1179                           
  1180  0789  120A  118A  226E  120A  118A  	fcall	_UART_Data_Ready
  1181  078E  3A00               	xorlw	0
  1182  078F  1903               	skipnz
  1183  0790  2F89               	goto	l1248
  1184                           
  1185                           ;main.c: 144: if(UART_Data_Ready())
  1186  0791  120A  118A  226E  120A  118A  	fcall	_UART_Data_Ready
  1187  0796  3A00               	xorlw	0
  1188  0797  1903               	skipnz
  1189  0798  2FEE               	goto	l1270
  1190                           
  1191                           ;main.c: 145: {
  1192                           ;main.c: 146: memset(ESP_Response, 0, sizeof(ESP_Response));
  1193  0799  3000               	movlw	0
  1194  079A  00F0               	movwf	memset@c
  1195  079B  00F1               	movwf	memset@c+1
  1196  079C  3008               	movlw	8
  1197  079D  00F2               	movwf	memset@n
  1198  079E  3000               	movlw	0
  1199  079F  00F3               	movwf	memset@n+1
  1200  07A0  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
  1201  07A1  120A  118A  22C3  120A  118A  	fcall	_memset
  1202                           
  1203                           ;main.c: 147: UART_Read_Text(ESP_Response);
  1204  07A6  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
  1205  07A7  120A  118A  2323  120A  118A  	fcall	_UART_Read_Text
  1206                           
  1207                           ;main.c: 148: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1208  07AC  301A               	movlw	26
  1209  07AD  00FD               	movwf	??_main+2
  1210  07AE  305E               	movlw	94
  1211  07AF  00FC               	movwf	??_main+1
  1212  07B0  306E               	movlw	110
  1213  07B1  00FB               	movwf	??_main
  1214  07B2                     u1057:	
  1215  07B2  0BFB               	decfsz	??_main,f
  1216  07B3  2FB2               	goto	u1057
  1217  07B4  0BFC               	decfsz	??_main+1,f
  1218  07B5  2FB2               	goto	u1057
  1219  07B6  0BFD               	decfsz	??_main+2,f
  1220  07B7  2FB2               	goto	u1057
  1221  07B8  0000               	nop
  1222                           
  1223                           ;main.c: 149: Lcd_Set_Cursor(2,1);
  1224  07B9  01F4               	clrf	Lcd_Set_Cursor@b
  1225  07BA  0AF4               	incf	Lcd_Set_Cursor@b,f
  1226  07BB  3002               	movlw	2
  1227  07BC  120A  118A  23AD  120A  118A  	fcall	_Lcd_Set_Cursor
  1228                           
  1229                           ;main.c: 150: if(strcmp(ESP_Response, "OK") == 0)
  1230  07C1  3076               	movlw	(low (((STR_7+13)-__stringbase)| (0+32768)))& (0+255)
  1231  07C2  00FB               	movwf	??_main
  1232  07C3  087B               	movf	??_main,w
  1233  07C4  00F0               	movwf	strcmp@s2
  1234  07C5  303A               	movlw	(low (_ESP_Response| 0))& (0+255)
  1235  07C6  120A  118A  234A  120A  118A  	fcall	_strcmp
  1236  07CB  0870               	movf	?_strcmp,w
  1237  07CC  0471               	iorwf	?_strcmp+1,w
  1238  07CD  1D03               	btfss	3,2
  1239  07CE  2FD5               	goto	l1266
  1240                           
  1241                           ;main.c: 151: {
  1242                           ;main.c: 152: wifi_connect = 1;
  1243  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  1244  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  1245  07D1  01B9               	clrf	main@wifi_connect
  1246  07D2  0AB9               	incf	main@wifi_connect,f
  1247                           
  1248                           ;main.c: 153: Lcd_Write_String("WiFi Connect OK");
  1249  07D3  3079               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  1250  07D4  2FD6               	goto	L3
  1251  07D5                     l1266:	
  1252                           ;main.c: 155: }
  1253                           
  1254                           ;main.c: 154: UART_Write_Text("\n\r");
  1255                           
  1256                           
  1257                           ;main.c: 156: else
  1258                           ;main.c: 157: {
  1259                           ;main.c: 158: Lcd_Write_String("WiFi Connect Fail");
  1260  07D5  3024               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  1261  07D6                     L3:	
  1262  07D6  120A  118A  22DF  120A  118A  	fcall	_Lcd_Write_String
  1263                           
  1264                           ;main.c: 159: UART_Write_Text("\n\r");
  1265  07DB  30E1               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1266  07DC  120A  118A  2301  120A  118A  	fcall	_UART_Write_Text
  1267                           
  1268                           ;main.c: 160: }
  1269                           ;main.c: 161: _delay((unsigned long)((1500)*(20000000/4000.0)));
  1270  07E1  3027               	movlw	39
  1271  07E2  00FD               	movwf	??_main+2
  1272  07E3  300D               	movlw	13
  1273  07E4  00FC               	movwf	??_main+1
  1274  07E5  3026               	movlw	38
  1275  07E6  00FB               	movwf	??_main
  1276  07E7                     u1067:	
  1277  07E7  0BFB               	decfsz	??_main,f
  1278  07E8  2FE7               	goto	u1067
  1279  07E9  0BFC               	decfsz	??_main+1,f
  1280  07EA  2FE7               	goto	u1067
  1281  07EB  0BFD               	decfsz	??_main+2,f
  1282  07EC  2FE7               	goto	u1067
  1283  07ED  0000               	nop
  1284  07EE                     l1270:	
  1285  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  1286  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  1287  07F0  0839               	movf	main@wifi_connect,w
  1288  07F1  1D03               	btfss	3,2
  1289  07F2  2E2F               	goto	l1202
  1290  07F3  2F5D               	goto	l1238
  1291  07F4                     __end_of_main:	
  1292                           
  1293                           	psect	text1
  1294  034A                     __ptext1:	
  1295 ;; *************** function _strcmp *****************
  1296 ;; Defined at:
  1297 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\strcmp.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  s1              1    wreg     PTR const unsigned char 
  1300 ;;		 -> ESP_Response(8), 
  1301 ;;  s2              1    0[COMMON] PTR const unsigned char 
  1302 ;;		 -> STR_22(3), STR_14(3), STR_6(3), 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  s1              1    5[COMMON] PTR const unsigned char 
  1305 ;;		 -> ESP_Response(8), 
  1306 ;;  r               1    4[COMMON] char 
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  2    0[COMMON] int 
  1309 ;; Registers used:
  1310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1316 ;;      Params:         2       0       0       0       0
  1317 ;;      Locals:         2       0       0       0       0
  1318 ;;      Temps:          2       0       0       0       0
  1319 ;;      Totals:         6       0       0       0       0
  1320 ;;Total ram usage:        6 bytes
  1321 ;; Hardware stack levels used:    2
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           
  1330                           ;psect for function _strcmp
  1331  034A                     _strcmp:	
  1332                           
  1333                           ;incstack = 0
  1334                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1335                           ;strcmp@s1 stored from wreg
  1336  034A  00F5               	movwf	strcmp@s1
  1337  034B  2B54               	goto	l1140
  1338  034C                     l1136:	
  1339  034C  3001               	movlw	1
  1340  034D  00F2               	movwf	??_strcmp
  1341  034E  0872               	movf	??_strcmp,w
  1342  034F  07F5               	addwf	strcmp@s1,f
  1343  0350  3001               	movlw	1
  1344  0351  00F2               	movwf	??_strcmp
  1345  0352  0872               	movf	??_strcmp,w
  1346  0353  07F0               	addwf	strcmp@s2,f
  1347  0354                     l1140:	
  1348  0354  0875               	movf	strcmp@s1,w
  1349  0355  0084               	movwf	4
  1350  0356  1383               	bcf	3,7	;select IRP bank0
  1351  0357  0800               	movf	0,w
  1352  0358  00F2               	movwf	??_strcmp
  1353  0359  0870               	movf	strcmp@s2,w
  1354  035A  0084               	movwf	4
  1355  035B  120A  118A  2003  120A  118A  	fcall	stringdir
  1356  0360  3AFF               	xorlw	255
  1357  0361  3E01               	addlw	1
  1358  0362  0772               	addwf	??_strcmp,w
  1359  0363  00F3               	movwf	??_strcmp+1
  1360  0364  0873               	movf	??_strcmp+1,w
  1361  0365  00F4               	movwf	strcmp@r
  1362  0366  0874               	movf	strcmp@r,w
  1363  0367  1D03               	btfss	3,2
  1364  0368  2B6E               	goto	l1144
  1365  0369  0875               	movf	strcmp@s1,w
  1366  036A  0084               	movwf	4
  1367  036B  0800               	movf	0,w
  1368  036C  1D03               	btfss	3,2
  1369  036D  2B4C               	goto	l1136
  1370  036E                     l1144:	
  1371  036E  0874               	movf	strcmp@r,w
  1372  036F  00F0               	movwf	?_strcmp
  1373  0370  01F1               	clrf	?_strcmp+1
  1374  0371  1BF0               	btfsc	?_strcmp,7
  1375  0372  03F1               	decf	?_strcmp+1,f
  1376  0373  0008               	return
  1377  0374                     __end_of_strcmp:	
  1378                           
  1379                           	psect	text2
  1380  02C3                     __ptext2:	
  1381 ;; *************** function _memset *****************
  1382 ;; Defined at:
  1383 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\memset.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  p1              1    wreg     PTR void 
  1386 ;;		 -> ESP_Response(8), 
  1387 ;;  c               2    0[COMMON] int 
  1388 ;;  n               2    2[COMMON] unsigned int 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  p1              1    6[COMMON] PTR void 
  1391 ;;		 -> ESP_Response(8), 
  1392 ;;  p               1    5[COMMON] PTR unsigned char 
  1393 ;;		 -> ESP_Response(8), 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      PTR void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1403 ;;      Params:         4       0       0       0       0
  1404 ;;      Locals:         2       0       0       0       0
  1405 ;;      Temps:          1       0       0       0       0
  1406 ;;      Totals:         7       0       0       0       0
  1407 ;;Total ram usage:        7 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _memset
  1418  02C3                     _memset:	
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  1422                           ;memset@p1 stored from wreg
  1423  02C3  00F6               	movwf	memset@p1
  1424  02C4  0876               	movf	memset@p1,w
  1425  02C5  00F4               	movwf	??_memset
  1426  02C6  0874               	movf	??_memset,w
  1427  02C7  00F5               	movwf	memset@p
  1428  02C8                     l1132:	
  1429  02C8  3001               	movlw	1
  1430  02C9  02F2               	subwf	memset@n,f
  1431  02CA  3000               	movlw	0
  1432  02CB  1C03               	skipc
  1433  02CC  03F3               	decf	memset@n+1,f
  1434  02CD  02F3               	subwf	memset@n+1,f
  1435  02CE  0A72               	incf	memset@n,w
  1436  02CF  1903               	btfsc	3,2
  1437  02D0  0A73               	incf	memset@n+1,w
  1438  02D1  1903               	btfsc	3,2
  1439  02D2  0008               	return
  1440  02D3  0870               	movf	memset@c,w
  1441  02D4  00F4               	movwf	??_memset
  1442  02D5  0875               	movf	memset@p,w
  1443  02D6  0084               	movwf	4
  1444  02D7  0874               	movf	??_memset,w
  1445  02D8  1383               	bcf	3,7	;select IRP bank0
  1446  02D9  0080               	movwf	0
  1447  02DA  3001               	movlw	1
  1448  02DB  00F4               	movwf	??_memset
  1449  02DC  0874               	movf	??_memset,w
  1450  02DD  07F5               	addwf	memset@p,f
  1451  02DE  2AC8               	goto	l1132
  1452  02DF                     __end_of_memset:	
  1453                           ;	Return value of _memset is never used
  1454                           
  1455                           
  1456                           	psect	text3
  1457  0301                     __ptext3:	
  1458 ;; *************** function _UART_Write_Text *****************
  1459 ;; Defined at:
  1460 ;;		line 61 in file "UniversalAsyncReceiveTransmit.h"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  text            1    wreg     PTR const unsigned char 
  1463 ;;		 -> STR_26(3), STR_24(3), STR_21(3), STR_20(35), 
  1464 ;;		 -> STR_18(3), STR_16(3), STR_13(3), STR_12(12), 
  1465 ;;		 -> STR_10(3), STR_8(3), STR_5(3), STR_4(3), 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  text            1    3[COMMON] PTR const unsigned char 
  1468 ;;		 -> STR_26(3), STR_24(3), STR_21(3), STR_20(35), 
  1469 ;;		 -> STR_18(3), STR_16(3), STR_13(3), STR_12(12), 
  1470 ;;		 -> STR_10(3), STR_8(3), STR_5(3), STR_4(3), 
  1471 ;;  i               2    1[COMMON] int 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1481 ;;      Params:         0       0       0       0       0
  1482 ;;      Locals:         3       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0
  1484 ;;      Totals:         3       0       0       0       0
  1485 ;;Total ram usage:        3 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    1
  1488 ;; This function calls:
  1489 ;;		_UART_Write
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           
  1496                           ;psect for function _UART_Write_Text
  1497  0301                     _UART_Write_Text:	
  1498                           
  1499                           ;incstack = 0
  1500                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1501                           ;UART_Write_Text@text stored from wreg
  1502  0301  00F3               	movwf	UART_Write_Text@text
  1503                           
  1504                           ;UniversalAsyncReceiveTransmit.h: 63: int i;
  1505                           ;UniversalAsyncReceiveTransmit.h: 64: for(i = 0; text[i] != '\0'; i++)
  1506  0302  01F1               	clrf	UART_Write_Text@i
  1507  0303  01F2               	clrf	UART_Write_Text@i+1
  1508  0304                     l1124:	
  1509  0304  0871               	movf	UART_Write_Text@i,w
  1510  0305  0773               	addwf	UART_Write_Text@text,w
  1511  0306  0084               	movwf	4
  1512  0307  120A  118A  2003  120A  118A  	fcall	stringdir
  1513  030C  3A00               	xorlw	0
  1514  030D  1903               	btfsc	3,2
  1515  030E  0008               	return
  1516                           
  1517                           ;UniversalAsyncReceiveTransmit.h: 65: {
  1518                           ;UniversalAsyncReceiveTransmit.h: 66: UART_Write(text[i]);
  1519  030F  0871               	movf	UART_Write_Text@i,w
  1520  0310  0773               	addwf	UART_Write_Text@text,w
  1521  0311  0084               	movwf	4
  1522  0312  120A  118A  2003  120A  118A  	fcall	stringdir
  1523  0317  120A  118A  227A  120A  118A  	fcall	_UART_Write
  1524  031C  3001               	movlw	1
  1525  031D  07F1               	addwf	UART_Write_Text@i,f
  1526  031E  1803               	skipnc
  1527  031F  0AF2               	incf	UART_Write_Text@i+1,f
  1528  0320  3000               	movlw	0
  1529  0321  07F2               	addwf	UART_Write_Text@i+1,f
  1530  0322  2B04               	goto	l1124
  1531  0323                     __end_of_UART_Write_Text:	
  1532                           
  1533                           	psect	text4
  1534  027A                     __ptext4:	
  1535 ;; *************** function _UART_Write *****************
  1536 ;; Defined at:
  1537 ;;		line 55 in file "UniversalAsyncReceiveTransmit.h"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  data            1    wreg     unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  data            1    0[COMMON] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1551 ;;      Params:         0       0       0       0       0
  1552 ;;      Locals:         1       0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0
  1554 ;;      Totals:         1       0       0       0       0
  1555 ;;Total ram usage:        1 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_UART_Write_Text
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           
  1565                           ;psect for function _UART_Write
  1566  027A                     _UART_Write:	
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _UART_Write: [wreg]
  1570                           ;UART_Write@data stored from wreg
  1571  027A  00F0               	movwf	UART_Write@data
  1572  027B                     l104:	
  1573                           ;UniversalAsyncReceiveTransmit.h: 57: while(!TRMT);
  1574                           
  1575  027B  1683               	bsf	3,5	;RP0=1, select bank1
  1576  027C  1303               	bcf	3,6	;RP1=0, select bank1
  1577  027D  1C98               	btfss	24,1	;volatile
  1578  027E  2A7B               	goto	l104
  1579                           
  1580                           ;UniversalAsyncReceiveTransmit.h: 58: TXREG = data;
  1581  027F  0870               	movf	UART_Write@data,w
  1582  0280  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0281  1303               	bcf	3,6	;RP1=0, select bank0
  1584  0282  0099               	movwf	25	;volatile
  1585  0283  0008               	return
  1586  0284                     __end_of_UART_Write:	
  1587                           
  1588                           	psect	text5
  1589  0323                     __ptext5:	
  1590 ;; *************** function _UART_Read_Text *****************
  1591 ;; Defined at:
  1592 ;;		line 41 in file "UniversalAsyncReceiveTransmit.h"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  buffer          1    wreg     PTR unsigned char 
  1595 ;;		 -> ESP_Response(8), 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  buffer          1    3[COMMON] PTR unsigned char 
  1598 ;;		 -> ESP_Response(8), 
  1599 ;;  i               2    4[COMMON] int 
  1600 ;;  rec_data        1    2[COMMON] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1610 ;;      Params:         0       0       0       0       0
  1611 ;;      Locals:         4       0       0       0       0
  1612 ;;      Temps:          2       0       0       0       0
  1613 ;;      Totals:         6       0       0       0       0
  1614 ;;Total ram usage:        6 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    1
  1617 ;; This function calls:
  1618 ;;		_UART_Read
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           
  1625                           ;psect for function _UART_Read_Text
  1626  0323                     _UART_Read_Text:	
  1627                           
  1628                           ;incstack = 0
  1629                           ; Regs used in _UART_Read_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1630                           ;UART_Read_Text@buffer stored from wreg
  1631  0323  00F3               	movwf	UART_Read_Text@buffer
  1632                           
  1633                           ;UniversalAsyncReceiveTransmit.h: 43: unsigned char rec_data;
  1634                           ;UniversalAsyncReceiveTransmit.h: 46: int i = 0;
  1635  0324  01F4               	clrf	UART_Read_Text@i
  1636  0325  01F5               	clrf	UART_Read_Text@i+1
  1637  0326                     l1110:	
  1638                           ;UniversalAsyncReceiveTransmit.h: 47: do
  1639                           
  1640                           
  1641                           ;UniversalAsyncReceiveTransmit.h: 48: {
  1642                           ;UniversalAsyncReceiveTransmit.h: 49: rec_data = UART_Read();
  1643  0326  120A  118A  2274  120A  118A  	fcall	_UART_Read
  1644  032B  00F0               	movwf	??_UART_Read_Text
  1645  032C  0870               	movf	??_UART_Read_Text,w
  1646  032D  00F2               	movwf	UART_Read_Text@rec_data
  1647                           
  1648                           ;UniversalAsyncReceiveTransmit.h: 50: buffer[i] = rec_data;
  1649  032E  0872               	movf	UART_Read_Text@rec_data,w
  1650  032F  00F0               	movwf	??_UART_Read_Text
  1651  0330  0874               	movf	UART_Read_Text@i,w
  1652  0331  0773               	addwf	UART_Read_Text@buffer,w
  1653  0332  00F1               	movwf	??_UART_Read_Text+1
  1654  0333  0871               	movf	??_UART_Read_Text+1,w
  1655  0334  0084               	movwf	4
  1656  0335  0870               	movf	??_UART_Read_Text,w
  1657  0336  1383               	bcf	3,7	;select IRP bank0
  1658  0337  0080               	movwf	0
  1659                           
  1660                           ;UniversalAsyncReceiveTransmit.h: 51: i++;
  1661  0338  3001               	movlw	1
  1662  0339  07F4               	addwf	UART_Read_Text@i,f
  1663  033A  1803               	skipnc
  1664  033B  0AF5               	incf	UART_Read_Text@i+1,f
  1665  033C  3000               	movlw	0
  1666  033D  07F5               	addwf	UART_Read_Text@i+1,f
  1667                           
  1668                           ;UniversalAsyncReceiveTransmit.h: 52: }while(i < 2);
  1669  033E  0875               	movf	UART_Read_Text@i+1,w
  1670  033F  3A80               	xorlw	128
  1671  0340  00FF               	movwf	127
  1672  0341  3080               	movlw	128
  1673  0342  027F               	subwf	127,w
  1674  0343  1D03               	skipz
  1675  0344  2B47               	goto	u785
  1676  0345  3002               	movlw	2
  1677  0346  0274               	subwf	UART_Read_Text@i,w
  1678  0347                     u785:	
  1679  0347  1803               	btfsc	3,0
  1680  0348  0008               	return
  1681  0349  2B26               	goto	l1110
  1682  034A                     __end_of_UART_Read_Text:	
  1683                           
  1684                           	psect	text6
  1685  0274                     __ptext6:	
  1686 ;; *************** function _UART_Read *****************
  1687 ;; Defined at:
  1688 ;;		line 35 in file "UniversalAsyncReceiveTransmit.h"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      unsigned char 
  1695 ;; Registers used:
  1696 ;;		wreg
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1702 ;;      Params:         0       0       0       0       0
  1703 ;;      Locals:         0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0
  1705 ;;      Totals:         0       0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_UART_Read_Text
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           
  1716                           ;psect for function _UART_Read
  1717  0274                     _UART_Read:	
  1718  0274                     l93:	
  1719                           ;UniversalAsyncReceiveTransmit.h: 37: while(!RCIF);
  1720                           
  1721                           ;incstack = 0
  1722                           ; Regs used in _UART_Read: [wreg]
  1723                           
  1724  0274  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0275  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0276  1E8C               	btfss	12,5	;volatile
  1727  0277  2A74               	goto	l93
  1728                           
  1729                           ;UniversalAsyncReceiveTransmit.h: 38: return RCREG;
  1730  0278  081A               	movf	26,w	;volatile
  1731  0279  0008               	return
  1732  027A                     __end_of_UART_Read:	
  1733                           
  1734                           	psect	text7
  1735  04E2                     __ptext7:	
  1736 ;; *************** function _UART_Init *****************
  1737 ;; Defined at:
  1738 ;;		line 1 in file "UniversalAsyncReceiveTransmit.h"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  baudrate        4    6[BANK0 ] const long 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  x               2    9[COMMON] unsigned int 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      unsigned char 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0, pclath, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         0       4       0       0       0
  1753 ;;      Locals:         2       0       0       0       0
  1754 ;;      Temps:          0      12       0       0       0
  1755 ;;      Totals:         2      16       0       0       0
  1756 ;;Total ram usage:       18 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    1
  1759 ;; This function calls:
  1760 ;;		___aldiv
  1761 ;; This function is called by:
  1762 ;;		_main
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           
  1767                           ;psect for function _UART_Init
  1768  04E2                     _UART_Init:	
  1769                           
  1770                           ;UniversalAsyncReceiveTransmit.h: 3: unsigned int x;
  1771                           ;UniversalAsyncReceiveTransmit.h: 4: x = (20000000 - baudrate * 64) / (baudrate * 64);
  1772                           
  1773                           ;incstack = 0
  1774                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1775  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  1776  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  1777  04E4  0826               	movf	UART_Init@baudrate,w
  1778  04E5  00AA               	movwf	??_UART_Init
  1779  04E6  0827               	movf	UART_Init@baudrate+1,w
  1780  04E7  00AB               	movwf	??_UART_Init+1
  1781  04E8  0828               	movf	UART_Init@baudrate+2,w
  1782  04E9  00AC               	movwf	??_UART_Init+2
  1783  04EA  0829               	movf	UART_Init@baudrate+3,w
  1784  04EB  00AD               	movwf	??_UART_Init+3
  1785  04EC  3006               	movlw	6
  1786  04ED                     u705:	
  1787  04ED  1003               	clrc
  1788  04EE  0DAA               	rlf	??_UART_Init,f
  1789  04EF  0DAB               	rlf	??_UART_Init+1,f
  1790  04F0  0DAC               	rlf	??_UART_Init+2,f
  1791  04F1  0DAD               	rlf	??_UART_Init+3,f
  1792  04F2  3EFF               	addlw	-1
  1793  04F3  1D03               	skipz
  1794  04F4  2CED               	goto	u705
  1795  04F5  082D               	movf	??_UART_Init+3,w
  1796  04F6  00F3               	movwf	___aldiv@divisor+3
  1797  04F7  082C               	movf	??_UART_Init+2,w
  1798  04F8  00F2               	movwf	___aldiv@divisor+2
  1799  04F9  082B               	movf	??_UART_Init+1,w
  1800  04FA  00F1               	movwf	___aldiv@divisor+1
  1801  04FB  082A               	movf	??_UART_Init,w
  1802  04FC  00F0               	movwf	___aldiv@divisor
  1803  04FD  3000               	movlw	0
  1804  04FE  00AE               	movwf	??_UART_Init+4
  1805  04FF  302D               	movlw	45
  1806  0500  00AF               	movwf	??_UART_Init+5
  1807  0501  3031               	movlw	49
  1808  0502  00B0               	movwf	??_UART_Init+6
  1809  0503  3001               	movlw	1
  1810  0504  00B1               	movwf	??_UART_Init+7
  1811  0505  0826               	movf	UART_Init@baudrate,w
  1812  0506  00B2               	movwf	??_UART_Init+8
  1813  0507  0827               	movf	UART_Init@baudrate+1,w
  1814  0508  00B3               	movwf	??_UART_Init+9
  1815  0509  0828               	movf	UART_Init@baudrate+2,w
  1816  050A  00B4               	movwf	??_UART_Init+10
  1817  050B  0829               	movf	UART_Init@baudrate+3,w
  1818  050C  00B5               	movwf	??_UART_Init+11
  1819  050D  3006               	movlw	6
  1820  050E                     u715:	
  1821  050E  1003               	clrc
  1822  050F  0DB2               	rlf	??_UART_Init+8,f
  1823  0510  0DB3               	rlf	??_UART_Init+9,f
  1824  0511  0DB4               	rlf	??_UART_Init+10,f
  1825  0512  0DB5               	rlf	??_UART_Init+11,f
  1826  0513  3EFF               	addlw	-1
  1827  0514  1D03               	skipz
  1828  0515  2D0E               	goto	u715
  1829  0516  09B2               	comf	??_UART_Init+8,f
  1830  0517  09B3               	comf	??_UART_Init+9,f
  1831  0518  09B4               	comf	??_UART_Init+10,f
  1832  0519  09B5               	comf	??_UART_Init+11,f
  1833  051A  0AB2               	incf	??_UART_Init+8,f
  1834  051B  1903               	skipnz
  1835  051C  0AB3               	incf	??_UART_Init+9,f
  1836  051D  1903               	skipnz
  1837  051E  0AB4               	incf	??_UART_Init+10,f
  1838  051F  1903               	skipnz
  1839  0520  0AB5               	incf	??_UART_Init+11,f
  1840  0521  0832               	movf	??_UART_Init+8,w
  1841  0522  07AE               	addwf	??_UART_Init+4,f
  1842  0523  0833               	movf	??_UART_Init+9,w
  1843  0524  1803               	skipnc
  1844  0525  0F33               	incfsz	??_UART_Init+9,w
  1845  0526  2D28               	goto	u720
  1846  0527  2D29               	goto	u721
  1847  0528                     u720:	
  1848  0528  07AF               	addwf	??_UART_Init+5,f
  1849  0529                     u721:	
  1850  0529  0834               	movf	??_UART_Init+10,w
  1851  052A  1803               	skipnc
  1852  052B  0F34               	incfsz	??_UART_Init+10,w
  1853  052C  2D2E               	goto	u722
  1854  052D  2D2F               	goto	u723
  1855  052E                     u722:	
  1856  052E  07B0               	addwf	??_UART_Init+6,f
  1857  052F                     u723:	
  1858  052F  0835               	movf	??_UART_Init+11,w
  1859  0530  1803               	skipnc
  1860  0531  0A35               	incf	??_UART_Init+11,w
  1861  0532  07B1               	addwf	??_UART_Init+7,f
  1862  0533  0831               	movf	??_UART_Init+7,w
  1863  0534  00F7               	movwf	___aldiv@dividend+3
  1864  0535  0830               	movf	??_UART_Init+6,w
  1865  0536  00F6               	movwf	___aldiv@dividend+2
  1866  0537  082F               	movf	??_UART_Init+5,w
  1867  0538  00F5               	movwf	___aldiv@dividend+1
  1868  0539  082E               	movf	??_UART_Init+4,w
  1869  053A  00F4               	movwf	___aldiv@dividend
  1870  053B  120A  118A  2453  120A  118A  	fcall	___aldiv
  1871  0540  0871               	movf	?___aldiv+1,w
  1872  0541  00FA               	movwf	UART_Init@x+1
  1873  0542  0870               	movf	?___aldiv,w
  1874  0543  00F9               	movwf	UART_Init@x
  1875                           
  1876                           ;UniversalAsyncReceiveTransmit.h: 5: if(x > 255)
  1877  0544  3001               	movlw	1
  1878  0545  027A               	subwf	UART_Init@x+1,w
  1879  0546  3000               	movlw	0
  1880  0547  1903               	skipnz
  1881  0548  0279               	subwf	UART_Init@x,w
  1882  0549  1C03               	skipc
  1883  054A  2DB0               	goto	l1086
  1884                           
  1885                           ;UniversalAsyncReceiveTransmit.h: 6: {
  1886                           ;UniversalAsyncReceiveTransmit.h: 7: x = (20000000 - baudrate * 16) / (baudrate * 16);
  1887  054B  1283               	bcf	3,5	;RP0=0, select bank0
  1888  054C  1303               	bcf	3,6	;RP1=0, select bank0
  1889  054D  0826               	movf	UART_Init@baudrate,w
  1890  054E  00AA               	movwf	??_UART_Init
  1891  054F  0827               	movf	UART_Init@baudrate+1,w
  1892  0550  00AB               	movwf	??_UART_Init+1
  1893  0551  0828               	movf	UART_Init@baudrate+2,w
  1894  0552  00AC               	movwf	??_UART_Init+2
  1895  0553  0829               	movf	UART_Init@baudrate+3,w
  1896  0554  00AD               	movwf	??_UART_Init+3
  1897  0555  3004               	movlw	4
  1898  0556                     u745:	
  1899  0556  1003               	clrc
  1900  0557  0DAA               	rlf	??_UART_Init,f
  1901  0558  0DAB               	rlf	??_UART_Init+1,f
  1902  0559  0DAC               	rlf	??_UART_Init+2,f
  1903  055A  0DAD               	rlf	??_UART_Init+3,f
  1904  055B  3EFF               	addlw	-1
  1905  055C  1D03               	skipz
  1906  055D  2D56               	goto	u745
  1907  055E  082D               	movf	??_UART_Init+3,w
  1908  055F  00F3               	movwf	___aldiv@divisor+3
  1909  0560  082C               	movf	??_UART_Init+2,w
  1910  0561  00F2               	movwf	___aldiv@divisor+2
  1911  0562  082B               	movf	??_UART_Init+1,w
  1912  0563  00F1               	movwf	___aldiv@divisor+1
  1913  0564  082A               	movf	??_UART_Init,w
  1914  0565  00F0               	movwf	___aldiv@divisor
  1915  0566  3000               	movlw	0
  1916  0567  00AE               	movwf	??_UART_Init+4
  1917  0568  302D               	movlw	45
  1918  0569  00AF               	movwf	??_UART_Init+5
  1919  056A  3031               	movlw	49
  1920  056B  00B0               	movwf	??_UART_Init+6
  1921  056C  3001               	movlw	1
  1922  056D  00B1               	movwf	??_UART_Init+7
  1923  056E  0826               	movf	UART_Init@baudrate,w
  1924  056F  00B2               	movwf	??_UART_Init+8
  1925  0570  0827               	movf	UART_Init@baudrate+1,w
  1926  0571  00B3               	movwf	??_UART_Init+9
  1927  0572  0828               	movf	UART_Init@baudrate+2,w
  1928  0573  00B4               	movwf	??_UART_Init+10
  1929  0574  0829               	movf	UART_Init@baudrate+3,w
  1930  0575  00B5               	movwf	??_UART_Init+11
  1931  0576  3004               	movlw	4
  1932  0577                     u755:	
  1933  0577  1003               	clrc
  1934  0578  0DB2               	rlf	??_UART_Init+8,f
  1935  0579  0DB3               	rlf	??_UART_Init+9,f
  1936  057A  0DB4               	rlf	??_UART_Init+10,f
  1937  057B  0DB5               	rlf	??_UART_Init+11,f
  1938  057C  3EFF               	addlw	-1
  1939  057D  1D03               	skipz
  1940  057E  2D77               	goto	u755
  1941  057F  09B2               	comf	??_UART_Init+8,f
  1942  0580  09B3               	comf	??_UART_Init+9,f
  1943  0581  09B4               	comf	??_UART_Init+10,f
  1944  0582  09B5               	comf	??_UART_Init+11,f
  1945  0583  0AB2               	incf	??_UART_Init+8,f
  1946  0584  1903               	skipnz
  1947  0585  0AB3               	incf	??_UART_Init+9,f
  1948  0586  1903               	skipnz
  1949  0587  0AB4               	incf	??_UART_Init+10,f
  1950  0588  1903               	skipnz
  1951  0589  0AB5               	incf	??_UART_Init+11,f
  1952  058A  0832               	movf	??_UART_Init+8,w
  1953  058B  07AE               	addwf	??_UART_Init+4,f
  1954  058C  0833               	movf	??_UART_Init+9,w
  1955  058D  1803               	skipnc
  1956  058E  0F33               	incfsz	??_UART_Init+9,w
  1957  058F  2D91               	goto	u760
  1958  0590  2D92               	goto	u761
  1959  0591                     u760:	
  1960  0591  07AF               	addwf	??_UART_Init+5,f
  1961  0592                     u761:	
  1962  0592  0834               	movf	??_UART_Init+10,w
  1963  0593  1803               	skipnc
  1964  0594  0F34               	incfsz	??_UART_Init+10,w
  1965  0595  2D97               	goto	u762
  1966  0596  2D98               	goto	u763
  1967  0597                     u762:	
  1968  0597  07B0               	addwf	??_UART_Init+6,f
  1969  0598                     u763:	
  1970  0598  0835               	movf	??_UART_Init+11,w
  1971  0599  1803               	skipnc
  1972  059A  0A35               	incf	??_UART_Init+11,w
  1973  059B  07B1               	addwf	??_UART_Init+7,f
  1974  059C  0831               	movf	??_UART_Init+7,w
  1975  059D  00F7               	movwf	___aldiv@dividend+3
  1976  059E  0830               	movf	??_UART_Init+6,w
  1977  059F  00F6               	movwf	___aldiv@dividend+2
  1978  05A0  082F               	movf	??_UART_Init+5,w
  1979  05A1  00F5               	movwf	___aldiv@dividend+1
  1980  05A2  082E               	movf	??_UART_Init+4,w
  1981  05A3  00F4               	movwf	___aldiv@dividend
  1982  05A4  120A  118A  2453  120A  118A  	fcall	___aldiv
  1983  05A9  0871               	movf	?___aldiv+1,w
  1984  05AA  00FA               	movwf	UART_Init@x+1
  1985  05AB  0870               	movf	?___aldiv,w
  1986  05AC  00F9               	movwf	UART_Init@x
  1987                           
  1988                           ;UniversalAsyncReceiveTransmit.h: 8: BRGH = 1;
  1989  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  1990  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  1991  05AF  1518               	bsf	24,2	;volatile
  1992  05B0                     l1086:	
  1993                           
  1994                           ;UniversalAsyncReceiveTransmit.h: 9: }
  1995                           ;UniversalAsyncReceiveTransmit.h: 11: if( x < 256)
  1996  05B0  3001               	movlw	1
  1997  05B1  027A               	subwf	UART_Init@x+1,w
  1998  05B2  3000               	movlw	0
  1999  05B3  1903               	skipnz
  2000  05B4  0279               	subwf	UART_Init@x,w
  2001  05B5  1803               	skipnc
  2002  05B6  0008               	return
  2003                           
  2004                           ;UniversalAsyncReceiveTransmit.h: 12: {
  2005                           ;UniversalAsyncReceiveTransmit.h: 13: SPBRG = x;
  2006  05B7  0879               	movf	UART_Init@x,w
  2007  05B8  1683               	bsf	3,5	;RP0=1, select bank1
  2008  05B9  1303               	bcf	3,6	;RP1=0, select bank1
  2009  05BA  0099               	movwf	25	;volatile
  2010                           
  2011                           ;UniversalAsyncReceiveTransmit.h: 14: SYNC = 0;
  2012  05BB  1218               	bcf	24,4	;volatile
  2013                           
  2014                           ;UniversalAsyncReceiveTransmit.h: 15: SPEN = 1;
  2015  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  2016  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  2017  05BE  1798               	bsf	24,7	;volatile
  2018                           
  2019                           ;UniversalAsyncReceiveTransmit.h: 16: TRISC7 = 1;
  2020  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  2021  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  2022  05C1  1787               	bsf	7,7	;volatile
  2023                           
  2024                           ;UniversalAsyncReceiveTransmit.h: 17: TRISC6 = 0;
  2025  05C2  1307               	bcf	7,6	;volatile
  2026                           
  2027                           ;UniversalAsyncReceiveTransmit.h: 18: CREN = 1;
  2028  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  2029  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  2030  05C5  1618               	bsf	24,4	;volatile
  2031                           
  2032                           ;UniversalAsyncReceiveTransmit.h: 19: TXEN = 1;
  2033  05C6  1683               	bsf	3,5	;RP0=1, select bank1
  2034  05C7  1303               	bcf	3,6	;RP1=0, select bank1
  2035  05C8  1698               	bsf	24,5	;volatile
  2036                           
  2037                           ;UniversalAsyncReceiveTransmit.h: 20: return 1;
  2038                           ;	Return value of _UART_Init is never used
  2039  05C9  0008               	return
  2040  05CA                     __end_of_UART_Init:	
  2041                           ;UniversalAsyncReceiveTransmit.h: 21: }
  2042                           ;UniversalAsyncReceiveTransmit.h: 22: return 0;
  2043                           ;	Return value of _UART_Init is never used
  2044                           
  2045                           
  2046                           	psect	text8
  2047  0453                     __ptext8:	
  2048 ;; *************** function ___aldiv *****************
  2049 ;; Defined at:
  2050 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  divisor         4    0[COMMON] long 
  2053 ;;  dividend        4    4[COMMON] long 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  quotient        4    2[BANK0 ] long 
  2056 ;;  sign            1    1[BANK0 ] unsigned char 
  2057 ;;  counter         1    0[BANK0 ] unsigned char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  4    0[COMMON] long 
  2060 ;; Registers used:
  2061 ;;		wreg, status,2, status,0
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2067 ;;      Params:         8       0       0       0       0
  2068 ;;      Locals:         0       6       0       0       0
  2069 ;;      Temps:          1       0       0       0       0
  2070 ;;      Totals:         9       6       0       0       0
  2071 ;;Total ram usage:       15 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_UART_Init
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           
  2081                           ;psect for function ___aldiv
  2082  0453                     ___aldiv:	
  2083                           
  2084                           ;incstack = 0
  2085                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2086  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2087  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2088  0455  01A1               	clrf	___aldiv@sign
  2089  0456  1FF3               	btfss	___aldiv@divisor+3,7
  2090  0457  2C65               	goto	l287
  2091  0458  09F0               	comf	___aldiv@divisor,f
  2092  0459  09F1               	comf	___aldiv@divisor+1,f
  2093  045A  09F2               	comf	___aldiv@divisor+2,f
  2094  045B  09F3               	comf	___aldiv@divisor+3,f
  2095  045C  0AF0               	incf	___aldiv@divisor,f
  2096  045D  1903               	skipnz
  2097  045E  0AF1               	incf	___aldiv@divisor+1,f
  2098  045F  1903               	skipnz
  2099  0460  0AF2               	incf	___aldiv@divisor+2,f
  2100  0461  1903               	skipnz
  2101  0462  0AF3               	incf	___aldiv@divisor+3,f
  2102  0463  01A1               	clrf	___aldiv@sign
  2103  0464  0AA1               	incf	___aldiv@sign,f
  2104  0465                     l287:	
  2105  0465  1FF7               	btfss	___aldiv@dividend+3,7
  2106  0466  2C76               	goto	l1008
  2107  0467  09F4               	comf	___aldiv@dividend,f
  2108  0468  09F5               	comf	___aldiv@dividend+1,f
  2109  0469  09F6               	comf	___aldiv@dividend+2,f
  2110  046A  09F7               	comf	___aldiv@dividend+3,f
  2111  046B  0AF4               	incf	___aldiv@dividend,f
  2112  046C  1903               	skipnz
  2113  046D  0AF5               	incf	___aldiv@dividend+1,f
  2114  046E  1903               	skipnz
  2115  046F  0AF6               	incf	___aldiv@dividend+2,f
  2116  0470  1903               	skipnz
  2117  0471  0AF7               	incf	___aldiv@dividend+3,f
  2118  0472  3001               	movlw	1
  2119  0473  00F8               	movwf	??___aldiv
  2120  0474  0878               	movf	??___aldiv,w
  2121  0475  06A1               	xorwf	___aldiv@sign,f
  2122  0476                     l1008:	
  2123  0476  3000               	movlw	0
  2124  0477  00A5               	movwf	___aldiv@quotient+3
  2125  0478  3000               	movlw	0
  2126  0479  00A4               	movwf	___aldiv@quotient+2
  2127  047A  3000               	movlw	0
  2128  047B  00A3               	movwf	___aldiv@quotient+1
  2129  047C  3000               	movlw	0
  2130  047D  00A2               	movwf	___aldiv@quotient
  2131  047E  0873               	movf	___aldiv@divisor+3,w
  2132  047F  0472               	iorwf	___aldiv@divisor+2,w
  2133  0480  0471               	iorwf	___aldiv@divisor+1,w
  2134  0481  0470               	iorwf	___aldiv@divisor,w
  2135  0482  1903               	skipnz
  2136  0483  2CCB               	goto	l1030
  2137  0484  01A0               	clrf	___aldiv@counter
  2138  0485  0AA0               	incf	___aldiv@counter,f
  2139  0486                     l1016:	
  2140  0486  1BF3               	btfsc	___aldiv@divisor+3,7
  2141  0487  2C96               	goto	l1018
  2142  0488  3001               	movlw	1
  2143  0489  00F8               	movwf	??___aldiv
  2144  048A                     u585:	
  2145  048A  1003               	clrc
  2146  048B  0DF0               	rlf	___aldiv@divisor,f
  2147  048C  0DF1               	rlf	___aldiv@divisor+1,f
  2148  048D  0DF2               	rlf	___aldiv@divisor+2,f
  2149  048E  0DF3               	rlf	___aldiv@divisor+3,f
  2150  048F  0BF8               	decfsz	??___aldiv,f
  2151  0490  2C8A               	goto	u585
  2152  0491  3001               	movlw	1
  2153  0492  00F8               	movwf	??___aldiv
  2154  0493  0878               	movf	??___aldiv,w
  2155  0494  07A0               	addwf	___aldiv@counter,f
  2156  0495  2C86               	goto	l1016
  2157  0496                     l1018:	
  2158  0496  3001               	movlw	1
  2159  0497  00F8               	movwf	??___aldiv
  2160  0498                     u605:	
  2161  0498  1003               	clrc
  2162  0499  0DA2               	rlf	___aldiv@quotient,f
  2163  049A  0DA3               	rlf	___aldiv@quotient+1,f
  2164  049B  0DA4               	rlf	___aldiv@quotient+2,f
  2165  049C  0DA5               	rlf	___aldiv@quotient+3,f
  2166  049D  0BF8               	decfsz	??___aldiv,f
  2167  049E  2C98               	goto	u605
  2168  049F  0873               	movf	___aldiv@divisor+3,w
  2169  04A0  0277               	subwf	___aldiv@dividend+3,w
  2170  04A1  1D03               	skipz
  2171  04A2  2CAD               	goto	u615
  2172  04A3  0872               	movf	___aldiv@divisor+2,w
  2173  04A4  0276               	subwf	___aldiv@dividend+2,w
  2174  04A5  1D03               	skipz
  2175  04A6  2CAD               	goto	u615
  2176  04A7  0871               	movf	___aldiv@divisor+1,w
  2177  04A8  0275               	subwf	___aldiv@dividend+1,w
  2178  04A9  1D03               	skipz
  2179  04AA  2CAD               	goto	u615
  2180  04AB  0870               	movf	___aldiv@divisor,w
  2181  04AC  0274               	subwf	___aldiv@dividend,w
  2182  04AD                     u615:	
  2183  04AD  1C03               	skipc
  2184  04AE  2CBE               	goto	l1026
  2185  04AF  0870               	movf	___aldiv@divisor,w
  2186  04B0  02F4               	subwf	___aldiv@dividend,f
  2187  04B1  0871               	movf	___aldiv@divisor+1,w
  2188  04B2  1C03               	skipc
  2189  04B3  0F71               	incfsz	___aldiv@divisor+1,w
  2190  04B4  02F5               	subwf	___aldiv@dividend+1,f
  2191  04B5  0872               	movf	___aldiv@divisor+2,w
  2192  04B6  1C03               	skipc
  2193  04B7  0F72               	incfsz	___aldiv@divisor+2,w
  2194  04B8  02F6               	subwf	___aldiv@dividend+2,f
  2195  04B9  0873               	movf	___aldiv@divisor+3,w
  2196  04BA  1C03               	skipc
  2197  04BB  0F73               	incfsz	___aldiv@divisor+3,w
  2198  04BC  02F7               	subwf	___aldiv@dividend+3,f
  2199  04BD  1422               	bsf	___aldiv@quotient,0
  2200  04BE                     l1026:	
  2201  04BE  3001               	movlw	1
  2202  04BF                     u625:	
  2203  04BF  1003               	clrc
  2204  04C0  0CF3               	rrf	___aldiv@divisor+3,f
  2205  04C1  0CF2               	rrf	___aldiv@divisor+2,f
  2206  04C2  0CF1               	rrf	___aldiv@divisor+1,f
  2207  04C3  0CF0               	rrf	___aldiv@divisor,f
  2208  04C4  3EFF               	addlw	-1
  2209  04C5  1D03               	skipz
  2210  04C6  2CBF               	goto	u625
  2211  04C7  3001               	movlw	1
  2212  04C8  02A0               	subwf	___aldiv@counter,f
  2213  04C9  1D03               	btfss	3,2
  2214  04CA  2C96               	goto	l1018
  2215  04CB                     l1030:	
  2216  04CB  0821               	movf	___aldiv@sign,w
  2217  04CC  1903               	btfsc	3,2
  2218  04CD  2CD9               	goto	l1034
  2219  04CE  09A2               	comf	___aldiv@quotient,f
  2220  04CF  09A3               	comf	___aldiv@quotient+1,f
  2221  04D0  09A4               	comf	___aldiv@quotient+2,f
  2222  04D1  09A5               	comf	___aldiv@quotient+3,f
  2223  04D2  0AA2               	incf	___aldiv@quotient,f
  2224  04D3  1903               	skipnz
  2225  04D4  0AA3               	incf	___aldiv@quotient+1,f
  2226  04D5  1903               	skipnz
  2227  04D6  0AA4               	incf	___aldiv@quotient+2,f
  2228  04D7  1903               	skipnz
  2229  04D8  0AA5               	incf	___aldiv@quotient+3,f
  2230  04D9                     l1034:	
  2231  04D9  0825               	movf	___aldiv@quotient+3,w
  2232  04DA  00F3               	movwf	?___aldiv+3
  2233  04DB  0824               	movf	___aldiv@quotient+2,w
  2234  04DC  00F2               	movwf	?___aldiv+2
  2235  04DD  0823               	movf	___aldiv@quotient+1,w
  2236  04DE  00F1               	movwf	?___aldiv+1
  2237  04DF  0822               	movf	___aldiv@quotient,w
  2238  04E0  00F0               	movwf	?___aldiv
  2239  04E1  0008               	return
  2240  04E2                     __end_of___aldiv:	
  2241                           
  2242                           	psect	text9
  2243  026E                     __ptext9:	
  2244 ;; *************** function _UART_Data_Ready *****************
  2245 ;; Defined at:
  2246 ;;		line 30 in file "UniversalAsyncReceiveTransmit.h"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;		None
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      unsigned char 
  2253 ;; Registers used:
  2254 ;;		wreg
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2260 ;;      Params:         0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0
  2263 ;;      Totals:         0       0       0       0       0
  2264 ;;Total ram usage:        0 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_main
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           
  2274                           ;psect for function _UART_Data_Ready
  2275  026E                     _UART_Data_Ready:	
  2276                           
  2277                           ;UniversalAsyncReceiveTransmit.h: 32: return RCIF;
  2278                           
  2279                           ;incstack = 0
  2280                           ; Regs used in _UART_Data_Ready: [wreg]
  2281  026E  3000               	movlw	0
  2282  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0271  1A8C               	btfsc	12,5	;volatile
  2285  0272  3001               	movlw	1
  2286  0273  0008               	return
  2287  0274                     __end_of_UART_Data_Ready:	
  2288                           
  2289                           	psect	text10
  2290  02DF                     __ptext10:	
  2291 ;; *************** function _Lcd_Write_String *****************
  2292 ;; Defined at:
  2293 ;;		line 114 in file "LiquidCrystalDisplay.h"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  a               1    wreg     PTR const unsigned char 
  2296 ;;		 -> STR_25(18), STR_23(16), STR_19(16), STR_17(17), 
  2297 ;;		 -> STR_15(15), STR_11(13), STR_9(17), STR_7(16), 
  2298 ;;		 -> STR_3(16), STR_2(16), STR_1(17), 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  a               1    7[COMMON] PTR const unsigned char 
  2301 ;;		 -> STR_25(18), STR_23(16), STR_19(16), STR_17(17), 
  2302 ;;		 -> STR_15(15), STR_11(13), STR_9(17), STR_7(16), 
  2303 ;;		 -> STR_3(16), STR_2(16), STR_1(17), 
  2304 ;;  i               2    5[COMMON] int 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2314 ;;      Params:         0       0       0       0       0
  2315 ;;      Locals:         3       0       0       0       0
  2316 ;;      Temps:          0       0       0       0       0
  2317 ;;      Totals:         3       0       0       0       0
  2318 ;;Total ram usage:        3 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    2
  2321 ;; This function calls:
  2322 ;;		_Lcd_Write_Char
  2323 ;; This function is called by:
  2324 ;;		_main
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           
  2329                           ;psect for function _Lcd_Write_String
  2330  02DF                     _Lcd_Write_String:	
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2334                           ;Lcd_Write_String@a stored from wreg
  2335  02DF  00F7               	movwf	Lcd_Write_String@a
  2336                           
  2337                           ;LiquidCrystalDisplay.h: 116: int i;
  2338                           ;LiquidCrystalDisplay.h: 117: for(i = 0; a[i] != '\0'; i++)
  2339  02E0  01F5               	clrf	Lcd_Write_String@i
  2340  02E1  01F6               	clrf	Lcd_Write_String@i+1
  2341  02E2                     l1076:	
  2342  02E2  0875               	movf	Lcd_Write_String@i,w
  2343  02E3  0777               	addwf	Lcd_Write_String@a,w
  2344  02E4  0084               	movwf	4
  2345  02E5  120A  118A  2003  120A  118A  	fcall	stringdir
  2346  02EA  3A00               	xorlw	0
  2347  02EB  1903               	btfsc	3,2
  2348  02EC  0008               	return
  2349                           
  2350                           ;LiquidCrystalDisplay.h: 118: {
  2351                           ;LiquidCrystalDisplay.h: 119: Lcd_Write_Char(a[i]);
  2352  02ED  0875               	movf	Lcd_Write_String@i,w
  2353  02EE  0777               	addwf	Lcd_Write_String@a,w
  2354  02EF  0084               	movwf	4
  2355  02F0  120A  118A  2003  120A  118A  	fcall	stringdir
  2356  02F5  120A  118A  2374  120A  118A  	fcall	_Lcd_Write_Char
  2357  02FA  3001               	movlw	1
  2358  02FB  07F5               	addwf	Lcd_Write_String@i,f
  2359  02FC  1803               	skipnc
  2360  02FD  0AF6               	incf	Lcd_Write_String@i+1,f
  2361  02FE  3000               	movlw	0
  2362  02FF  07F6               	addwf	Lcd_Write_String@i+1,f
  2363  0300  2AE2               	goto	l1076
  2364  0301                     __end_of_Lcd_Write_String:	
  2365                           
  2366                           	psect	text11
  2367  0374                     __ptext11:	
  2368 ;; *************** function _Lcd_Write_Char *****************
  2369 ;; Defined at:
  2370 ;;		line 98 in file "LiquidCrystalDisplay.h"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  a               1    wreg     unsigned char 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;  a               1    4[COMMON] unsigned char 
  2375 ;;  y               1    3[COMMON] unsigned char 
  2376 ;;  temp            1    2[COMMON] unsigned char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0, pclath, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2386 ;;      Params:         0       0       0       0       0
  2387 ;;      Locals:         3       0       0       0       0
  2388 ;;      Temps:          1       0       0       0       0
  2389 ;;      Totals:         4       0       0       0       0
  2390 ;;Total ram usage:        4 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    1
  2393 ;; This function calls:
  2394 ;;		_Lcd_Port
  2395 ;; This function is called by:
  2396 ;;		_Lcd_Write_String
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           
  2401                           ;psect for function _Lcd_Write_Char
  2402  0374                     _Lcd_Write_Char:	
  2403                           
  2404                           ;incstack = 0
  2405                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2406                           ;Lcd_Write_Char@a stored from wreg
  2407  0374  00F4               	movwf	Lcd_Write_Char@a
  2408                           
  2409                           ;LiquidCrystalDisplay.h: 100: char temp,y;
  2410                           ;LiquidCrystalDisplay.h: 101: temp = a&0x0F;
  2411  0375  0874               	movf	Lcd_Write_Char@a,w
  2412  0376  390F               	andlw	15
  2413  0377  00F1               	movwf	??_Lcd_Write_Char
  2414  0378  0871               	movf	??_Lcd_Write_Char,w
  2415  0379  00F2               	movwf	Lcd_Write_Char@temp
  2416                           
  2417                           ;LiquidCrystalDisplay.h: 102: y = a&0xF0;
  2418  037A  0874               	movf	Lcd_Write_Char@a,w
  2419  037B  39F0               	andlw	240
  2420  037C  00F1               	movwf	??_Lcd_Write_Char
  2421  037D  0871               	movf	??_Lcd_Write_Char,w
  2422  037E  00F3               	movwf	Lcd_Write_Char@y
  2423                           
  2424                           ;LiquidCrystalDisplay.h: 103: RD2 = 1;
  2425  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2426  0380  1303               	bcf	3,6	;RP1=0, select bank0
  2427  0381  1508               	bsf	8,2	;volatile
  2428                           
  2429                           ;LiquidCrystalDisplay.h: 104: Lcd_Port(y>>4);
  2430  0382  0873               	movf	Lcd_Write_Char@y,w
  2431  0383  00F1               	movwf	??_Lcd_Write_Char
  2432  0384  3004               	movlw	4
  2433  0385                     u525:	
  2434  0385  1003               	clrc
  2435  0386  0CF1               	rrf	??_Lcd_Write_Char,f
  2436  0387  3EFF               	addlw	-1
  2437  0388  1D03               	skipz
  2438  0389  2B85               	goto	u525
  2439  038A  0871               	movf	??_Lcd_Write_Char,w
  2440  038B  120A  118A  228F  120A  118A  	fcall	_Lcd_Port
  2441                           
  2442                           ;LiquidCrystalDisplay.h: 105: RD3 = 1;
  2443  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2444  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2445  0392  1588               	bsf	8,3	;volatile
  2446                           
  2447                           ;LiquidCrystalDisplay.h: 106: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2448  0393  3042               	movlw	66
  2449  0394  00F1               	movwf	??_Lcd_Write_Char
  2450  0395                     u1077:	
  2451  0395  0BF1               	decfsz	??_Lcd_Write_Char,f
  2452  0396  2B95               	goto	u1077
  2453  0397  0000               	nop
  2454                           
  2455                           ;LiquidCrystalDisplay.h: 107: RD3 = 0;
  2456  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2457  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2458  039A  1188               	bcf	8,3	;volatile
  2459                           
  2460                           ;LiquidCrystalDisplay.h: 108: Lcd_Port(temp);
  2461  039B  0872               	movf	Lcd_Write_Char@temp,w
  2462  039C  120A  118A  228F  120A  118A  	fcall	_Lcd_Port
  2463                           
  2464                           ;LiquidCrystalDisplay.h: 109: RD3 = 1;
  2465  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2466  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2467  03A3  1588               	bsf	8,3	;volatile
  2468                           
  2469                           ;LiquidCrystalDisplay.h: 110: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2470  03A4  3042               	movlw	66
  2471  03A5  00F1               	movwf	??_Lcd_Write_Char
  2472  03A6                     u1087:	
  2473  03A6  0BF1               	decfsz	??_Lcd_Write_Char,f
  2474  03A7  2BA6               	goto	u1087
  2475  03A8  0000               	nop
  2476                           
  2477                           ;LiquidCrystalDisplay.h: 111: RD3 = 0;
  2478  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  2479  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  2480  03AB  1188               	bcf	8,3	;volatile
  2481  03AC  0008               	return
  2482  03AD                     __end_of_Lcd_Write_Char:	
  2483                           
  2484                           	psect	text12
  2485  03AD                     __ptext12:	
  2486 ;; *************** function _Lcd_Set_Cursor *****************
  2487 ;; Defined at:
  2488 ;;		line 58 in file "LiquidCrystalDisplay.h"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  a               1    wreg     unsigned char 
  2491 ;;  b               1    4[COMMON] unsigned char 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  a               1    7[COMMON] unsigned char 
  2494 ;;  temp            1   10[COMMON] unsigned char 
  2495 ;;  y               1    9[COMMON] unsigned char 
  2496 ;;  z               1    8[COMMON] unsigned char 
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		wreg, status,2, status,0, pclath, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2506 ;;      Params:         1       0       0       0       0
  2507 ;;      Locals:         4       0       0       0       0
  2508 ;;      Temps:          2       0       0       0       0
  2509 ;;      Totals:         7       0       0       0       0
  2510 ;;Total ram usage:        7 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; Hardware stack levels required when called:    2
  2513 ;; This function calls:
  2514 ;;		_Lcd_Cmd
  2515 ;; This function is called by:
  2516 ;;		_main
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _Lcd_Set_Cursor
  2522  03AD                     _Lcd_Set_Cursor:	
  2523                           
  2524                           ;incstack = 0
  2525                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2526                           ;Lcd_Set_Cursor@a stored from wreg
  2527  03AD  00F7               	movwf	Lcd_Set_Cursor@a
  2528                           
  2529                           ;LiquidCrystalDisplay.h: 60: char temp,z,y;
  2530                           ;LiquidCrystalDisplay.h: 61: if(a == 1)
  2531  03AE  0377               	decf	Lcd_Set_Cursor@a,w
  2532  03AF  1D03               	btfss	3,2
  2533  03B0  2BD2               	goto	l1050
  2534                           
  2535                           ;LiquidCrystalDisplay.h: 62: {
  2536                           ;LiquidCrystalDisplay.h: 63: temp = 0x80 + b - 1;
  2537  03B1  0874               	movf	Lcd_Set_Cursor@b,w
  2538  03B2  3E7F               	addlw	127
  2539  03B3  00F5               	movwf	??_Lcd_Set_Cursor
  2540  03B4  0875               	movf	??_Lcd_Set_Cursor,w
  2541  03B5  00FA               	movwf	Lcd_Set_Cursor@temp
  2542                           
  2543                           ;LiquidCrystalDisplay.h: 64: z = temp>>4;
  2544  03B6  087A               	movf	Lcd_Set_Cursor@temp,w
  2545  03B7  00F5               	movwf	??_Lcd_Set_Cursor
  2546  03B8  3004               	movlw	4
  2547  03B9                     u665:	
  2548  03B9  1003               	clrc
  2549  03BA  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2550  03BB  3EFF               	addlw	-1
  2551  03BC  1D03               	skipz
  2552  03BD  2BB9               	goto	u665
  2553  03BE  0875               	movf	??_Lcd_Set_Cursor,w
  2554  03BF  00F6               	movwf	??_Lcd_Set_Cursor+1
  2555  03C0  0876               	movf	??_Lcd_Set_Cursor+1,w
  2556  03C1  00F8               	movwf	Lcd_Set_Cursor@z
  2557                           
  2558                           ;LiquidCrystalDisplay.h: 65: y = temp & 0x0F;
  2559  03C2  087A               	movf	Lcd_Set_Cursor@temp,w
  2560  03C3  390F               	andlw	15
  2561  03C4  00F5               	movwf	??_Lcd_Set_Cursor
  2562  03C5  0875               	movf	??_Lcd_Set_Cursor,w
  2563  03C6  00F9               	movwf	Lcd_Set_Cursor@y
  2564                           
  2565                           ;LiquidCrystalDisplay.h: 66: Lcd_Cmd(z);
  2566  03C7  0878               	movf	Lcd_Set_Cursor@z,w
  2567  03C8  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2568                           
  2569                           ;LiquidCrystalDisplay.h: 67: Lcd_Cmd(y);
  2570  03CD  0879               	movf	Lcd_Set_Cursor@y,w
  2571  03CE  120A  118A  22A9   	fcall	_Lcd_Cmd
  2572                           
  2573                           ;LiquidCrystalDisplay.h: 68: }
  2574  03D1  0008               	return
  2575  03D2                     l1050:	
  2576                           
  2577                           ;LiquidCrystalDisplay.h: 69: else if(a == 2)
  2578  03D2  3002               	movlw	2
  2579  03D3  0677               	xorwf	Lcd_Set_Cursor@a,w
  2580  03D4  1D03               	btfss	3,2
  2581  03D5  0008               	return
  2582                           
  2583                           ;LiquidCrystalDisplay.h: 70: {
  2584                           ;LiquidCrystalDisplay.h: 71: temp = 0xC0 + b - 1;
  2585  03D6  0874               	movf	Lcd_Set_Cursor@b,w
  2586  03D7  3EBF               	addlw	191
  2587  03D8  00F5               	movwf	??_Lcd_Set_Cursor
  2588  03D9  0875               	movf	??_Lcd_Set_Cursor,w
  2589  03DA  00FA               	movwf	Lcd_Set_Cursor@temp
  2590                           
  2591                           ;LiquidCrystalDisplay.h: 72: z = temp>>4;
  2592  03DB  087A               	movf	Lcd_Set_Cursor@temp,w
  2593  03DC  00F5               	movwf	??_Lcd_Set_Cursor
  2594  03DD  3004               	movlw	4
  2595  03DE                     u685:	
  2596  03DE  1003               	clrc
  2597  03DF  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2598  03E0  3EFF               	addlw	-1
  2599  03E1  1D03               	skipz
  2600  03E2  2BDE               	goto	u685
  2601  03E3  0875               	movf	??_Lcd_Set_Cursor,w
  2602  03E4  00F6               	movwf	??_Lcd_Set_Cursor+1
  2603  03E5  0876               	movf	??_Lcd_Set_Cursor+1,w
  2604  03E6  00F8               	movwf	Lcd_Set_Cursor@z
  2605                           
  2606                           ;LiquidCrystalDisplay.h: 73: y = temp & 0x0F;
  2607  03E7  087A               	movf	Lcd_Set_Cursor@temp,w
  2608  03E8  390F               	andlw	15
  2609  03E9  00F5               	movwf	??_Lcd_Set_Cursor
  2610  03EA  0875               	movf	??_Lcd_Set_Cursor,w
  2611  03EB  00F9               	movwf	Lcd_Set_Cursor@y
  2612                           
  2613                           ;LiquidCrystalDisplay.h: 74: Lcd_Cmd(z);
  2614  03EC  0878               	movf	Lcd_Set_Cursor@z,w
  2615  03ED  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2616                           
  2617                           ;LiquidCrystalDisplay.h: 75: Lcd_Cmd(y);
  2618  03F2  0879               	movf	Lcd_Set_Cursor@y,w
  2619  03F3  120A  118A  22A9   	fcall	_Lcd_Cmd
  2620  03F6  0008               	return
  2621  03F7                     __end_of_Lcd_Set_Cursor:	
  2622                           
  2623                           	psect	text13
  2624  03F7                     __ptext13:	
  2625 ;; *************** function _Lcd_Init *****************
  2626 ;; Defined at:
  2627 ;;		line 79 in file "LiquidCrystalDisplay.h"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;		None
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;		None
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      void 
  2634 ;; Registers used:
  2635 ;;		wreg, status,2, status,0, pclath, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2641 ;;      Params:         0       0       0       0       0
  2642 ;;      Locals:         0       0       0       0       0
  2643 ;;      Temps:          2       0       0       0       0
  2644 ;;      Totals:         2       0       0       0       0
  2645 ;;Total ram usage:        2 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    2
  2648 ;; This function calls:
  2649 ;;		_Lcd_Cmd
  2650 ;;		_Lcd_Port
  2651 ;; This function is called by:
  2652 ;;		_main
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           
  2657                           ;psect for function _Lcd_Init
  2658  03F7                     _Lcd_Init:	
  2659                           
  2660                           ;LiquidCrystalDisplay.h: 81: Lcd_Port(0x00);
  2661                           
  2662                           ;incstack = 0
  2663                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2664  03F7  3000               	movlw	0
  2665  03F8  120A  118A  228F  120A  118A  	fcall	_Lcd_Port
  2666                           
  2667                           ;LiquidCrystalDisplay.h: 82: _delay((unsigned long)((20)*(20000000/4000.0)));
  2668  03FD  3082               	movlw	130
  2669  03FE  00F5               	movwf	??_Lcd_Init+1
  2670  03FF  30DD               	movlw	221
  2671  0400  00F4               	movwf	??_Lcd_Init
  2672  0401                     u1097:	
  2673  0401  0BF4               	decfsz	??_Lcd_Init,f
  2674  0402  2C01               	goto	u1097
  2675  0403  0BF5               	decfsz	??_Lcd_Init+1,f
  2676  0404  2C01               	goto	u1097
  2677  0405  2C06               	nop2
  2678                           
  2679                           ;LiquidCrystalDisplay.h: 83: Lcd_Cmd(0x03);
  2680  0406  3003               	movlw	3
  2681  0407  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2682                           
  2683                           ;LiquidCrystalDisplay.h: 84: _delay((unsigned long)((5)*(20000000/4000.0)));
  2684  040C  3021               	movlw	33
  2685  040D  00F5               	movwf	??_Lcd_Init+1
  2686  040E  3076               	movlw	118
  2687  040F  00F4               	movwf	??_Lcd_Init
  2688  0410                     u1107:	
  2689  0410  0BF4               	decfsz	??_Lcd_Init,f
  2690  0411  2C10               	goto	u1107
  2691  0412  0BF5               	decfsz	??_Lcd_Init+1,f
  2692  0413  2C10               	goto	u1107
  2693  0414  0000               	nop
  2694                           
  2695                           ;LiquidCrystalDisplay.h: 85: Lcd_Cmd(0x03);
  2696  0415  3003               	movlw	3
  2697  0416  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2698                           
  2699                           ;LiquidCrystalDisplay.h: 86: _delay((unsigned long)((11)*(20000000/4000.0)));
  2700  041B  3048               	movlw	72
  2701  041C  00F5               	movwf	??_Lcd_Init+1
  2702  041D  306C               	movlw	108
  2703  041E  00F4               	movwf	??_Lcd_Init
  2704  041F                     u1117:	
  2705  041F  0BF4               	decfsz	??_Lcd_Init,f
  2706  0420  2C1F               	goto	u1117
  2707  0421  0BF5               	decfsz	??_Lcd_Init+1,f
  2708  0422  2C1F               	goto	u1117
  2709  0423  0000               	nop
  2710                           
  2711                           ;LiquidCrystalDisplay.h: 87: Lcd_Cmd(0x03);
  2712  0424  3003               	movlw	3
  2713  0425  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2714                           
  2715                           ;LiquidCrystalDisplay.h: 89: Lcd_Cmd(0x02);
  2716  042A  3002               	movlw	2
  2717  042B  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2718                           
  2719                           ;LiquidCrystalDisplay.h: 90: Lcd_Cmd(0x02);
  2720  0430  3002               	movlw	2
  2721  0431  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2722                           
  2723                           ;LiquidCrystalDisplay.h: 91: Lcd_Cmd(0x08);
  2724  0436  3008               	movlw	8
  2725  0437  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2726                           
  2727                           ;LiquidCrystalDisplay.h: 92: Lcd_Cmd(0x00);
  2728  043C  3000               	movlw	0
  2729  043D  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2730                           
  2731                           ;LiquidCrystalDisplay.h: 93: Lcd_Cmd(0x0C);
  2732  0442  300C               	movlw	12
  2733  0443  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2734                           
  2735                           ;LiquidCrystalDisplay.h: 94: Lcd_Cmd(0x00);
  2736  0448  3000               	movlw	0
  2737  0449  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2738                           
  2739                           ;LiquidCrystalDisplay.h: 95: Lcd_Cmd(0x06);
  2740  044E  3006               	movlw	6
  2741  044F  120A  118A  22A9   	fcall	_Lcd_Cmd
  2742  0452  0008               	return
  2743  0453                     __end_of_Lcd_Init:	
  2744                           
  2745                           	psect	text14
  2746  0284                     __ptext14:	
  2747 ;; *************** function _Lcd_Clear *****************
  2748 ;; Defined at:
  2749 ;;		line 52 in file "LiquidCrystalDisplay.h"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0, pclath, cstack
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2763 ;;      Params:         0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    2
  2770 ;; This function calls:
  2771 ;;		_Lcd_Cmd
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           
  2778                           ;psect for function _Lcd_Clear
  2779  0284                     _Lcd_Clear:	
  2780                           
  2781                           ;LiquidCrystalDisplay.h: 54: Lcd_Cmd(0);
  2782                           
  2783                           ;incstack = 0
  2784                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2785  0284  3000               	movlw	0
  2786  0285  120A  118A  22A9  120A  118A  	fcall	_Lcd_Cmd
  2787                           
  2788                           ;LiquidCrystalDisplay.h: 55: Lcd_Cmd(1);
  2789  028A  3001               	movlw	1
  2790  028B  120A  118A  22A9   	fcall	_Lcd_Cmd
  2791  028E  0008               	return
  2792  028F                     __end_of_Lcd_Clear:	
  2793                           
  2794                           	psect	text15
  2795  02A9                     __ptext15:	
  2796 ;; *************** function _Lcd_Cmd *****************
  2797 ;; Defined at:
  2798 ;;		line 43 in file "LiquidCrystalDisplay.h"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  a               1    wreg     unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  a               1    3[COMMON] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, status,0, pclath, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2812 ;;      Params:         0       0       0       0       0
  2813 ;;      Locals:         1       0       0       0       0
  2814 ;;      Temps:          2       0       0       0       0
  2815 ;;      Totals:         3       0       0       0       0
  2816 ;;Total ram usage:        3 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    1
  2819 ;; This function calls:
  2820 ;;		_Lcd_Port
  2821 ;; This function is called by:
  2822 ;;		_Lcd_Clear
  2823 ;;		_Lcd_Set_Cursor
  2824 ;;		_Lcd_Init
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           
  2829                           ;psect for function _Lcd_Cmd
  2830  02A9                     _Lcd_Cmd:	
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2834                           ;Lcd_Cmd@a stored from wreg
  2835  02A9  00F3               	movwf	Lcd_Cmd@a
  2836                           
  2837                           ;LiquidCrystalDisplay.h: 45: RD2 = 0;
  2838  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2839  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2840  02AC  1108               	bcf	8,2	;volatile
  2841                           
  2842                           ;LiquidCrystalDisplay.h: 46: Lcd_Port(a);
  2843  02AD  0873               	movf	Lcd_Cmd@a,w
  2844  02AE  120A  118A  228F  120A  118A  	fcall	_Lcd_Port
  2845                           
  2846                           ;LiquidCrystalDisplay.h: 47: RD3 = 1;
  2847  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2848  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2849  02B5  1588               	bsf	8,3	;volatile
  2850                           
  2851                           ;LiquidCrystalDisplay.h: 48: _delay((unsigned long)((4)*(20000000/4000.0)));
  2852  02B6  301A               	movlw	26
  2853  02B7  00F2               	movwf	??_Lcd_Cmd+1
  2854  02B8  30F8               	movlw	248
  2855  02B9  00F1               	movwf	??_Lcd_Cmd
  2856  02BA                     u1127:	
  2857  02BA  0BF1               	decfsz	??_Lcd_Cmd,f
  2858  02BB  2ABA               	goto	u1127
  2859  02BC  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2860  02BD  2ABA               	goto	u1127
  2861  02BE  0000               	nop
  2862                           
  2863                           ;LiquidCrystalDisplay.h: 49: RD3 = 0;
  2864  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  2865  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  2866  02C1  1188               	bcf	8,3	;volatile
  2867  02C2  0008               	return
  2868  02C3                     __end_of_Lcd_Cmd:	
  2869                           
  2870                           	psect	text16
  2871  028F                     __ptext16:	
  2872 ;; *************** function _Lcd_Port *****************
  2873 ;; Defined at:
  2874 ;;		line 4 in file "LiquidCrystalDisplay.h"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  a               1    wreg     unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  a               1    0[COMMON] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2888 ;;      Params:         0       0       0       0       0
  2889 ;;      Locals:         1       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0
  2891 ;;      Totals:         1       0       0       0       0
  2892 ;;Total ram usage:        1 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_Lcd_Cmd
  2898 ;;		_Lcd_Init
  2899 ;;		_Lcd_Write_Char
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _Lcd_Port
  2905  028F                     _Lcd_Port:	
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _Lcd_Port: [wreg]
  2909                           ;Lcd_Port@a stored from wreg
  2910  028F  00F0               	movwf	Lcd_Port@a
  2911                           
  2912                           ;LiquidCrystalDisplay.h: 6: if(a & 1)
  2913  0290  1C70               	btfss	Lcd_Port@a,0
  2914  0291  2A96               	goto	l47
  2915                           
  2916                           ;LiquidCrystalDisplay.h: 7: {
  2917                           ;LiquidCrystalDisplay.h: 8: RD4 = 1;
  2918  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2919  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2920  0294  1608               	bsf	8,4	;volatile
  2921                           
  2922                           ;LiquidCrystalDisplay.h: 9: }
  2923  0295  2A99               	goto	l48
  2924  0296                     l47:	
  2925                           
  2926                           ;LiquidCrystalDisplay.h: 10: else
  2927                           ;LiquidCrystalDisplay.h: 11: {
  2928                           ;LiquidCrystalDisplay.h: 12: RD4 = 0;
  2929  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0298  1208               	bcf	8,4	;volatile
  2932  0299                     l48:	
  2933                           
  2934                           ;LiquidCrystalDisplay.h: 13: }
  2935                           ;LiquidCrystalDisplay.h: 15: if(a & 2)
  2936  0299  1CF0               	btfss	Lcd_Port@a,1
  2937  029A  2A9D               	goto	l49
  2938                           
  2939                           ;LiquidCrystalDisplay.h: 16: {
  2940                           ;LiquidCrystalDisplay.h: 17: RD5 = 1;
  2941  029B  1688               	bsf	8,5	;volatile
  2942                           
  2943                           ;LiquidCrystalDisplay.h: 18: }
  2944  029C  2A9E               	goto	l50
  2945  029D                     l49:	
  2946                           
  2947                           ;LiquidCrystalDisplay.h: 19: else
  2948                           ;LiquidCrystalDisplay.h: 20: {
  2949                           ;LiquidCrystalDisplay.h: 21: RD5 = 0;
  2950  029D  1288               	bcf	8,5	;volatile
  2951  029E                     l50:	
  2952                           
  2953                           ;LiquidCrystalDisplay.h: 22: }
  2954                           ;LiquidCrystalDisplay.h: 24: if(a & 4)
  2955  029E  1D70               	btfss	Lcd_Port@a,2
  2956  029F  2AA2               	goto	l51
  2957                           
  2958                           ;LiquidCrystalDisplay.h: 25: {
  2959                           ;LiquidCrystalDisplay.h: 26: RD6 = 1;
  2960  02A0  1708               	bsf	8,6	;volatile
  2961                           
  2962                           ;LiquidCrystalDisplay.h: 27: }
  2963  02A1  2AA3               	goto	l52
  2964  02A2                     l51:	
  2965                           
  2966                           ;LiquidCrystalDisplay.h: 28: else
  2967                           ;LiquidCrystalDisplay.h: 29: {
  2968                           ;LiquidCrystalDisplay.h: 30: RD6 = 0;
  2969  02A2  1308               	bcf	8,6	;volatile
  2970  02A3                     l52:	
  2971                           
  2972                           ;LiquidCrystalDisplay.h: 31: }
  2973                           ;LiquidCrystalDisplay.h: 33: if(a & 8)
  2974  02A3  1DF0               	btfss	Lcd_Port@a,3
  2975  02A4  2AA7               	goto	l53
  2976                           
  2977                           ;LiquidCrystalDisplay.h: 34: {
  2978                           ;LiquidCrystalDisplay.h: 35: RD7 = 1;
  2979  02A5  1788               	bsf	8,7	;volatile
  2980                           
  2981                           ;LiquidCrystalDisplay.h: 36: }
  2982  02A6  0008               	return
  2983  02A7                     l53:	
  2984                           
  2985                           ;LiquidCrystalDisplay.h: 37: else
  2986                           ;LiquidCrystalDisplay.h: 38: {
  2987                           ;LiquidCrystalDisplay.h: 39: RD7 = 0;
  2988  02A7  1388               	bcf	8,7	;volatile
  2989  02A8  0008               	return
  2990  02A9                     __end_of_Lcd_Port:	
  2991  007E                     btemp	set	126	;btemp
  2992  007E                     wtemp0	set	126


Data Sizes:
    Strings     230
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_22(CODE[3]), STR_14(CODE[3]), STR_6(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    memset@p1	PTR void  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    memset@p	PTR unsigned char  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    UART_Write_Text@text	PTR const unsigned char  size(1) Largest target is 35
		 -> STR_26(CODE[3]), STR_24(CODE[3]), STR_21(CODE[3]), STR_20(CODE[35]), 
		 -> STR_18(CODE[3]), STR_16(CODE[3]), STR_13(CODE[3]), STR_12(CODE[12]), 
		 -> STR_10(CODE[3]), STR_8(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 

    UART_Read_Text@buffer	PTR unsigned char  size(1) Largest target is 8
		 -> ESP_Response(BANK0[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_25(CODE[18]), STR_23(CODE[16]), STR_19(CODE[16]), STR_17(CODE[17]), 
		 -> STR_15(CODE[15]), STR_11(CODE[13]), STR_9(CODE[17]), STR_7(CODE[16]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_UART_Init
    _UART_Write_Text->_UART_Write
    _UART_Init->___aldiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    3905
                                             11 COMMON     3     3      0
                                             22 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                    _UART_Data_Ready
                          _UART_Init
                     _UART_Read_Text
                    _UART_Write_Text
                             _memset
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     4      2     331
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     495
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      3     3      0     436
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Read_Text                                       6     6      0     172
                                              0 COMMON     6     6      0
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     721
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     565
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     804
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read_Text
     _UART_Read
   _UART_Write_Text
     _UART_Write
   _memset
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      30       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      30      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Feb 05 12:51:14 2017

                        pc 0002                __CFG_CP$OFF 0000                         l50 029E  
                       l51 02A2                         l52 02A3                         l53 02A7  
                       l47 0296                         l48 0299                         l49 029D  
                       l93 0274                         fsr 0004                __CFG_LVP$ON 0000  
                      l104 027B                        l287 0465                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047               __CFG_CPD$OFF 0000  
                      u525 0385                        u605 0498                        u615 04AD  
                      u720 0528                        u625 04BF                        u721 0529  
                      u705 04ED                        u722 052E                        u723 052F  
                      u715 050E                        u760 0591                        u665 03B9  
                      u585 048A                        u761 0592                        u745 0556  
                      u762 0597                        u763 0598                        u755 0577  
                      u685 03DE                        u785 0347                        u957 05DE  
                      u967 05FA                        u977 0628                        u987 064D  
                      u997 0689                        fsr0 0004                        indf 0000  
             __CFG_FOSC$HS 0000                       l1030 04CB                       l1110 0326  
                     l1016 0486                       l1008 0476                       l1050 03D2  
                     l1034 04D9                       l1026 04BE                       l1018 0496  
                     l1202 062F                       l1124 0304                       l1132 02C8  
                     l1140 0354                       l1204 06C6                       l1214 06F2  
                     l1144 036E                       l1136 034C                       l1232 073E  
                     l1076 02E2                       l1236 0757                       l1180 0660  
                     l1086 05B0                       l1238 075D                       l1270 07EE  
                     l1248 0789                       l1266 07D5                       l1198 06AC  
                     STR_1 0060                       STR_2 00A1                       STR_3 0091  
                     STR_4 00EC                       STR_5 00E9                       STR_6 007E  
                     STR_7 0071                       STR_8 00E9                       STR_9 003E  
                     _BRGH 04C2                       _CREN 00C4                       u1007 06BE  
                     u1017 06DF                       u1107 0410                       u1027 071B  
                     u1117 041F                       u1037 0750                       u1127 02BA  
                     u1047 0776                       u1057 07B2                       u1067 07E7  
                     u1077 0395                       u1087 03A6                       u1097 0401  
                     _RCIF 0065                       _SPEN 00C7                       _TRMT 04C1  
                     _TXEN 04C5                       _SYNC 04C4               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0070                main@op_mode 0038                       _main 05CA  
                     btemp 007E                       start 0000         ??_Lcd_Write_String 0075  
          __end_of_Lcd_Cmd 02C3    __end_of_UART_Write_Text 0323            __end_of___aldiv 04E2  
                    ?_main 0070                      STR_10 00E9                      STR_11 00D0  
                    STR_12 00DD                      STR_20 0009                      STR_21 00E9  
                    STR_13 00E9                      STR_22 007E                      STR_14 007E  
                    STR_15 00C1                      STR_23 0081                      STR_24 00E9  
                    STR_16 00E9                      STR_17 004F                      STR_25 002C  
            __CFG_WDTE$OFF 0000                      STR_26 00E9                      STR_18 00E9  
                    STR_19 00B1                      _RCREG 001A                      _SPBRG 0099  
  __size_of_Lcd_Set_Cursor 004A                      _TRISD 0088                      _TXREG 0019  
     UART_Read_Text@buffer 0073                ?_UART_Write 0070         __size_of_UART_Init 00E8  
       __size_of_UART_Read 0006             __CFG_BOREN$OFF 0000                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 0453  
         __end_of_Lcd_Port 02A9            __initialization 07F4               __end_of_main 07F4  
                   ??_main 007B         __size_of_Lcd_Clear 000B                  ??_Lcd_Cmd 0071  
  __size_of_Lcd_Write_Char 0039                     _TRISC6 043E                     _TRISC7 043F  
           __CFG_PWRTE$OFF 0000          __end_of_UART_Init 05CA          __end_of_UART_Read 027A  
      __size_of_UART_Write 000A                  ??___aldiv 0078           ?_UART_Write_Text 0070  
  __size_of_UART_Read_Text 0027                     _memset 02C3                     _strcmp 034A  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC          __end_of_Lcd_Clear 028F  
           __pcstackCOMMON 0070             _Lcd_Set_Cursor 03AD                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pbssBANK0 003A   __size_of_UART_Data_Ready 0006  
               __pmaintext 05CA                    ?_memset 0070  __size_of_Lcd_Write_String 0022  
   __end_of_Lcd_Set_Cursor 03F7                    ?_strcmp 0070               ??_UART_Write 0070  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 0374                    _Lcd_Cmd 02A9                    ___aldiv 0453  
   UART_Read_Text@rec_data 0072         __end_of_UART_Write 0284             _UART_Read_Text 0323  
          __size_of_memset 001C            ?_Lcd_Set_Cursor 0074                    __ptext1 034A  
                  __ptext2 02C3                    __ptext3 0301                    __ptext4 027A  
                  __ptext5 0323                    __ptext6 0274                    __ptext7 04E2  
                  __ptext8 0453                    __ptext9 026E            __size_of_strcmp 002A  
         ___aldiv@dividend 0074     __end_of_Lcd_Write_Char 03AD       end_of_initialization 07FC  
                  memset@c 0070                    memset@n 0072                    memset@p 0075  
   __end_of_UART_Read_Text 034A           ___aldiv@quotient 0022                  Lcd_Port@a 0070  
        ??_UART_Data_Ready 0070                    strcmp@r 0074                  _UART_Init 04E2  
                _UART_Read 0274             UART_Write@data 0070            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0077          Lcd_Write_String@i 0075                 main@esp_ok 0037  
        main@device_status 0036            ?_UART_Read_Text 0070                  _Lcd_Clear 0284  
         _Lcd_Write_String 02DF                 ?_UART_Init 0026                 ?_UART_Read 0070  
           __end_of_memset 02DF   __size_of_UART_Write_Text 0022             __end_of_strcmp 0374  
      start_initialization 07F4          __size_of_Lcd_Init 005C          __size_of_Lcd_Port 001A  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074                   ??_memset 0074  
          Lcd_Write_Char@y 0073                   ??_strcmp 0072                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070               _ESP_Response 003A  
         ??_Lcd_Set_Cursor 0075                   ?___aldiv 0070                ??_UART_Init 002A  
              ??_UART_Read 0070                  __pstrings 0003                 UART_Init@x 0079  
        ??_UART_Write_Text 0071            ___aldiv@divisor 0070            ___aldiv@counter 0020  
          _UART_Data_Ready 026E            UART_Read_Text@i 0074                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074          UART_Init@baudrate 0026                __stringbase 0008  
         ??_Lcd_Write_Char 0071                   _Lcd_Init 03F7                   _Lcd_Port 028F  
 __end_of_Lcd_Write_String 0301           ??_UART_Read_Text 0070           __size_of_Lcd_Cmd 001A  
         __size_of___aldiv 008F         __end_of__stringtab 0009           main@wifi_connect 0039  
                 __ptext10 02DF                   __ptext11 0374                   __ptext12 03AD  
                 __ptext13 03F7                   __ptext14 0284                   __ptext15 02A9  
                 __ptext16 028F    __end_of_UART_Data_Ready 0274        UART_Write_Text@text 0073  
            __size_of_main 022A                   memset@p1 0076         Lcd_Write_Char@temp 0072  
                stringcode 0003         Lcd_Set_Cursor@temp 007A            _UART_Write_Text 0301  
                 strcmp@s1 0075                   strcmp@s2 0070                   stringdir 0003  
                 stringtab 0003               ___aldiv@sign 0021                 _UART_Write 027A  
         ?_UART_Data_Ready 0070           UART_Write_Text@i 0071  
